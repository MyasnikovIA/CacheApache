<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="%ZWeb.Server">
<Description><![CDATA[
<example>
  d ##class(%ZWeb.Server).Start(80  , "D:\www","csp/user/SMWrap.main.cls" )
  d ##class(%ZWeb.Server).Start(80  , "C:\sirena\env","index.html" )
  d ##class(%ZWeb.Server).Stop(80)%ZWeb.Server
  d ##class(%ZWeb.Server).Start(8228  , "C:\AppServ\www","DUBROVINO","index.htm" )
  d ##class(%ZWeb.Server).Start(6010  , "C:\AppServ\www","index.html" )
  d ##class(%ZWeb.Server).Start(6010  , "C:\AppCacheSrv\www","user","index.html" )
  d ##class(%ZWeb.Server).Start(6010  , "D:\sirena\env","sirena","sirena/index.csp" )
  d ##class(%ZWeb.Server).Start(6010  , "E:\!5autoexport\myasnikovia\www","sirena","index.html" )
  d ##class(%ZWeb.Server).Stop()
</example>]]></Description>
<Super>%RegisteredObject</Super>
<TimeCreated>64772,22000.244656</TimeCreated>

<Method name="ExportUDL">
<Description>
d ##class(%ZWeb.Server).ExportUDL()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>path=""</FormalSpec>
<Implementation><![CDATA[
   if $l(path)=0  d $system.OBJ.ExportUDL(##this_".CLS", "C:\TMP\"_##this_".CLS","/diffexport")
   e  d $system.OBJ.ExportUDL(##this_".CLS", path,"/diffexport")
]]></Implementation>
</Method>

<Property name="Port">
<Type>%String</Type>
<InitialExpression>6010</InitialExpression>
</Property>

<Property name="Dir">
<Type>%String</Type>
<InitialExpression>"C:\AppServ\www"</InitialExpression>
</Property>

<Property name="Page">
<Type>%String</Type>
<InitialExpression>"index.html"</InitialExpression>
</Property>

<Property name="NameSpace">
<Type>%String</Type>
<InitialExpression>"user"</InitialExpression>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   d ##class(%ZWeb.Server).Start(..Port  , ..Dir,..NameSpace,..Page )    
   quit $$$OK
]]></Implementation>
</Method>

<Method name="Stop">
<Description>
Остановить работу сервера</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port:%Integer=6010</FormalSpec>
<Implementation><![CDATA[
   s port=$g(port)
    if $l(port)>0 d
    . s ^%ZWebServerKill(port)=1
    .  S httprequest=##class(%Net.HttpRequest).%New()
    .  s httprequest.Server="127.0.0.1"
    .  s httprequest.Port=port
    .  s httprequest.Timeout=1
    .  d httprequest.Get("/")
    .  s httprequest=""
    . h 1
    . w !,"Server "_port_" stoped"
    e  d
    . s port=""
    . q:$d(^%ZWebServerCfg)
    . f  s port=$o(^%ZWebServerCfg(port))  q:port=""   d
    . .  s ^%ZWebServerKill(port)=1
    . .   S httprequest=##class(%Net.HttpRequest).%New()
    . .   s httprequest.Server="127.0.0.1"
    . .   s httprequest.Port=port
    . .   s httprequest.Timeout=1
    . .   d httprequest.Get("/")
    . .   s httprequest=""
    . .  h 1
    . .  w !,"Server "_port_" stoped"
    q
]]></Implementation>
</Method>

<Method name="Start">
<Description>
 d ##class(%ZWeb.Server).Start(9229  , "C:\AppServ\www","USER","index.html" , "main")

Запустить работу сервера</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port:%Integer=6010,pathHost:%String="C:\AppServ\www",startPage:%String="index.html"</FormalSpec>
<Implementation><![CDATA[
     s NameSpaceDefault="%SYS"
     s methodDefault = "OnPage"
     k ^%ZWebServerKill(port)
     ; 63991
     w !,"Автор: Мясников Иван Александрович"
     w !,"Email: Miacom@mail.ru"
     w !
     ; if $p($h,",",1)>(63991+60+60+60) w !,"Льготный период использования закончился. Обратитесь к автору за продлением.",!
     s port = $G(port)  
     s TimeOut=3200
     s pathHost=$g(pathHost)
     s NameSpaceDefault=$g(NameSpaceDefault)
     s startPage=$g(startPage)
     s methodDefault=$g(methodDefault )
          if $d(^%ZWebServerCfg(port)) d
          .    d ..Stop(port)
          .    k ^%ZWebServerCfg(port)
          s ^%ZWebServerCfg(port)=$lb(port,TimeOut,pathHost,NameSpaceDefault, startPage,methodDefault)
     s cmd="cmd /c  start ""explorer.exe""  ""http://127.0.0.1:"_port_"/"_startPage_""""
     ; d $zf(-1,cmd,1)
     job ..startJob(port)
     w !,"Start server:"_port
     q
]]></Implementation>
</Method>

<Method name="startJob">
<Description>
Работа сокет сервера в паралельном потоке.
Ожидание подключения и создание обработчика клиента в паралельном потоке</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port</FormalSpec>
<Implementation><![CDATA[
     s port = $lg(^%ZWebServerCfg(port),1)  
     SET dev="|TCP|1"
     OPEN dev:(:port:"MA"):200
     s inData=""
     s indSrv=0
     s isEnd=0
     k ^%ZWebServerKill(port)
     For  USE dev  READ inData q:isEnd=1  Do:$T
     .  if $d(^%ZWebServerKill(port))   s isEnd=1
     .  USE dev  
     .  Job ..childVar(port):(:17::)  ; Concurrent server bit is on
     .  If $ZCHILD=0 w " Server can't create new JOB!"
     Close dev   
     k ^%ZWebServerKill(port)
     Quit
]]></Implementation>
</Method>

<Method name="TestHacker">
<ClassMethod>1</ClassMethod>
<FormalSpec>zapros=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s zapros=$ZCVT(zapros,"L")
	q:$l(zapros,".php")>1 1
	q:$l(zapros,".cgi")>1 1
	q:$l(zapros,".jsp")>1 1
	q:$l(zapros,".action")>1 1
	q:$l(zapros,"mstshash=Administr")>1 1
	q:$l(zapros,"login.action")>1 1
	q:$l(zapros,"index.action")>1 1
	q:$l(zapros,"index.jsp")>1 1
	; q:$l(zapros,"robots.txt")>1 1
	q:$l(zapros,"cgi/common.cgi")>1 1
	q:$l(zapros,"command.php")>1 1
	q:$l(zapros,"HNAP1/")>1 1
	q:$l(zapros,"script")>1 1
    q:$l(zapros,"sqlite/main.php")>1 1
    q:$l(zapros,"sqlitemanager/main.php")>1 1
    q:$l(zapros,"SQLite/main.php")>1 1
	q:$l(zapros,"main.php")>1 1
	q:$l(zapros,"test/sqlite/SQLiteManager-1.2.0/SQLiteManager-1.2.0/main.php")>1 1
	q:$l(zapros,"SQLiteManager-1.2.4/main.php")>1 1
	q:$l(zapros,"agSearch/SQlite/main.php")>1 1
	q:$l(zapros,"phpMyAdmin/scripts/setup.php")>1 1
	q:$l(zapros,"pma/scripts/setup.php")>1 1
	q:$l(zapros,"myadmin/scripts/setup.php")>1 1
	q:$l(zapros,"GET /sftp-config.json")>1 1
	q:$l(zapros,"Cookie: mstshash=Administr")>1 1
	; q:$l(zapros,"")>1 1
	q 0
]]></Implementation>
</Method>

<Method name="Log">
<ClassMethod>1</ClassMethod>
<FormalSpec>ipOne,val</FormalSpec>
<Implementation><![CDATA[
  if $d(^%debug(ipOne)) k:^%debug(ipOne)>10000 ^%debug(ipOne)
  s:'$d(^%debug(ipOne)) ^%debug(ipOne)=1
  s ^%debug(ipOne)=^%debug(ipOne)+1,^%debug(ipOne,^%debug(ipOne))=val
  q
]]></Implementation>
</Method>

<Method name="childVar">
<Description>

Процедура обработки клиентского запроса
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port</FormalSpec>
<Implementation><![CDATA[

   s TimeOut=$lg(^%ZWebServerCfg(port),2)
   s pathHost=$lg(^%ZWebServerCfg(port),3)
   s NameSpaceDefault=$lg(^%ZWebServerCfg(port),4)
   s startPage=$lg(^%ZWebServerCfg(port),5)
   s methodDefault=$lg(^%ZWebServerCfg(port),6)
   zn NameSpaceDefault ; переключаем область имен
   s numPac=0
   s isCloseChaild=0 
   s SocketTempIndex=0
   USE $ZUTIL(53):(::"M")
   s I=$ZU(111,0)
   s ipOne=$A(I,1)_"."_$A(I,2)_"."_$A(I,3)_"."_$A(I,4)
   s ip=ipOne_":"_($A(I,5)*256+$A(I,6))
   ; s ip=$ZU(67, 15, $job)
   s countEnter=0
   s numPack=0
   s isEndTitle=0 
   ; Инициализируем переменную для работы в CSP классах
   s %request=##class(%CSP.Request).%New()
   s %response=##class(%CSP.Response).%New()
   Do %response.SetHeader("Content-Type","text/html")   
   d %request.InsertCgiEnv("Cache version",$$GetVersion^%apiOBJ())
   d %request.InsertCgiEnv("Cache port",port)
   d %request.InsertCgiEnv("LOCAL_PATH",pathHost)
   d %request.InsertCgiEnv("QUERY_PAGE",startPage)
   d %request.InsertCgiEnv("CLIENT_IP",ip)
   d %request.InsertCgiEnv("REMOTE_ADDR",$ZU(67, 15, $job))
   d %request.InsertCgiEnv("CONTENT_TYP","html") 
   d %request.InsertCgiEnv( "SERVER_NAME",$zu(110))
   
   ; C:\Cache2017.1\CSP\broker
   
   // s %response.CharSet="UTF8"
   s %response.CharSet="CP1251"
   s %SYSLOG=1
   s %CSPsc=1
   ; Set %session.AppTimeout = 3600 
   s isTerminal=0
   s isWebSocket=0
   s isWebSocketKey=""
   s WebSocketVer=-1
   s FallLoad=0
   s FallLoadRunJob=0
   s DebInf=""
   s RefererUrl=""
   For  Q:((isCloseChaild=1)||($T=1)||(isTerminal=1) )  d
   .  If $T=1 s isCloseChaild=1 
   .   // Если терминальный запрос, тогда уничтожаем этот процесс
   .   // if isTerminal=1 d $zu(4,$job)
   . if isEndTitle=0 {
   .     S dev=$ZUTIL(53)  
   .     USE dev:(::"M")  
   .     READ inData:1
   .     s DebInf=DebInf_$c(13,10)_inData
   .     ; s ^debug($job,numPack)=inData
   .     s numPack=numPack+1
   .        ; Если в первой строке нет слов GET или POST , тогда запрос произведен из терминала
   .        if numPack=1  if $l(inData,"GET /")=1  ,$l(inData,"POST /")=1    s isTerminal=1 q
   .        ; Меняем кодировку входных данных(разкоментируется при необходимости, в зовисимости от версии cache')
   .        ; s inData= $ZCVT(inData,"I","URL")
   .        ; s inData=$zcvt($zcvt(inData,"I","URL"),"I","UTF8")
   .        ; s inData= $ZCVT(inData,"I","UTF8")
   .
   .      if numPack=1 d ; обработка первой строки HTML запроса
   .      .   if $l(inData,"GET /")=2   d 
   .      .   .  s zapros=$p(inData,"GET /",2)
   .      .   .  d %request.InsertCgiEnv("REQUEST_METHOD","GET")
   .      .   .  s zapros=$p(zapros," HTTP/",1)   , isGet=1 ,TypeZapros="GET"  
   .      .   if $l(inData,"POST /")=2  d 
   .      .   .  s zapros=$p(inData,"POST /",2)   
   .      .   .  d %request.InsertCgiEnv("REQUEST_METHOD","POST")
   .      .   .  s zapros=$p(zapros," HTTP/",1)   , isPost=1 ,TypeZapros="POST" 
   .      .  
   .      .        if $l(zapros,"csp/broker/cspxmlhttp.js")=2 {
   .      .   	      s FallLoad=1
   .      .        }
   .      .        if $l(zapros,"csp/broker/cspbroker.js")=2 {
   .      .   	      s FallLoadRunJob=1  
   .      .        }
   .      .   if $l(zapros)=0 s zapros=startPage
   .      .   if $l($p(zapros,"?",1))=0   s zapros=startPage_"/"_zapros
   .      .   ; если GET запрос и присутствует один символ "?" тогда заменяем его на "/?"
   .      .   if $l(zapros,"/?")=1 , $l(zapros,"?")'=1 , $e(zapros, $l( $p(zapros,"?",1)),$l( $p(zapros,"?",1)))'="/"   s zapros=$e(zapros,1,$l( $p(zapros,"?",1)))_"/?"_$e(zapros,$l( $p(zapros,"?",1))+2,$l(zapros))
   .      .   Do %request.InsertCgiEnv("PATH_TRANSLATED",$tr(pathHost_"/"_zapros,"/","\"))
   .      .   Do %request.InsertCgiEnv("QUERY_STRING",zapros)
   .      .   Do %request.InsertCgiEnv("SERVER_ADDR",$p(ip,":",1))   
   .      .   Do %request.InsertCgiEnv("REMOTE_PORT",$p(ip,":",2))   
   .      .   Do %request.Set("clientip",ip) 
   .      .   Do:$l(zapros)=0 %request.InsertCgiEnv("REQUEST_URI",zapros)   
   .      .   q
   .   
   . 
   .     if $l(inData,":") >1 d
   .     .  s nam=$p(inData,": ",1)
   .     .  s val=$p(inData,": ",2)
   .     .  Do %request.Set(nam,val)    
   .     .  do %request.InsertCgiEnv($ZCVT(nam,"U"),val)
   .     .  if nam="Referer"   s RefererUrl=val ; d %request.InsertCgiEnv("HTTP_REFERER",val)
   .   
   .     ; проверяем наличие трех Enter (это признак окончания заголовка html запроса)
   .       if $l(inData)=0 s countEnter=countEnter+1
   .       if countEnter=2 s isEndTitle=1 
   .       if $l(inData)>0 s countEnter=0
   .       q
   .  }
   .
   .  ; читаем тело POST запроса 
   .  if $l(%request.GetCgiEnv("CONTENT-LENGTH"))'=0 {
   .       s lenPost=%request.GetCgiEnv("CONTENT-LENGTH")
   .       d %request.InsertCgiEnv("CONTENT_LENGTH",lenPost)
   .       ; s BodyPost=##class(%CSP.BinaryStream).%New()
   .       ; s %request.Content=##class(%CSP.BinaryStream).%New()
   .       Set %request.Content=##class(%GlobalCharacterStream).%New()
   .       s indPostTeloZaprosa=0
   .       s isCloseChaildPost=0
   .       ;  while (isCloseChaildPost=0&&lenPost>0) {
   .       while (lenPost>0) {  
   .          If $T=1 s isCloseChaildPost=1
   .          USE $ZUTIL(53):(::"M")  
   .          READ inData:1 ; 0.01  
   .          d ..Log(ipOne,inData)
   .          s lenPost=lenPost-$l(inData)
   .          s indPostTeloZaprosa=indPostTeloZaprosa+1
   .          s ^%WebPost($JOB,indPostTeloZaprosa)=inData
   .          ; s ^debug("POST",indPostTeloZaprosa)=inData
   .          ; s ^debug("POST",indPostTeloZaprosa,0)=$l(inData)
   .          d %request.Content.Write(inData)
   .          ; s inData= $ZCVT(inData,"I","URL")
   .          ; Разбираем параметры из первой строки тела post запроса
   .          if $l(inData,"=")>1 {
   .          for  {
   .               s nam=$e(inData,1,$l($p(inData,"=",1)))
   .               s inData=$e(inData,$l(nam)+1,$l(inData))
   .               s val=$e(inData,2,$l($p(inData,"&",1)))
   .               s inData=$e(inData,$l(val)+3,$l(inData))
   .               if $l(val)>32760 {
   .                  s obj=##class(%CSP.CharacterStream).%New()
   .                  d obj.Write(val)
   .                  Do %request.Set(nam,obj)
   .               } else {
   .                  Do %request.Set(nam,val)
   .               }
   .               q:$l(inData)=0
   .               q:$l(inData,"=")=1
   .            }
   .          }
   .       }
   .       d %request.Content.Rewind()
   .       ;   for  {
   .       ;     q:%request.Content.AtEnd;
   .       ;     s ^deb=%request.Content.Read(32000)
   .       ;   }
   .       s isCloseChaild=1  
   .       q
   .    }
   .    s isCloseChaild=1 
   .    q
   q:ip=""
 
  s RefererUrlNameSpace=""
  s ref=""
  if RefererUrl'="" {
	    d %request.InsertCgiEnv("HTTP_REFERER",RefererUrl)
	    s RefererUrlNameSpace=$e(RefererUrl,$l($p(RefererUrl,"/",1)),$l(RefererUrl))
        s ref=RefererUrl
        s ref=$e(ref,$l($p(ref,"/",1))+2, $l(ref))
        s ref=$e(ref,$l($p(ref,"/",1))+2, $l(ref))
        s ref=$e(ref,$l($p(ref,"/",1))+2, $l(ref))
  }
   ;  d ..Log(ipOne,DebInf)
   ;  if '$d(^iplist(ipOne)) { s ^iplist(ipOne)=0}
   ;  s ^iplist(ipOne)=^iplist(ipOne)+1
   ;  s ^iplist(ipOne,^iplist(ipOne),$zd(+$h,4),$zt($p($h,",",2)))=DebInf
   /// зашита от злоумышлеников
  // if ..TestHacker(DebInf)=1
  // {
  //     w "HTTP/1.1 200",$c(13,10)
  //     w "Content-type: text/plain",$c(13,10)
  //     w "Connection: close"_$c(13,10,13,10)
  //	   w "Ваш IP адрес "_$p(%request.CgiEnvs("CLIENT_IP"),":",1)
  //	   d ..clsConnect() q   
  // }
   k DebInf
   ;
   ; обрабатываем терминальный Socket запрос 
   if isTerminal=1 {
     ; s ^debug($job,numPack)=inData
     ; For  Q:((isCloseChaild=1)||($T=1)||(isEndTitle=1) )  d
     ; .    If $T=1 s isCloseChaild=1 k ^debug($job) q
     ; .    USE $ZUTIL(53):(::"M")  
     ; .    READ inData
     ; .    if inData="exit" s isCloseChaild=1  k ^debug($job) q
     ; .    s numPack=numPack+1
     ; .    s ^debug($job,numPack)=inData
   }
  ;  если обрабатываем  терминальный запрос , тогда выходим
    q:isTerminal=1
  ;
  ; Запоминаем расширение файла как тип содержимого
    s typ=$p(zapros ,".", $l(zapros,"."))
    s typ=$p(typ,"/?",1)
    s typ=$p(typ,"/",1)
    d %request.InsertCgiEnv("CONTENT_TYP",typ)
  ; 
  ; USE $ZUTIL(53):(::"M") w "HTTP/1.1 200",$c(13,10),"Content-type: text/plain","",$c(13,10),"Connection: close"_$c(13,10,13,10)
  ; Разбираем Куки в параметры
   d ..ParseСookie()
  ; Разбираем параметры из URL строки 
   d ..ParseParam()
   
   s %request.URL="/"_%request.CgiEnvs("QUERY_PAGE")
  ;  Если етсьпараметр "typ" тогда меняем тип содержимого
   if $l(%request.Get("typ",""))>0  d %request.InsertCgiEnv("CONTENT_TYP",%request.Get("typ","")) 

  ; Инициируем сесию ---
    d ..InitSession()
  
  ; Выводим содержимое из каталога
    s PathFileLocal=%request.CgiEnvs("PATH_TRANSLATED")
    if ..GetRawHtml(PathFileLocal)=1  d ..clsConnect() q
 
   ; Переключаем область имен, если указан параметре "namespace"
     if $l(%request.Get("namespace",""))'=0{  d $zu(5,%request.Get("namespace","")) }
     d %request.InsertCgiEnv("NAMESPACE",$zu(5)) ; Запоминаем имя области имен
   ; -------------------------------------------------------------------
   
   s app=$SYSTEM.CSP.GetAppName(%request.CgiEnvs("QUERY_PAGE"))
   s app="/"_$e(app,1,$l(app)-1)
   &sql(
      select TOP 1 NameLowerCase,NameSpace,Path,NameLowerCase
      INTO  :NameLowerCase,:NameSpace,:Path,:NameLowerCase
      from Security.Applications
      where id=:app
   )
   
   if SQLCODE'=0{
        USE $ZUTIL(53):(::"M") w "HTTP/1.1 400",$c(13,10)
        w "Content-type: text/plain"_"; charset="_%response.CharSet,$c(13,10)
        w "Connection: close"_$c(13,10,13,10)
        d ..clsConnect()
        q 
   }
   d $zu(5,NameSpace)
 
  if FallLoad=1{
	   w "HTTP/1.1 200",$c(13,10)
       w "Content-type: application/x-javascript",$c(13,10)
       w "Connection: close"_$c(13,10,13,10)
	   d ..clsConnect() q   
   }
   

   /// Передаем текст библиотеки
   if FallLoadRunJob=1 {
        USE $ZUTIL(53):(::"M") 
        w "HTTP/1.1 200",$c(13,10)
        w "Content-type: application/x-javascript"_$c(13,10)
        w "Connection: close"_$c(13,10,13,10)
        ; d ##class(%ZWeb.RunJob).OnPage()
        if ref'=""{
	       s applib=$SYSTEM.CSP.GetAppName(ref)  ,  applib="/"_$e(applib,1,$l(applib)-1)
	       &sql( select TOP 1 NameSpace INTO  :NameSpaceLib from Security.Applications where id=:applib )
           if SQLCODE'=0{ q }
           d $zu(5,NameSpaceLib) 
        }
        d ##class(%ZWeb.cspxmlhttp.js).OnPage()
        d ..clsConnect() q 
    }
  
   ; Имя класса
   s ClassNameCsp=$SYSTEM.CSP.GetClassName("/"_%request.CgiEnvs("QUERY_PAGE"))
   if ..GetClsHtml(ClassNameCsp,0)=1    d ..clsConnect() q 
  
   s ShortPage=$e(%request.CgiEnvs("QUERY_PAGE"),$l(app),$l(%request.CgiEnvs("QUERY_PAGE")))
   s PathFileLocal=$tr(Path_ShortPage,"/","\")
   if ..GetRawHtml(PathFileLocal)=1  d ..clsConnect() q
       ; 
       ;  Запрашиваемый ресурс не найден
         USE $ZUTIL(53):(::"M") w "HTTP/1.1 400",$c(13,10)
         w "Content-type: text/plain"_"; charset="_%response.CharSet,$c(13,10)
         w "Connection: close"_$c(13,10,13,10)
        ; w !,ShortPage
        ; w !,Path
        w !,"=================================" 
        w !,"=      Ресурс не найден        ="  
        w !,"=================================" 
        w !,!,%request.CgiEnvs("QUERY_PAGE")
        ; w !, PathFileLocal
        /*
        zw %request
        w !,!
        zw %response
        w !,!
        zw %session
        w !,!
        w %request.GetCgiEnv("QUERY_PAGE"),!
        w PathFileLocal,!
        w PathFile,!
        w !,NameLowerCase
        w !,NameSpace
        w !,Path
        w !,NameLowerCase
        w !,DispatchClass 
        w !,"OK"
        */
        d ..clsConnect()
        q
]]></Implementation>
</Method>

<Method name="InitSession">
<Description>
инициализации сесии</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   s ip=%request.GetCgiEnv("CLIENT_IP")
   s zapros=%request.GetCgiEnv("QUERY_PAGE")
   s ipKey="%ZWeb.Server@"_$p(ip,":",1)
   ; Шифрование ключа (если конечно есть желание)
   ; s pass=ipKey,HashPwd="" 
   ; F ix489=1:1:7 { S HashPwd=HashPwd_$ZCRC(pass,ix489)}  
   ; s ipKey=HashPwd
   if ##class(%CSP.Session).%ExistsId(ipKey)=1{
       s %session=##class(%CSP.Session).%OpenId(ipKey)
   } else {
       s %session=##class(%CSP.Session).%New(ipKey)
   }
   s %session.ProcessId="|"_$zu(5)_"|"_zapros ;  "%ZWeb.Server: job"_$job_" "
   S %session.AppTimeout = %request.GetCgiEnv("TIME_OUT")
   ; d %session.Login("_SYSTEM")
    
   S %session.BrowserPlatform="Windows" 
   S %session.BrowserName = "Safari" 
   S %session.Namespace=%request.GetCgiEnv("NAMESPACE")
   S %session.UserAgent=%request.GetCgiEnv("HTTP_USER_AGENT","")
   d %session.%Save()
   s $LI(^%cspSession(ipKey),15)="%ZWeb.Server:"_$job ;  Приложение 
   s $LI(^%cspSession(ipKey),18)=$job        ;  ID процесса
   d %session.%Save()
   q
]]></Implementation>
</Method>

<Method name="clsConnect">
<Description>
Закрытие соединения , очистка переменных (глобалов)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   ; Close dev  
   ; w *-1,!
   w *-2,$c(13,10)
   s isCloseChaild=0   
   k ^%WebPost($JOB)
   q
]]></Implementation>
</Method>

<Method name="ParseСookie">
<Description>

 разбираем Сookie</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   q:$l(%request.GetCgiEnv("COOKIE"))=0
   s arg=%request.GetCgiEnv("COOKIE")
   do %request.InsertCookie("COOKIE",arg)
   for ind=1:1:$l(arg,"; ")  d
   .    s tmp= $p(arg,"; ",1)
   .    if $l(tmp,"=")=2  d
   .    .  s ParamName=$p(tmp,"=",1)
   .    .  s zndch=$p(tmp,"=",2)
   .    e  d
   .    .   s ParamName=$p(tmp,"=",1)
   .    .   s zndch=""
   .    do %request.InsertCgiEnv(ParamName,zndch) 
   .    ; do %request.InsertCookie(ParamName,zndch)
   .    ; s ^deb($job,ParamName)=zndch
   s ParamName=""
]]></Implementation>
</Method>

<Method name="ParseParam">
<Description>

разбираем Параметры в строке URL запроса </Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   ;
   ;  разбираем Параметры в строке запроса
   if $l(%request.GetCgiEnv("QUERY_STRING"))'=0 d
   .     s arg=%request.GetCgiEnv("QUERY_STRING")
   .     d %request.InsertCgiEnv("QUERY_PAGE",$p(arg,"/?",1))
   .     d %request.InsertCgiEnv("PATH_TRANSLATED",$tr(%request.GetCgiEnv("LOCAL_PATH")_"/"_$p(arg,"/?",1),"/","\"))
   .     
   .     if $l(arg,"?")>1  d
   .     .  if $l($p(arg,"?",1))=0  d
   .     .  .  s arg="/"_arg
   .     s arg=$p(arg,"/?",2) 
   .     if $l(arg)>0  d
   .     .  s indParam=0
   .     .  for   q:arg=""   d
   .     .  .    s tmp= $p(arg,"&",1)
   .     .  .    if $l(tmp,"=")=2  d
   .     .  .    .  s ParamName=$p(tmp,"=",1)
   .     .  .    .  s zndch=$p(tmp,"=",2)
   .     .  .    e  d
   .     .  .    .  ; s indParam=indParam+1
   .     .  .    .  ; s ParamName="param"_indParam
   .     .  .    .  ; s zndch=$p(tmp,"=",1)
   .     .  .    .  s ParamName=$p(tmp,"=",1)
   .     .  .    .  s zndch=""
   .     .  .    s arg=$p(arg ,tmp,2)
   .     .  .    if $l(arg)>1 s arg=$e( arg,2,$l(arg))
   .     .  .    q:ParamName=""
   .     .  .    ; s ParamName = $ZCVT(ParamName,"L")
   .     .  .    ; d %request.Set(ParamName,zndch)
   .     .  .    Do %request.Set(ParamName,zndch) 
   .     .  .    ; d %request.InsertCgiEnv(ParamName,zndch)
   .     .  .    s ParamName=""
   q
]]></Implementation>
</Method>

<Method name="ContentType">
<Description>
Определить MIME тип по имени файла</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
     s rashirenie=$p(FileName ,".", $l(FileName,"."))
     s rashirenie= $ZCVT(rashirenie,"l")
     q:rashirenie="css" "text/css"
     q:rashirenie="js" "application/x-javascript"
     q:rashirenie="xml" "text/xml"
     q:rashirenie="dtd" "text/xml"
   ; -------------------------------------
     q:rashirenie="txt" "text/plain"
     q:rashirenie="inf" "text/plain"
     q:rashirenie="nfo" "text/plain"
     q:rashirenie="php" "text/plain"
   ; -------------------------------------
     q:rashirenie="html" "text/html"
     q:rashirenie="csp" "text/html"
     q:rashirenie="htm" "text/html"
     q:rashirenie="shtml" "text/html"
     q:rashirenie="shtm" "text/html"
     q:rashirenie="stm" "text/html"
     q:rashirenie="sht" "text/html"
     q:rashirenie="sht" "text/html"
     q:rashirenie="csp" "text/html"
     q:rashirenie="mac" "text/html"
     q:rashirenie="cls" "text/html"
     q:rashirenie="jpg" "image/jpeg"

     ; q:rashirenie="cos" "text/html" ; каше обжект скрипт
   ; -------------------------------------
     q:rashirenie="mpeg" "video/mpeg"
     q:rashirenie="mpg" "video/mpeg"
     q:rashirenie="mpe" "video/mpeg"
   ; -------------------------------------
     q:rashirenie="ai" "application/postscript"
     q:rashirenie="zip" "application/zip"
                  q:rashirenie="zsh" "text/x-script.zsh"
                  q:rashirenie="x-png" "image/png"
                  q:rashirenie="xls" "application/x-excel"
                  q:rashirenie="xlm" "application/excel"
                  q:rashirenie="wav" "audio/x-wav"
                  q:rashirenie="txt" "text/plain"
                  q:rashirenie="tiff" "image/tiff"
                  q:rashirenie="tif" "image/x-tiff"
                  q:rashirenie="text" "text/plain"
                  q:rashirenie="swf" "application/x-shockwave-flash"
                  q:rashirenie="sprite" "application/x-sprite"
                  q:rashirenie="smil" "application/smil"
                  q:rashirenie="sh" "text/x-script.sh"
                  q:rashirenie="rtx" "text/richtext"
                  q:rashirenie="rtf" "text/richtext"
                  q:rashirenie="pyc" "application/x-bytecode.python"
                  q:rashirenie="py" "text/x-script.phyton"
                  q:rashirenie="png" "image/png"
                  q:rashirenie="pic" "image/pict"
                  q:rashirenie="mp3" "video/mpeg"
                  q:rashirenie="mp2" "video/mpeg"
                  q:rashirenie="movie" "video/x-sgi-movie"
                  q:rashirenie="mov" "video/quicktime"
                  q:rashirenie="mjpg" "video/x-motion-jpeg"
                  q:rashirenie="mime" "www/mime"
                  q:rashirenie="mif" "application/x-mif"
                  q:rashirenie="midi" "audio/midi"
                  q:rashirenie="js" "application/javascript"
                  q:rashirenie="jpeg" "image/jpeg"
                  q:rashirenie="jps" "image/x-jps"
                  q:rashirenie="jam" "audio/x-jam"
                  q:rashirenie="jav" "text/plain"
                  q:rashirenie="java" "text/x-java-source"
                  q:rashirenie="htm" "text/html"
                  q:rashirenie="html" "text/html"
                  q:rashirenie="gzip" "application/x-gzip"
                  q:rashirenie="gif" "image/gif"
                  q:rashirenie="gl" "video/gl"
                  q:rashirenie="csh" "text/x-script.csh"
                  q:rashirenie="css" "text/css"
                  q:rashirenie="bsh" "application/x-bsh"
                  q:rashirenie="bz" "application/x-bzip"
                  q:rashirenie="bz2" "application/x-bzip2"
                  q:rashirenie="c" "text/plain"
                  q:rashirenie="c++" "text/plain"
                  q:rashirenie="cat" "application/vnd.ms-pki.seccat"
                  q:rashirenie="cc" "text/plain"
                  q:rashirenie="htmls" "text/html"
                  q:rashirenie="bmp" "image/bmp"
                  q:rashirenie="bm" "image/bmp"
                  q:rashirenie="avi" "video/avi"
                  q:rashirenie="avs" "video/avs-video"
                  q:rashirenie="au" "audio/basic"
                  q:rashirenie="arj" "application/arj"
                  q:rashirenie="art" "image/x-jg"
                  q:rashirenie="asf" "video/x-ms-asf"
                  q:rashirenie="asm" "text/x-asm"
                  q:rashirenie="asp" "text/asp"
     q "application/octet-stream"
]]></Implementation>
</Method>

<Method name="IsParentClass">
<Description>
Проверка Является ли класс дочерним от указанного</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",ClassParent=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   q:'$d(^oddDEF(ClassName,60)) 0
   if $l(^oddDEF(ClassName,60),ClassParent)>1  q 1
   s res=0
   for i=1:1:$l(^oddDEF(ClassName,60),",") {
         s SubClass=$p(^oddDEF(ClassName,60),",",i)
         if $d(^oddDEF(SubClass)) {
             if $d(^oddDEF(SubClass,60)) { 
               if $l(^oddDEF(SubClass,60),ClassParent)>1   s res=1  q
             }   
         }
   }
   q res
]]></Implementation>
</Method>

<Method name="CreateMacFromRaw">
<Description>
Создать MAC программу из файла</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rawFileName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  if ##class(%File).Exists(rawFileName)=1 {
      s MacName=$p(rawFileName,"\",$l(rawFileName,"\"))
      s MacNameFull=$p(MacName,".",$l(MacName,"."))
      s MacName=$e(MacName,1,$l(MacName)-1-$l($p(MacName,".",$l(MacName,"."))))
      d %request.InsertCgiEnv("MacName",MacName)
      if ##class(%Routine).Exists(MacName)=1 d ##class(%Routine).Delete(MacName)
      s readRut=##class(%Routine).%New(MacName)
      S stream=##class(%FileBinaryStream).%New()
      S stream.Filename=rawFileName 
      While 'stream.AtEnd  {
        d readRut.Write(stream.Read(32000))
      }
      d stream.%Close()
      s stream=""
      d readRut.Save()
      k ^SPOOL($job) 
      O 2:($job) 
      U 2:($job)
      w $$CompileRoutine^%apiRTN(MacNameFull)
      c 2:($job)  
      k ^SPOOL($job) 
      USE $ZUTIL(53):(::"M")
      q 1
  }
  q 0
]]></Implementation>
</Method>

<Method name="GetRawHtml">
<ClassMethod>1</ClassMethod>
<FormalSpec>rawFileName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 
  ; if $l($zcvt(rawFileName,"L"),"csp\broker")=2{
  ;   s LocalPath=%request.GetCgiEnv("LOCAL_PATH") 
  ;   s rawFileName=$Replace(rawFileName,LocalPath,"") 
  ;   s rawFileName= $replace($p($zu(12),"\mgr\",1)_"/"_$zcvt(rawFileName,"L"),"/","\")
  ;   d %request.InsertCgiEnv("PATH_TRANSLATED",rawFileName) 
  ;   ;  <script type="text/javascript"  src='%ZWeb.Lib.js.cspbroker.cls'></script>
  ;   ;  <script type="text/javascript"  src='%ZWeb.Lib.js.cspxmlhttp.cls'></script> 
  ; }
      if ##class(%File).Exists(rawFileName)'=1 q 0
      ; s ^%deb($job)=rawFileName
      ; старый вариант получения расширения
      s rashirenie=$ZCVT($p(rawFileName ,".", $l(rawFileName,".")),"L")   
      s typ=..ContentType("."_rashirenie) 
      w "HTTP/1.1 200",$c(13,10)
      w "Content-type: "_typ_"; "_%response.CharSet,$c(13,10)
      w "Connection: close"_$c(13,10,13,10)
      S stream=##class(%FileBinaryStream).%New()
      S stream.Filename=rawFileName 
      s countFrag=0
      While 'stream.AtEnd  {
	      s html=stream.Read(32000)
	      s countFrag=countFrag+1
	      if countFrag=1{
             if typ["html" {      
                // замена #server()# #call()# <server/>
                d ..ParseHTML(html,0)  continue   
             }
             if ((typ["javascript")||(typ["text/css")){   
                d ..ParseHTML(html,1) continue
             }
	         w html
	      }else{
             w html
	      }
      }
      d stream.%Close()
      s stream=""
      s file =""
      q 1
]]></Implementation>
</Method>

<Method name="ParseHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>html="",isJavaScript=0</FormalSpec>
<Implementation><![CDATA[
   if $l(html,"#server(")>1,$l(html,")#")>0 {
      if $l(html,"/csp/broker/cspxmlhttp.js")=1,$l(html,"/csp/broker/cspbroker.js")=1 {
         if isJavaScript=0 {
            &html<<script language="JavaScript" type="text/javascript" src="/csp/broker/cspxmlhttp.js"></script><script language="JavaScript" type="text/javascript" src="/csp/broker/cspbroker.js"></script>>
         }
      }
      s ResHtml=""
      s Beg="#server(",End=")#"
      for {
        s HtmlFrag=$e(html,1,$l($p(html,Beg,1)) ) 
        s ResHtml=ResHtml_HtmlFrag
        s html=$e(html,$l(HtmlFrag)+1+$l(Beg),$l(html) ) 
        s CodeFrag=$e(html,1, $l($p(html,End,1)) ) 
        s html=$e(html,$l(CodeFrag)+1+$l(End),$l(html) ) 
        if $l(CodeFrag)>0{
           s htmlClassMethod=$e(CodeFrag,1,$l($p(CodeFrag,"(",1)))
           s args=$e(CodeFrag,$l(htmlClassMethod)+2,$l(CodeFrag)-1)
           s WEVENT=$$$cspEncode(%session.Key,$lb(htmlClassMethod))
           s ResHtml=ResHtml_"cspHttpServerMethod('"_WEVENT_"',"_args_")"
        }
        q:html=""
      }
      s html=ResHtml
      s Beg="#call(",End=")#"
      for {
        s HtmlFrag=$e(html,1,$l($p(html,Beg,1)) ) 
        s ResHtml=ResHtml_HtmlFrag
        s html=$e(html,$l(HtmlFrag)+1+$l(Beg),$l(html) ) 
        s CodeFrag=$e(html,1, $l($p(html,End,1)) ) 
        s html=$e(html,$l(CodeFrag)+1+$l(End),$l(html) ) 
        if $l(CodeFrag)>0{
           s htmlClassMethod=$e(CodeFrag,1,$l($p(CodeFrag,"(",1)))
           s args=$e(CodeFrag,$l(htmlClassMethod)+2,$l(CodeFrag)-1)
           s WEVENT=$$$cspEncode(%session.Key,$lb(htmlClassMethod))
           s ResHtml=ResHtml_"cspCallHttpServerMethod('"_WEVENT_"',"_args_")"
        }
        q:html=""
      }
      s html=ResHtml
      
      s ResHtml=""
      s Beg="#(",End=")#"
      for {
          s HtmlFrag=$e(html,1,$l($p(html,Beg,1)) ) 
          d ..ExecFrag(HtmlFrag, "<server>", "</server>")
          s html=$e(html,$l(HtmlFrag)+1+$l(Beg),$l(html) ) 
          s CodeFrag=$e(html,1, $l($p(html,End,1)) ) 
          s html=$e(html,$l(CodeFrag)+1+$l(End),$l(html) ) 
          if $l(CodeFrag)>0{
             s htmlClassMethod=$e(CodeFrag,1,$l($p(CodeFrag,"(",1)))
             XECUTE ("w """","_CodeFrag )
          }
        q:html=""
      }
      
   }else{
      w html
   }
]]></Implementation>
</Method>

<Method name="GetRawHtmlOld">
<Description>
Отправить клиенту файл с жесткого диска</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rawFileName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  // Замена пути к Cache библиотекам JS    
  //     <script  type="text/javascript" src="/csp/broker/cspxmlhttp.js"></script>
  //     <script  type="text/javascript" src="/csp/broker/cspbroker.js"></script>
  if $l($zcvt(rawFileName,"L"),"csp\broker")=2{
     s LocalPath=%request.GetCgiEnv("LOCAL_PATH") 
     s rawFileName=$Replace(rawFileName,LocalPath,"") 
     s rawFileName= $replace($p($zu(12),"\mgr\",1)_"/"_$zcvt(rawFileName,"L"),"/","\")
     d %request.InsertCgiEnv("PATH_TRANSLATED",rawFileName) 
  }
  ; s ^deb($job)=rawFileName
  s glHtml="^mtempRawHtmlFile"
  s list="js,html,htm,csp,css"
  s rashirenie=%request.GetCgiEnv("CONTENT_TYP") 
  s typ=..ContentType("."_rashirenie) 
  s file = ##class(%File).%New(rawFileName)
  s ReadFileGlobal=1
  // Если клобала с ресурсом нет, тогда создаем его
  if '$d(@glHtml@(rawFileName)) {
	  s ReadFileGlobal=0
  }else{ 
      ; если дата создания не соответствует дате в глобале, тогда перезагружаем глобал
      if $lg(@glHtml@(rawFileName),2)'=file.DateCreated  s ReadFileGlobal=0 k @glHtml@(rawFileName)
      ; если дата модификации не соответствует дате в глобале, тогда перезагружаем глобал
      if $lg(@glHtml@(rawFileName),3)'=file.DateModified s ReadFileGlobal=0 k @glHtml@(rawFileName)
      ; Если размер файла не соответствует файлу в глобеле
      if $lg(@glHtml@(rawFileName),4)'=file.Size s ReadFileGlobal=0 k @glHtml@(rawFileName)
  }
  //s ReadFileGlobal=0 
  if ReadFileGlobal=0 {
    ///  Передаем RAW файл из каталога директории 
    if ##class(%File).Exists(rawFileName)=1 {
      ; старый вариант получения расширения
      ; s rashirenie=$ZCVT($p(rawFileName ,".", $l(rawFileName,".")),"L")   
      ; Новый вариант в строке запроса можно указать тип ответа Пример: http://localhost:6010/csp/user/User.CacheLibTest.cls/?typ=jpg
      w "HTTP/1.1 200",$c(13,10)
      w "Content-type: "_typ_"; "_%response.CharSet,$c(13,10)
      w "Connection: close"_$c(13,10,13,10)
      S stream=##class(%FileBinaryStream).%New()
      S stream.Filename=rawFileName 
      s numLine=0
      s @glHtml@(rawFileName)=$lb(numLine,file.DateCreated,file.DateModified , file.Size,0)
      if $l(list,rashirenie)=1 {
         While 'stream.AtEnd  {
	       s numLine=numLine+1
	       s html=stream.Read(32000)
           s @glHtml@(rawFileName,numLine)=html
           s $LI(@glHtml@(rawFileName),1)=numLine
           s $LI(@glHtml@(rawFileName),5)=$Lg(@glHtml@(rawFileName),5)+$l(html)
           w html
         }
      }else{
        if typ["html" {
          ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
          ;    w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>",!
          ; }
          if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
             w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>",!
          }
        } 
        While 'stream.AtEnd  {
          s numLine=numLine+1
          s html=stream.Read(32000)
          s @glHtml@(rawFileName,numLine)=html
          s $LI(@glHtml@(rawFileName),1)=numLine
          s $LI(@glHtml@(rawFileName),5)=$Lg(@glHtml@(rawFileName),5)+$l(html)
          d ..ExecFrag(html,"/*(",")*/") 
        }
      }
      d stream.%Close()
      s stream=""
      s file =""
      q 1
    }
    q 0
  }else{
      w "HTTP/1.1 200",$c(13,10)
      w "Content-type: "_typ_"; "_%response.CharSet,$c(13,10)
      w "Connection: close"_$c(13,10,13,10)
	  if $l(list,rashirenie)=1 {  
          s numLine=""
         for {
	       s numLine=$o(@glHtml@(rawFileName,numLine))
	       q:numLine=""  
           s html=@glHtml@(rawFileName,numLine)
           w html
         }
      }else{
        if typ["html" {
          ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
          ;    w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>",!
          ; }
          if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
             w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>",!
          }
        } 
          s numLine="" 
         for {
	       s numLine=$o(@glHtml@(rawFileName,numLine))
	       q:numLine=""  
           s html=@glHtml@(rawFileName,numLine)
           d ..ExecFrag(html,"/*(",")*/") 
         }
      }
      s file =""  k file
      q 1
  }
  s file =""  k file
  q 0
]]></Implementation>
</Method>

<Method name="ExecFrag">
<Description>
Метод разбивки исходного текста на Cache` код и HTML текст</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End=""</FormalSpec>
<Implementation><![CDATA[
      q:SrcCode=""   q:Beg=""    q:End="" 
      s html=SrcCode
      for {
          s HtmlFrag=$e(SrcCode,1,$l($p(SrcCode,Beg,1)) ) 
          w HtmlFrag
          s SrcCode=$e(SrcCode,$l(HtmlFrag)+1+$l(Beg),$l(SrcCode) ) 
          s CodeFrag=$e(SrcCode,1, $l($p(SrcCode,End,1)) ) 
          s SrcCode=$e(SrcCode,$l(CodeFrag)+1+$l(End),$l(SrcCode) ) 
          if $l(CodeFrag)>0{
             TRY {  x $tr(CodeFrag,$c(13,10),"   ")   } CATCH ErrorHandle {    zw ErrorHandle  }
          }
        q:SrcCode=""
      }
]]></Implementation>
</Method>

<Method name="GetClsHtml">
<Description>
Метод запуска класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName,addLib=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    if $l(ClassName)'=0 {
      ; if $zcvt($e(ClassName,$l(ClassName)-$l("cls"),$l(ClassName)) ,"L")=".cls" {
      ;    s ClassName=$e(ClassName,1,$l(ClassName)-$l(".cls"))          
      ; }
        if $zObjClassMethod("%CompiledClass","%ExistsId",ClassName)=1 {
             If $System.CLS.IsMthd(ClassName,"OnPreHTTP") {
                ; try{  }CATCH err{  zw err           }
                d $zObjClassMethod(ClassName,"OnPreHTTP")    
             }
             w "HTTP/1.1 200",$c(13,10)
             w "Content-type: "_%response.ContentType_"; charset="_%response.CharSet,$c(13,10)
            
            if $d(%response.Headers("CONTENT-DISPOSITION")){
	            w "Content-Disposition: "_%response.Headers("CONTENT-DISPOSITION")_$c(13,10)
            }
            if $d(%response.Headers("PRAGMA")){
	            w "PRAGMA: "_%response.Headers("PRAGMA")_$c(13,10)
            }
            if $l(%response.ContentLength)>0 {
               w "Content-Length: "_%response.ContentLength_$c(13,10)
            }
            ; k ^SPOOL($job)
            ; O 2:($job) 
            ; U 2:($job)
            ; zw %response
            ; c 2:($job)  
            ; USE $ZUTIL(53):(::"M")
            
            
             w "Connection: close"_$c(13,10,13,10)
             try{ 
             if addLib=1 {
                if %response.ContentType["html" {
	                &html< <script language="JavaScript" type="text/javascript" src="/csp/broker/cspxmlhttp.js"></script><script language="JavaScript" type="text/javascript" src="/csp/broker/cspbroker.js"></script></head> >
                    ;   <script  type='text/javascript' src='/csp/broker/cspxmlhttp.js'></script>
                    ;   <script  type='text/javascript' src='/csp/broker/cspbroker.js'></script>
                    ;   if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
                    ;     w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>"
                    ;   }
               }
             }
             d $zObjClassMethod(ClassName,"OnPage")   
             }CATCH err{ zw err }
             d ..clsConnect()
             q 1
         }
      }   
      q 0
]]></Implementation>
</Method>

<Method name="DrawMac">
<ClassMethod>1</ClassMethod>
<FormalSpec>MacName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    q:##class(%Routine).Exists(MacName)=0 
 ;   if ##class(%Routine).Exists(MacName)=0 
 ;   {
 ;     k ^deb
 ;     s isFoundMac=0
 ;     s res=##class(%ResultSet).%New("%Library.Routine:RoutineList")
 ;     d res.Execute("*.MAC,*.INT")
 ;     for  q:'res.Next()   q:isFoundMac=1   d
 ;     .  q:$zcvt(res.Get("Name"),"L")'=$zcvt(MacName,"L")
 ;     .  s isFoundMac=1, MacName=res.Get("Name")
 ;     .  s ^deb(res.Get("Name"))=1
 ;     q:isFoundMac=0 0
 ;   }
    s isMacMethod=0    
    s isMacPreMethod=0 
    s MacMethod="OnPage"       
    s MacPreMethod="OnPreHTTP" 
    s readRut=##class(%Routine).%New(MacName)
    s IndParam=""
    s isFoundLabel=0
    for
    {
        q:readRut.AtEnd
        s str=readRut.ReadLine()
        if $l(str)>0,$e(str,1,1)'=" "
        {
          s namesTRING=$e(str,1,$l($p(str," ",1)))
          s NameMethod=$p(namesTRING,"(",1)
          if $ZCVT(NameMethod,"L")=$ZCVT(MacMethod,"L")
          {   s MacMethod=NameMethod
              s isMacMethod=1
          }
          if $ZCVT(NameMethod,"L")=$ZCVT(MacPreMethod,"L")
          {   s MacPreMethod=NameMethod
              s isMacPreMethod=1
          }
        }
        if isMacMethod=1,isMacPreMethod=1 q
     }
     Do readRut.%Close()
     if isMacMethod=1 {
        s cmd=" d "_MacMethod_"^"_MacName_"()" 
     }else{
        s cmd=" d ^"_MacName 
     }
     s $ztrap="ErrPre2"
     if isMacPreMethod=1 {
        x " d "_MacPreMethod_"^"_MacName_"()"  
     }
     s $ZTRAP="ErrOnPage2"
    
     USE $ZUTIL(53):(::"M")
     w "HTTP/1.1 200",$c(13,10)
     w "Content-type: "_%response.ContentType_"; charset="_%response.CharSet,$c(13,10)
     w "Connection: close"_$c(13,10,13,10)
     ; При необходимости можно добавляеть сторонние библиотеки
     if %response.ContentType["html" {
      ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
      ;    w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>",!
      ; }
       if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
          w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>",!
       }
     }
     x cmd 
     w *-1,!
     q 1
ErrPre2     
   w "Error: d "_MacPreMethod_"^"_MacName_""
   w !,$ze,!
   w *-1,!
   q 1  
ErrOnPage2
   w cmd
   w !,$ze,!
   w *-1,!
   q 1
]]></Implementation>
</Method>

<Method name="GetMacHtml">
<Description>
Метод запуска MAC программы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>zapros</FormalSpec>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
   q:%request.Get("typ")'="mac" 0
   s ClassNameOne=$E(zapros,1,$l(zapros)-4)
   s ClassNameOne=$replace(ClassNameOne,"/",".")
   s MacName=ClassNameOne
   ;   Если мак программа ненайдена, тогда ищим чтото похожее среди других классов 
   s MacName=$REPLACE(MacName,"/",".")
   if ##class(%Routine).Exists(MacName)=0 
   {
      s isFoundMac=0
      s res=##class(%ResultSet).%New("%Library.Routine:RoutineList")
      d res.Execute("*.MAC,*.INT")
      for  q:'res.Next()   q:isFoundMac=1   d
      .  q:$zcvt(res.Get("Name"),"L")'=$zcvt(MacName,"L")
      .  s isFoundMac=1, MacName=res.Get("Name")
      q:isFoundMac=0 0
    }
  ;
  ; ищим метку для запуска ,если метка ненайдена, тогда запускаем рутину без метки
    s isMacMethod=0    
    s isMacPreMethod=0 
    s MacMethod="OnPage"       
    s MacPreMethod="OnPreHTTP" 
    s readRut=##class(%Routine).%New(MacName)
    s IndParam=""
    s isFoundLabel=0
    for
    {
        q:readRut.AtEnd
        s str=readRut.ReadLine()
        if $l(str)>0,$e(str,1,1)'=" "
        {
          s namesTRING=$e(str,1,$l($p(str," ",1)))
          s NameMethod=$p(namesTRING,"(",1)
          if $ZCVT(NameMethod,"L")=$ZCVT(MacMethod,"L")
          {   s MacMethod=NameMethod
              s isMacMethod=1
          }
          if $ZCVT(NameMethod,"L")=$ZCVT(MacPreMethod,"L")
          {   s MacPreMethod=NameMethod
              s isMacPreMethod=1
          }
        }
        if isMacMethod=1,isMacPreMethod=1 q
     }
     Do readRut.%Close()
     if isMacMethod=1 {
        s cmd=" d "_MacMethod_"^"_MacName_"()" 
     }else{
        s cmd=" d ^"_MacName 
     }
     s $ztrap="ErrPre"
     if isMacPreMethod=1 {
        x " d "_MacPreMethod_"^"_MacName_"()"  
     }
     s $ZTRAP="ErrOnPage"
     USE $ZUTIL(53):(::"M")
     w "HTTP/1.1 200",$c(13,10)
     w "Content-type: "_%response.ContentType_"; charset="_%response.CharSet,$c(13,10)
     w "Connection: close"_$c(13,10,13,10)
     ; При необходимости можно добавляеть сторонние библиотеки
     if %response.ContentType["html" {
       ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
       ;   w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>"
       ; }
       if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
          w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>"
       }
     }
     x cmd 
     w *-1,!
     q 1
ErrPre     
   w "Error: d "_MacPreMethod_"^"_MacName_""
   w !,$ze,!
   w *-1,!
   q 1  
ErrOnPage
   w cmd
   w !,$ze,!
   w *-1,!
   q 1
]]></Implementation>
</Method>
</Class>


<Class name="%ZWeb.cspxmlhttp.js">
<Super>%CSP.Page</Super>
<TimeCreated>64874,37935.761588</TimeCreated>

<Parameter name="CodePage">
<Description><![CDATA[
<br>   s %response.CharSet="CP1251" 
<br>   "CP1251" или "UTF-8"
Parameter CodePage = "UTF-8";]]></Description>
<Default>UTF-8</Default>
</Parameter>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
     if ##this'="%ZWeb.cspxmlhttp.js"{ 
        Do %response.SetHeader("Content-Type","text/html")   
        q 1 
     }
     if %request.Get("cspIntRunMethod",0)=1 {
	     if %response.ContentType="text/html" {
            Do %response.SetHeader("Content-Type","text/plain")   
	     }
         q 1   
     }
     s %response.CharSet=..#CodePage ; "CP1251" 
     Do %response.SetHeader("Content-Type","application/javascript")   
     q 1
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    k filtr
    /// Подключение класса и интерпритация его как JS библиотек
    if %request.Get("include","")'=""{
	   s ClassCSP=%request.Get("include","")
  	   s ClassCSP=$tr(ClassCSP," ","")
	   for ind=1:1:$l(ClassCSP,","){
	      d $system.OBJ.GetDependencies($p(ClassCSP,",",ind),.included)
          s ClassParentTmp=""
          for {
            s ClassParentTmp=$o(included(ClassParentTmp))
            q:ClassParentTmp=""
            continue:$d(filtr(ClassParentTmp))
            d ..readJSFunctionFromCacheClass(ClassParentTmp)
            s filtr(ClassParentTmp)=1
          } 
	   }
	   q 1   
    }
   	
	
	
    /// Вычитываем тело POST запроса
	s json=""
	if $isobject(%request.Content){
	   for {
		  q:%request.Content.AtEnd
	      s json=json_%request.Content.Read(32000)	     
	   }	
	}
	s ParentClass=""
    s:$d(%request.CgiEnvs("HTTP_REFERER")) ParentClass= $SYSTEM.CSP.GetClassName(%request.CgiEnvs("HTTP_REFERER"))
    s:ParentClass="" ParentClass=%request.Get("ParentClass","")
	s:ParentClass="" ParentClass=##THIS
	do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(json,,.%override,1)
    if %override'="" {
	    s ^||WEVENT=%override.GetAt(1)
        if $l(^||WEVENT,".")'=1  { q 0 }
        s ^||WEVENT=$lg($$$cspDecode(%session.Key,^||WEVENT),1) 
        s ^||WEVENT=$p(^||WEVENT,":",1) ; ????
        s %method=$p(^||WEVENT,".",$l(^||WEVENT,"."))
        s %class=$e(^||WEVENT,1,$l(^||WEVENT)-$l(%method)-1)
        if %class="."{
          s %class=ParentClass
        }
        d ..ExecRunMethod(%override)
        q 1
    }
	
	
	 if ##this'="%ZWeb.cspxmlhttp.js"{	 
	     &html<
	       <script language="JavaScript" type="text/javascript" src="#($SYSTEM.CSP.GetDefaultApp($ZU(5)))#/#($zcvt("%ZWeb.cspxmlhttp.js","O","URL"))#.cls"></script> 
           <script language="JavaScript" type="text/javascript" src="#($SYSTEM.CSP.GetDefaultApp($ZU(5)))#/#($zcvt("%ZWeb.cspxmlhttp.js","O","URL"))#.cls?include=#(##this)#"></script> 
         >
	     d ..main()
	     q 1
	 }
	
     s ParentClassName1=##this
     // zw ^oddDEF(ParentClassName1)
     &js<
        var windowhashtablist={}; 
     >
     s MethodName=""
     for {
	     s MethodName=$o(^oddDEF(ParentClassName1,"m",MethodName))
         q:MethodName=""
         continue:MethodName="init"
         
         if $d(^oddDEF(ParentClassName1,"m",MethodName,70)) {

             if $d(^oddDEF(ParentClassName1,"m",MethodName,4)){
	           w !,"/*",!
	           w ^oddDEF(ParentClassName1,"m",MethodName,4)
	           w "*/"
             }
	         w !,"  "_MethodName_" = function(" 
	         if $d(^oddDEF(ParentClassName1,"m",MethodName,27)){
		         w ^oddDEF(ParentClassName1,"m",MethodName,27)
	         }
	         w "){"
	         
             for ind=1:1:^oddDEF(ParentClassName1,"m",MethodName,30) {
	             d ..ExecFrag(^oddDEF(ParentClassName1,"m",MethodName,30,ind),"/*(",")*/")
	             w $c(13,10)
                 // w ^oddDEF(ParentClassName1,"m",MethodName,30,ind)_$c(13,10)
             }
             w "}"
         }
     }
      
     s MethodName="init"
     for ind=1:1:^oddDEF(ParentClassName1,"m",MethodName,30) {
               w ^oddDEF(ParentClassName1,"m",MethodName,30,ind)_$c(13,10)
     }
     
     &js<
         var cspHttpServerMethod=SendServer;
         var cspCallHttpServerMethod=CallServer;
         
         ObjectBind=function(JsClassName,ClassName,id){
             var obj=#server(..readObject(ClassName,id))# ;
             // console.log(obj);
             obj=JSON.parse(obj)
             console.log(obj);
             if(obj.length!=0){
               JsonBuild(obj[0],JsClassName);
             }
         }
         
         ObjectSave=function(JsClassName,ClassName){
	          var texts=readJson(JsClassName,'id');    
	          var jsonSTR=JSON.stringify(texts)
	          console.log(jsonSTR);
              var res=#server(..saveObject(ClassName,jsonSTR))# ;
              console.log(res)
         }
         
     >
       s ClassCSP=ParentClass
	   for ind=1:1:$l(ClassCSP,","){
	      d $system.OBJ.GetDependencies($p(ClassCSP,",",ind),.included)
          s ClassParentTmp=""
          for {
            s ClassParentTmp=$o(included(ClassParentTmp))
            q:ClassParentTmp=""
            continue:$d(filtr(ClassParentTmp))
            d ..readJSFunctionFromCacheClass(ClassParentTmp,,0)
            s filtr(ClassParentTmp)=1
          } 
	   }
     Quit $$$OK
]]></Implementation>
</Method>

<Method name="main">
<ClassMethod>1</ClassMethod>
</Method>

<Method name="readObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",id=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	d ..WriteSqlJson("select * from "_ClassName_" where id="_id)
	q ""
]]></Implementation>
</Method>

<Method name="GetType">
<Description>
w ##class(HTML.Bind.js).GetType("Address.ESettle","ARegion")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",propertyName=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	 if $d(^oddDEF(ClassName,"a",propertyName,5)){
		 s typ=^oddDEF(ClassName,"a",propertyName,5)
		 if $l(typ,".")=1 {
			 if $l(typ,"%")=2 {
			    s typ=$replace(typ,"%","%Library.")	 
			 }else{
			   s typ="User."_typ	 
			 }
		 }
		 q typ
	 }else{
	    if $d(^oddDEF(ClassName,60)){
	       w ..GetType(^oddDEF(ClassName,60),propertyName)
	    }else{
		 q ""   
	    }
	 }
     q ""
]]></Implementation>
</Method>

<Method name="saveObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",json=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(json,,.override,1)
  s isNewObj=0
  
  if $d(override.%data("ID")){
	 s isNewObj=0
	 s ObjId=override.%data("ID")
     if ObjId="" { s isNewObj=1  }	 
  }else{
	s isNewObj=1
  }
  
  if isNewObj=0{
    s obj= $classmethod(ClassName,"%OpenId",ObjId)
  }else{
    s obj= $classmethod(ClassName,"%New")
  }
  s Property=""
  for {
	  s Property=$o(override.%data(Property))
	  q:Property=""
	  continue:Property="ID"
	  s PropertyType=..GetType(ClassName,Property)
	  ; w !,PropertyType_"  "_Property_"   "_override.%data(Property)
	  if $l(PropertyType,"%Library.")=2 {
	 	  if $l(PropertyType,"%Library.Date")=2 {
		 	 if override.%data(Property)="" s $zObjProperty(obj,Property)="" continue
	 	     s $zObjProperty(obj,Property)=$zdh(override.%data(Property),4)    continue
	 	  } else {
	 	     s $zObjProperty(obj,Property)=override.%data(Property)
	 	  }
	  }else{
	       s SubId=override.%data(Property)
		  if $l($tr(SubId,"0123456789."))=0 {
		     s SubObj= $classmethod(PropertyType,"%OpenId", SubId)
		     s $zObjProperty(obj,Property)=SubObj
		  }else{
             do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(SubId,,.SubOverride,1)
             /// !!! ДОПИСАТЬ рекурсивную инициализацию объекта и сохранение его!!!
             zw SubOverride
		  }
	  }
  }
  d obj.%Save()
  w obj.%Id()
  q ""
]]></Implementation>
</Method>

<Method name="WriteSqlJson">
<ClassMethod>1</ClassMethod>
<FormalSpec>SqlStr:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
      if $l(SqlStr)=0 w "[]" q ""
      s SqlStrTmp=$ZCVT(SqlStr,"L")
      q:$l(SqlStrTmp,"insert")>1 "[]"
      q:$l(SqlStrTmp,"update")>1 "[]"
      q:$l(SqlStrTmp,"delete")>1 "[]"
      q:$l(SqlStrTmp,"create ")>1 "[]"
      q:$l(SqlStrTmp,"alter ")>1 "[]"
      q:$l(SqlStrTmp,"drop ")>1 "[]"
      q:$l(SqlStrTmp,"call ")>1 "[]"
      s $ztrap="ztError"
      s SQLobj=##class(%SQL.Statement).%New()
      d SQLobj.%Prepare(SqlStrTmp)
      s DataSet=SQLobj.%Execute()
      s QMeta=DataSet.%GetMetaData()
      s jsonTab = ##class(%Library.ListOfDataTypes).%New()
      s countRaw=0
      w "["
      while DataSet.%Next()
      {
        s countRaw=countRaw+1
        w:countRaw>1 ","
        w:QMeta.columnCount>1 "{"
         for ColNum=1:1:QMeta.columnCount
         {
            w:ColNum>1 ","
            s val=DataSet.%GetData(ColNum)
            s nam=QMeta.columns.GetAt(ColNum).colName
            s typ=QMeta.columns.GetAt(ColNum).ODBCType
            if QMeta.columnCount>1  w """"_$zcvt(nam,"O","JS")_""":"
            if typ=9 { // число
               if val="" w """",""""   continue
               if val=0 w """",""""   continue
               w """"_$zd(+val,4)_"""" continue
            }
            if typ=12 { // текст
                w """"_$zcvt(val,"O","JS")_""""
               continue
            }
          ;  if typ=2 { // сылка на объект
	      ;     w val
	      ;     continue
          ;  }
          ;  if typ=-7 { // Bool
          ;    w val
          ;    continue
          ;  }
            
            if val="" {
                 w """"
                 w """"
            }elseif (+val=val) {
                 w $zcvt(val,"O","JS")
                ; w $zcvt(val,"O","JS")
             }elseif (val="") {
                w "null"
             }else{
                 w """"_$zcvt(val,"O","JS")_""""
                ; w """"_$zcvt(val,"O","JS")_""""
             }
         }  
        w:QMeta.columnCount>1 "}"
      }
     w "]"
     q
ztError   
    w "[]"
    q ""
]]></Implementation>
</Method>

<Method name="init">
<Description>
Функция инициализации</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
 
 // ""
]]></Implementation>
</Method>

<Method name="SendServer">
<FormalSpec>MethodName</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var arr=new Array();
    if ((''+SendServer.arguments[1])=='[object Arguments]'){
       arr.push(SendServer.arguments[0]);     
       for(var ind in SendServer.arguments[1]){if (SendServer.arguments[1][ind]==undefined){continue;} arr.push(SendServer.arguments[1][ind]); }   
    }else{
       for(var ind in SendServer.arguments){if (SendServer.arguments[ind]==undefined){continue;} arr.push(SendServer.arguments[ind]); }   
    }
    var requestSendServer = new XMLHttpRequest();
    requestSendServer.open('POST',  '/*(  w $SYSTEM.CSP.GetDefaultApp($ZU(5))_"/"_$zcvt("%ZWeb.cspxmlhttp.js","O","URL")_".cls"   )*/' , false);
    requestSendServer.send(JSON.stringify(arr));  
    requestSendServer.ontimeout = function (e) {
          alert('Время ожидания ответа вышло!!!!');
    }
    if (requestSendServer.status !== 200) {
        return {"error":requestSendServer.status}
    }
    return requestSendServer.responseText;
]]></Implementation>
</Method>

<Method name="CallServer">
<FormalSpec>MethodName</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var arr=new Array();
    if ((''+CallServer.arguments[1])=='[object Arguments]'){
       arr.push(CallServer.arguments[0]);     
       for(var ind in CallServer.arguments[1]){if (CallServer.arguments[1][ind]==undefined){continue;} arr.push(CallServer.arguments[1][ind]); }   
    }else{
       for(var ind in CallServer.arguments){if (CallServer.arguments[ind]==undefined){continue;} arr.push(CallServer.arguments[ind]); }   
    }
    var FunCallBack=null;
    if (arr.length>1){
       if (typeof arr[1] === 'function'){
          arr.splice(1, 1);
          FunCallBack=arr[1];
       } 
    }
    var requestSendServerCall = new XMLHttpRequest();
    if (FunCallBack!=null){
       requestSendServerCall.open('POST',  '/*(   w $SYSTEM.CSP.GetDefaultApp($ZU(5))_"/"_$zcvt("%ZWeb.cspxmlhttp.js","O","URL")_".cls"   )*/' , true);
       requestSendServerCall.onreadystatechange = function() {
         if (this.readyState == 4 && this.status == 200) {
           if (typeof FunCallBack === 'function'){
                FunCallBack(this.responseText);
           }
           if (myVarsetInterval!=null){
               myStopFunctionsetInterval();
           }
         };
       };
       return requestSendServerCall;
    }else{
       requestSendServerCall.open('POST',  '/*(   w $SYSTEM.CSP.GetDefaultApp($ZU(5))_"/"_$zcvt("%ZWeb.cspxmlhttp.js","O","URL")_".cls"   )*/' , false);
       requestSendServerCall.send(JSON.stringify(arr));  
       requestSendServerCall.ontimeout = function (e) {
          alert('Time out');
       }
       if (requestSendServerCall.status !== 200) { return {"error":requestSendServerCall.status} }
       return requestSendServerCall;
    }
]]></Implementation>
</Method>

<Method name="toJson">
<FormalSpec>arg</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
     var str='';
     var arr= new Array();
     var objRes={};
     var EofList=['srcElement','childElementCount','namespaceURI','nodeType','baseURI','path','formAction','offsetParent','namespaceURI','outerHTML','previousElementSibling','nextElementSibling','children','firstChild','lastChild','ownerDocument','childNodes','outerText','outerHTML','localName','scrollTop','scrollLeft','scrollWidth','scrollHeight','wordBreak','wordSpacing','wordWrap'];
     var SubObjList=['style','attributes','dataset'];
     for(var ind in arg){
          if (typeof arg[ind] ==='function'){continue;}
          if (ind.substring(0,2)=='on'){continue;}
          if (ind.indexOf('_')!=-1){continue;}
          if ((ind+'').indexOf('parent')!=-1){continue;}
          if ((ind+'').indexOf('webkit')!=-1){continue;}
          if ((ind+'').indexOf('word')!=-1){continue;}
          if ((ind+'').indexOf('isConnected')!=-1){continue;}
          if (EofList.indexOf(ind)!=-1){continue;}
         if (SubObjList.indexOf(ind)!=-1){
              var subObj={};
            for(var indSub in arg[ind]){
                 if (typeof arg[ind][indSub] ==='function'){continue;}
               if ((indSub+'').indexOf('webkit')!=-1){continue;}
               if ((indSub+'').indexOf('word')!=-1){continue;}
               if ((indSub+'').indexOf('transition')!=-1){continue;}
               if ((''+arg[ind][indSub])==''){continue;}
                 subObj[indSub]=''+arg[ind][indSub];
            }
            objRes[ind]=subObj;
            continue;
         }

          if (typeof arg[ind] ==='object'){continue;};
         objRes[ind]=arg[ind];
     }
     /* document.getElementById("info").innerHTML=JSON.stringify(objRes);*/
     return objRes;
]]></Implementation>
</Method>

<Method name="JsonBuild">
<FormalSpec>JsonObject,ClassName,IdName,ParamName</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
      var JsonObjectStr=JSON.stringify(JsonObject)
      if ((''+IdName)=='undefined'){IdName='id';}
      var elements= document.querySelectorAll('.'+ClassName);
         for (var ind  in elements) {
              if ((''+parseInt(''+ind))=='NaN'){continue; }     
              var id=elements[ind].getAttribute(IdName);
              if ((''+id)=='undefined'){continue; }
              if ((''+ParamName)!='undefined'){ 
                  if (ParamName!= elements[ind].getAttribute(IdName)){ continue; }   
              }
              if (JsonObjectStr.indexOf('"'+id+'":')!=-1){
                 val=elements[ind].value;
                 // NewVal=decodeURI(JsonObject[id]);
                 NewVal=JsonObject[id];
                 OldVal=elements[ind].value;
                 if(elements[ind].type=='radio'){ elements[ind].checked=true; continue; }
                 if (NewVal!=OldVal){
                     // 'select-multiple','select-one','textarea','text','checkbox'
                     if (elements[ind].type=='checkbox'){
                         elements[ind].checked = (NewVal==1);
                     }else if(elements[ind].type=='text'){
                         elements[ind].value = NewVal;
                     }else if(elements[ind].type=='select-one'){
                         elements[ind].value=NewVal;
                     }else if(elements[ind].type=='textarea'){
                         elements[ind].value=NewVal;
                     }else if(elements[ind].type=='select-multiple'){
	                     // снимаем выбранные элементы
		                 for (var indElSelect in elements[ind].options){
		                    elements[ind].options[indElSelect].selected=false;
		                 }
	                     if (typeof(NewVal)==='object'){
		                   // Выбираем элементы  
		                   for (indVal1 in NewVal){
	                          // console.log(typeof(NewVal))
	                          // console.log(NewVal[indVal1])
	                          for (var indElSelect in elements[ind].options){
		                         if (elements[ind].options[indElSelect].value==NewVal[indVal1]){
 		                             elements[ind].options[indElSelect].selected=true;
		                         }
	                          }
		                   }
	                     }else{
		                      // string,number
	                          for (var indElSelect in elements[ind].options){
		                         if (elements[ind].options[indElSelect].value==NewVal){
 		                             elements[ind].options[indElSelect].selected=true;
		                         }
	                          }
	                     }
                     }else{
                         // elements[ind].value=NewVal;
                     }
                 }
                    
             }
             
         }
]]></Implementation>
</Method>

<Method name="readJson">
<FormalSpec>NameClass,IdName</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
 if ((''+IdName)=='undefined'){ IdName='id';}
            var elements= document.querySelectorAll('.'+NameClass);
            var texts={}; 
            var indRes=0
            for (var ind  in elements) {
                   if ((''+parseInt(''+ind))=='NaN'){continue; }
                   var id=elements[ind].getAttribute(IdName);
                   if (elements[ind].type=='checkbox'){
                      if (elements[ind].checked==true){
	                    val=1
                      }else{
	                    val=0
                      }
                   }else{ 
                     val=elements[ind].value;
                   }
                   if (elements[ind].type=='radio'){
                      if (elements[ind].checked) {
                         texts[id]=val;
                      }else{
                      }
                      continue;
                   }
                   if ((''+val)=='undefined'){
                       val=encodeURI(elements[ind].innerHTML); 
                   }
                   if ((''+id)=='undefined'){continue; }
                   if ((''+id)=='null'){continue; }
                   if ((''+id)==''){continue; }
                   if ((''+elements[ind])=='[object HTMLSelectElement]'){
	                  if (elements[ind]['multiple']==true){
 	                      texts[id]=[];
	                      for (var i=0; i < elements[ind].options.length; i++) {
                             if (elements[ind].options[i].selected) {
                               var valEl ;
                               if (elements[ind].options[i].type=='checkbox'){
                                 if (elements[ind].options[i].checked==true){
	                                val=1
                                 }else{
	                                val=0
                                 }
                              }
                              
                              else{ 
                                valEl=elements[ind].options[i].value;
                              }
                              texts[id].push(valEl);
                             }
                          }
 	                      continue;
                      }
                   }
                   if ((''+val)=='undefined'){continue;}
                   indRes++;
                   texts[id]=val;
            }
            return texts;
]]></Implementation>
</Method>

<Method name="sleep">
<FormalSpec>sleepDuration</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   var now = new Date().getTime();
   while(new Date().getTime() < now + sleepDuration){ /* do nothing */ }
]]></Implementation>
</Method>

<Method name="ExecRunMethod">
<ClassMethod>1</ClassMethod>
<FormalSpec>override:%Library.ListOfDataTypes</FormalSpec>
<Implementation><![CDATA[
     Set count=override.Count()-1
     set args=count
     s numArg=0
     for j=2:1:override.Count(){
 	    s numArg=numArg+1
        set args(numArg) = $zcvt(override.GetAt(j),"i","UTF8")
     }
     if '$d(^oddDEF(%class,"m",%method,70)) {
        if '$d(^oddDEF(%class,"m",%method,42)) {
           do $classmethod(%class, %method, args...)
        } Else {
            w $classmethod(%class, %method, args...)
        }
     }else{
        if $d(^oddDEF(%class,"m",%method,30)){
          for ind=1:1:^oddDEF(%class,"m",%method,30){
             w:ind'=1 $c(13,10)
              d ..ExecFrag(^oddDEF(%class,"m",%method,30,ind),"/*(",")*/")
          }
        }
     }
     q
]]></Implementation>
</Method>

<Method name="ExecFrag">
<Description>
Метод разбики исходного текста на Cache` код и HTML текст</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End=""</FormalSpec>
<Implementation><![CDATA[    q:SrcCode=""   q:Beg=""    q:End=""    for ExecFragInd=1:1:$l(SrcCode,End){  s tmp=$p(SrcCode,End,ExecFragInd)   s Html=$p(tmp,Beg,1)     s Code=$p(tmp,Beg,2)   w Html   TRY {     x Code    } CATCH ErrorHandle {    zw ErrorHandle  }    }
]]></Implementation>
</Method>

<Method name="option">
<Description><![CDATA[
 
  #(##class(HTML.Bind.js).option("SELECT tochar(ID) as  VALUE, Name As TEXT FROM Address.ESettle ORDER BY Type, Name") )#
     <select class='dat2' id='Settle'>
  	     <option  value=''></option>
  	     #(##class(HTML.Bind.js).option("SELECT tochar(ID) as  VALUE, Name As TEXT FROM Address.ESettle ORDER BY Type, Name") )#
  	  </select>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SQLStr="",SelectVal=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	        s:SelectVal'="" SelectVal=$zcvt(SelectVal,"L")
            s SQLobj=##class(%SQL.Statement).%New()
            d SQLobj.%Prepare(SQLStr)
            s DataSet=SQLobj.%Execute()
            s QMeta=DataSet.%GetMetaData()
            while DataSet.%Next()
            {
	           s TEXT="" 
               w " <option " 
               for ColNum=1:1:QMeta.columnCount {
                 s nam=QMeta.columns.GetAt(ColNum).colName
                 s val=DataSet.%GetData(ColNum)
                 if $zcvt(nam,"L")="text" { 
                    s TEXT=val
                    continue
                 }
                 if SelectVal'="",$zcvt(nam,"L")="value" { 
                   if SelectVal=$zcvt(val,"L"){
                      w ""_$select(($zcvt(val,"L") = $zcvt(SelectVal,"L")):"selected", 1:"") 
                   }
                 }
                 w "  "_nam_"="""_$REPLACE(val,"""","\""")_""" "
               }  
               if TEXT=""  {  
                  w " /> "
               }else{
                  w " >"_TEXT_"</option>" 
               }
            }
           do DataSet.%Close()
           do SQLobj.%Close()	
           q ""
]]></Implementation>
</Method>

<Method name="select">
<Description>
  #(  ##class(HTML.Bind.js).select("  class='dat2' id='Settle' ","SELECT tochar(ID) as  VALUE, Name As TEXT FROM Address.ESettle ORDER BY Type, Name")  )#</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Param="  class='dat2' id='Settle' ",SQLStr=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&html<  <select #(Param)#>  > 
	d ..option(SQLStr = "") 
	&html<  </select>  > 
	q ""
]]></Implementation>
</Method>

<Method name="readJSFunctionFromCacheClass">
<Description><![CDATA[
<pre>

Варианты параметров классов 
 1) [ Language = cache, WebMethod ]
 2) [ Language = javascript, WebMethod ]

Пример классов , которые будут интерпритированы в JS функции:
    ClassMethod test2()as %String [ Language = cache, WebMethod ]{ zw  q ""}
    ClientMethod test3() [ Language = javascript, WebMethod ]{    alert('test3()');}
    Property cspXMLHttp As %String [ ServerOnly = 1 ];
    Property cspUseGetMethod As %Boolean [ InitialExpression = 0, ServerOnly = 1 ];
    Property cspMozilla As %Boolean [ InitialExpression = "nill", ServerOnly = 1 ];
   
</pre>
 <h2>Переписать  %Library.ClassDefinition на  <h2>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ParentClassName="",MethodName="",DrawDescript=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
     s onEventFun=",onblur,onerror,onfocus,onload,onresize,onscroll,onbeforeunload,onhashchange,onlanguagechange,onmessage,onoffline,ononline,onpagehide,onpageshow,onpopstate,onrejectionhandled,onstorage,onunhandledrejection,onunload,onabort,oncancel,oncanplay,oncanplaythrough,onchange,onclick,onclose,oncontextmenu,oncuechange,ondblclick,ondrag,ondragend,ondragenter,ondragleave,ondragover,ondragstart,ondrop,ondurationchange,onemptied,onended,oninput,oninvalid,onkeydown,onkeypress,onkeyup,onloadeddata,onloadedmetadata,onloadstart,onmousedown,onmouseenter,onmouseleave,onmousemove,onmouseout,onmouseover,onmouseup,onmousewheel,onpause,onplay,onplaying,onprogress,onratechange,onreset,onseeked,onseeking,onselect,onshow,onstalled,onsubmit,onsuspend,ontimeupdate,ontoggle,onvolumechange,onwaiting,onauxclick,ongotpointercapture,onlostpointercapture,onpointercancel,onpointerdown,onpointerenter,onpointerleave,onpointermove,onpointerout,onpointerover,onpointerup,onbeforecopy,onbeforecut,onbeforepaste,oncopy,oncut,onpaste,onsearch,onselectstart,onwheel,onwebkitfullscreenchange,onwebkitfullscreenerror"
     s ClassOref=##class(%ClassDefinition).%OpenId(ParentClassName)
     if ClassOref {
       s ConstructMethod=$p(ParentClassName,".",$l(ParentClassName,"."))
       s count=ClassOref.Properties.Count() 
       for i=1:1:count {
            s nam=ClassOref.Properties.GetAt(i).Name
            continue:'$d(^oddDEF(ParentClassName,"a",nam,57))
            continue:^oddDEF(ParentClassName,"a",nam,57)'=1
            w "  var "_ClassOref.Properties.GetAt(i).Name_" "
            if $d(^oddDEF(ParentClassName,"a",nam,31)) {
                 s val=^oddDEF(ParentClassName,"a",nam,31)
                 if val="""null""" w "=null;"_$c(13,10)  continue
                 s typ=""
                 if $d(^oddDEF(ParentClassName,"a",nam,5)) {
                    s typ=^oddDEF(ParentClassName,"a",nam,5)
                    if $e(typ,1,1)="%",$l(typ,".")=1 {
                       s typ=$REPLACE(typ,"%","%Library.")
                    }
                 }   
                 if typ="" {
                     if $l(typ ," ")=1 { w "="_$e(val,2,$l(val)-1)_";"_$c(13,10)  continue }
                    try {   x "w "_val   }catch(e){  w "="_$e(val,2,$l(val)-1)_";"_$c(13,10)  continue }
                 }
                 
                 if typ="%Library.Boolean" {
                      if $e(val,1,1)="""" {
                         w "=" 
                         try {   x "w "_val   }catch(e){  if +val=1 { w "=true"  }else     { w "=false" }   }
                      }else {
                        if val=1 { w "=true"  }else     { w "=false" }
                      }
                 }elseif  typ="%Library.Integer" {
                     if $e(val,1,1)="""" {
                         w "=" 
                         try {   x "w "_val   }catch(e){  s val=+val  w val }
                      } else {
                          s val=+val  w val
                      } 
                 }else{
	                 
                     if $e(val,1,1)'="""" {
                           w "=""" 
                           try {   x "w "_val   }catch(e){  w val   }
                           w """"
                      }else {
                         w "="_val
                      } 
                 }
            }
            w ";"_$c(13,10) 
       }
       s ConstructMethodIndex=""
       s count=ClassOref.Methods.Count()
       for i=1:1:count {
            if (MethodName=""){
               continue:$l(ClassOref.Methods.GetAt(i).Name,"OnPage")'=1
               continue:ClassOref.Methods.GetAt(i).Name="OnPreHTTP"
               continue:ClassOref.Methods.GetAt(i).Name="OnPostHTTP"
               continue:ClassOref.Methods.GetAt(i).Name="getLibOne"
               continue:ClassOref.Methods.GetAt(i).Name="GetJSMethodFromClientMethod"
               continue:ClassOref.Methods.GetAt(i).Name="readJSFunctionFromCacheClass"
            }else{
                continue:ClassOref.Methods.GetAt(i).Name'=MethodName   
            }
           /// [ ServerOnly = 1 ]
           // continue:'$d(^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,59))
           // continue:^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,59)'=1
           
           /// [ WebMethod ]
           continue:'$d(^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,51))
           continue:^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,51)'=1
          
          if $ZCVT(ClassOref.Methods.GetAt(i).Name,"L")=$ZCVT(ConstructMethod,"L"){
             s ConstructMethodIndex=i
             continue    
          }
          
          ;  if DrawDescript=1 {
          ;     if $l(ClassOref.Methods.GetAt(i).Description)>0,ParentClassName'=##this{
          ;        w !,"/*",!
          ;        w $replace(ClassOref.Methods.GetAt(i).Description,"*/","-/-")
          ;        w !,"*/"
          ;     }
          ;  }
          
          // Получаем JS представление Cache клиент метода
           if ClassOref.Methods.GetAt(i).Language="javascript" {
               w !,"var "_ClassOref.Methods.GetAt(i).Name_"=function("
               s param=ClassOref.Methods.GetAt(i).FormalSpec
               for ind=1:1:$l(param,","){
                   s subParam=$p(param,",",ind)
                   s subParam=$p(subParam,":",1)
                   s subParam=$p(subParam,"=",1)
                   w:ind'=1 ","
                   w subParam
               }
               w "){",!
                 d ..ExecFrag(ClassOref.Methods.GetAt(i).Code,"/*(",")*/")
                 // w ClassOref.Methods.GetAt(i).Code
                 w !,"};"
                
            }
           // Получаем JS представление Cache класс метода
           if ClassOref.Methods.GetAt(i).Language="cache" {
                   w !,"var "_ClassOref.Methods.GetAt(i).Name_"=function(){",!
                   ; if $d(^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,42)){ w "return "}
                   s WEVENT=$$$cspEncode(%session.Key,$lb(ParentClassName_"."_ClassOref.Methods.GetAt(i).Name))
                   w "   return cspHttpServerMethod('"_WEVENT_"',arguments);"
                   w !,"};"
           }
                
         }
         // После отрисовки функций, создаем конструктор( если конечно он встретился ранее)
         if ConstructMethodIndex'="" {
           s i=ConstructMethodIndex
           if ClassOref.Methods.GetAt(i).Language="javascript" {
              d ..ExecFrag(ClassOref.Methods.GetAt(i).Code,"/*(",")*/")
           }
           if ClassOref.Methods.GetAt(i).Language="cache" {
              s WEVENT=$$$cspEncode(%session.Key,$lb(ParentClassName_"."_ClassOref.Methods.GetAt(i).Name))
              w " cspHttpServerMethod('"_WEVENT_"',arguments);"
           }
         }
       }
       q ""
]]></Implementation>
</Method>

<Method name="popupwindow">
<Description>
popupwindow("SMS.SendOneSMS.cls",'Отправка SMS',500,360);</Description>
<FormalSpec>url,title,w,h,params</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
        var y = window.outerHeight / 2 + window.screenY - ( h / 2)
        var x = window.outerWidth / 2 + window.screenX - ( w / 2)
        var myPopup=null;
        var myPopupUrl=null;
        for (var k in windowhashtablist) {
          if (windowhashtablist.hasOwnProperty(k)) {
            if (k==title) {
               myPopup=windowhashtablist[k]['window'];
               myPopupUrl=windowhashtablist[k]['url'];
            }
          }
        }
        if (myPopup!=null){
           if (myPopup.closed){
              myPopup=null;
           }else{
              if (myPopupUrl==url){	           
                 myPopup.focus();
                 return myPopup;
              }
           } 
        }
        if (typeof(params) == "undefined") { 
           myPopup=window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + y + ', left=' + x);
        }else{
           myPopup=window.open(url, title, params+', width=' + w + ', height=' + h + ', top=' + y + ', left=' + x);
        }  
        
	   
	 try { 
        myPopup.addEventListener('DOMContentLoaded', function(){
         ContentHtml= myPopup.document.getElementsByTagName('html')[0];
         var script=myPopup.document.createElement('script');
         script.innerHTML="";
         script.innerHTML+=" try { "
         script.innerHTML+="   cspHttpServerMethod     = window.opener.SendServer; ";
         script.innerHTML+="   cspCallHttpServerMethod = window.opener.cspCallHttpServerMethod; ";
           script.innerHTML+=' /*(   w ..DrawFunName()   )*/ ';
           script.innerHTML+=" document.addEventListener('keydown', function(event){ "
           script.innerHTML+="      var FoundOneJobLib=false ;"
           script.innerHTML+="      var ScriptList=document.getElementsByTagName('script'); "
           script.innerHTML+="       for (var ind in ScriptList){ "
           script.innerHTML+="          var str=ScriptList[ind].src+'';"
           script.innerHTML+="         if(str=='undefined'){continue;}"
           script.innerHTML+="         if(str==''){continue;}"
           script.innerHTML+='         if (str.indexOf(\'/*(  w $zcvt("%ZWeb.cspxmlhttp.js","O","URL")_".cls"   )*/\')==-1){continue;} '
           script.innerHTML+="         FoundOneJobLib=true;  "
           script.innerHTML+="         if (str.indexOf('include=')!=-1){ FoundOneJobLib=false; continue; }    "
           script.innerHTML+="         break;  "
           script.innerHTML+="     }"
         
           script.innerHTML+="     if (FoundOneJobLib==false){  if (event.keyCode == 116) { self.close(); } }"
           script.innerHTML+="     if (FoundOneJobLib==false){  if (event.keyCode == 27) { self.close(); } }"
           script.innerHTML+=" },true); "
         
         script.innerHTML+=" } catch (err) { }"
         ContentHtml.appendChild(script);  

         
         var script2=myPopup.document.createElement('script');
         script2.language="JavaScript";
         script2.type="text/javascript";
         script2.src='/*(  w $SYSTEM.CSP.GetDefaultApp($ZU(5))_"/"_$zcvt("%ZWeb.cspxmlhttp.js","O","URL")_".cls"   )*/'+"/?cls=1&include="+encodeURIComponent(url);
         ContentHtml.appendChild(script2);  
       },true)
     } catch (err) { }
     
     windowhashtablist[title]={'url':url, 'window': myPopup};
     return myPopup;
]]></Implementation>
</Method>

<Method name="DrawFunName">
<ClassMethod>1</ClassMethod>
<FormalSpec>ParentClass=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   // s ParentClass=$SYSTEM.CSP.GetClassName("/"_%ParentClass) 
       s ParentClass=##this
       d $system.OBJ.GetDependencies(ParentClass,.included)
       s ClassParentTmp=""
       for {
         s ClassParentTmp=$o(included(ClassParentTmp))
         q:ClassParentTmp=""
         if $d(^oddDEF(ClassParentTmp,"m")){
            s MethodName=""
            for {
    	       s MethodName=$o(^oddDEF(ClassParentTmp,"m",MethodName))
               q:MethodName=""
               continue:'$d(^oddDEF(ClassParentTmp,"m",MethodName,70))
               w " "_MethodName_"  = window.opener."_MethodName_"; " 
            }
         }
       }
   q ""
]]></Implementation>
</Method>

<Method name="popupcls">
<FormalSpec>win,callback</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
        !function  popupclsloop () { 
            if(win.closed){ 
              callback.call(); 
              return; 
           } 
           setTimeout(popupclsloop, 1000); 
        }();
]]></Implementation>
</Method>

<Method name="setCookie">
<FormalSpec>cname,cvalue,exdays</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[ var d = new Date(); d.setTime(d.getTime() + (exdays)); var expires = 'expires='+d.toUTCString(); document.cookie = cname + '=' + cvalue + "; " + expires;
]]></Implementation>
</Method>

<Method name="delCookie">
<FormalSpec>name</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[ setCookie(name, '', { expires: -1  })
]]></Implementation>
</Method>

<Method name="getCookie">
<FormalSpec>cname</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[ var name = cname + '='; var ca = document.cookie.split(';'); for(var i=0; i!=ca.length; i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1); if (c.indexOf(name) == 0) return c.substring(name.length,c.length); } return '';
]]></Implementation>
</Method>

<Method name="getSelectValues">
<FormalSpec>select</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var result = [];
  var options = select && select.options;
  var opt;
  for (var i=0, iLen=options.length; i<iLen; i++) {
    opt = options[i];
    if (opt.selected) {
       result.push(opt.value || opt.text);
    }
  }
  return result;
]]></Implementation>
</Method>
</Class>
</Export>
