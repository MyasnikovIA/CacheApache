<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2017.2 (Build 651)" ts="2018-10-24 17:57:38">
<Class name="%ZWeb.RunJob">
<Super>%CSP.Page</Super>
<TimeChanged>64945,64642.923267</TimeChanged>
<TimeCreated>64891,36695.235768</TimeCreated>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
  s %response.CharSet="CP1251"
  ; s %response.CharSet="UTF-8"
  Do %response.SetHeader("Content-Type","application/javascript")   
  q 1
]]></Implementation>
</Method>

<Method name="IncludeJSFunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	   s ClassCSP=%request.Get("include","")
  	   s ClassCSP=$tr(ClassCSP," ","")
       k filtr
	   for ind=1:1:$l(ClassCSP,","){
	      d $system.OBJ.GetDependencies($p(ClassCSP,",",ind),.included)
          s ClassParentTmp=""
          for {
            s ClassParentTmp=$o(included(ClassParentTmp))
            q:ClassParentTmp=""
            continue:$d(filtr(ClassParentTmp))
            d ..readJSFunctionFromCacheClass(ClassParentTmp)
            s filtr(ClassParentTmp)=1
          } 
	   }
       q
]]></Implementation>
</Method>

<Method name="IncludeJSObject">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	   s ClassCSP=%request.Get("object","")
  	   s ClassCSP=$tr(ClassCSP," ","")
       k filtrObj
	   for ind=1:1:$l(ClassCSP,","){
	     
	      // Если класс есть, тогда интерпритируем 
	      if $zObjClassMethod("%CompiledClass","%ExistsId",$p(ClassCSP,",",ind))=1 {
	            d $system.OBJ.GetDependencies($p(ClassCSP,",",ind),.included)
                s ClassParentTmp=""
                for {
                  s ClassParentTmp=$o(included(ClassParentTmp))
                  q:ClassParentTmp=""
                  continue:$d(filtrObj(ClassParentTmp))
                  d ..readJSObjectFromCacheClass(ClassParentTmp)
                  s filtrObj(ClassParentTmp)=1
                } 
	      }else{
		   // иначе проверяем есть ли такой пакет, и добавляем весь пакет
		    s ClassTmpPacket=""
		    for {
		         s ClassTmpPacket=$o(^oddDEF(ClassTmpPacket))
		         q:ClassTmpPacket=""  
		         if $e(ClassTmpPacket,1,$l($p(ClassCSP,",",ind)))=$p(ClassCSP,",",ind){
 	                 d $system.OBJ.GetDependencies(ClassTmpPacket,.included)
                     s ClassParentTmp=""
                     for {
                        s ClassParentTmp=$o(included(ClassParentTmp))
                        q:ClassParentTmp=""
                        continue:$d(filtrObj(ClassParentTmp))
                        d ..readJSObjectFromCacheClass(ClassParentTmp)
                        s filtrObj(ClassParentTmp)=1
                     } 
		         }
		    }
		      
	      }  
	   }
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define cspEncode(%k,%d)        $translate($System.Encryption.AESBase64Encode(%d,%k),"+=/"_$char(32,13,10),"_-$")
    #define cspDecode(%k,%d)        $System.Encryption.AESBase64Decode($translate(%d,"_-$","+=/"),%k)
	
	 /// Подключение класса и интерпритация его как JS библиотек
    if %request.Get("include","")'=""{
	   d ..IncludeJSFunction()
	   q 1   
    }
    
    /// Подключение класса и интерпритация его как JS библиотек
    if %request.Get("object","")'=""{
	   d ..IncludeJSObject()
	   q 1   
    } 
    
    
    
    
   	 /// Вычитываем тело POST запроса
	s json=""
	if $isobject(%request.Content){
	   for {
		  q:%request.Content.AtEnd
	      s json=json_%request.Content.Read(32000)	     
	   }	
	}
	
	s ParentClass=""
    s:$d(%request.CgiEnvs("HTTP_REFERER")) ParentClass= $SYSTEM.CSP.GetClassName(%request.CgiEnvs("HTTP_REFERER"))
    s:ParentClass="" ParentClass=%request.Get("ParentClass","")
	s:ParentClass="" ParentClass=##THIS
	
	if json'=""{
	   #dim %RequestSrv as %ListOfDataTypes
	   do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(json,,.%RequestSrv,1)
       if %RequestSrv'="" {

           //----переключаем область имен на родительскую страницу -----------
           s ref=%request.CgiEnvs("HTTP_REFERER")
           s ref=$e(ref,$l($p(ref,"/"))+2,$l(ref))
           s ref=$e(ref,$l($p(ref,"/"))+2,$l(ref))
           s ref=$e(ref,$l($p(ref,"/"))+2,$l(ref))
           s app=$SYSTEM.CSP.GetAppName(ref)
	       s app="/"_$e(app,1,$l(app)-1)
	       ; &SQL(select TOP 1 NameSpace into :NameSpace from Security.Applications where id=:app)
	       ; if (SQLCODE '= 0) {d $zu(5,NameSpace) } }
	       s SqlStrTmp=" select TOP 1 NameSpace from Security.Applications where id=?"
           s SQLobj=##class(%SQL.Statement).%New()
           d SQLobj.%Prepare(SqlStrTmp)
           s DataSet=SQLobj.%Execute(app)
           while DataSet.%Next() {  d $zu(5,DataSet.NameSpace) } 
           //------------------------------------------------------------------
   
	       s SesKey=$System.Encryption.Base64Decode(%RequestSrv.GetAt(1))
	       ; w SesKey
	       s ClassMethod=%RequestSrv.GetAt(2)
	       s ClassMethod=$p(ClassMethod,"&",1)	         
	        
	         ; s ^%deb($job,"%NameSpaceDefault")=%NameSpaceDefault
             ; s ^%deb($job,"app")=app
             ; s ^%deb($JOB,"NS")=$ZU(5)
	         ; s ^%deb($JOB,"ClassMethod")=ClassMethod
	         ; s ^%deb($JOB,"SesKey")=SesKey
	       
	       s ClassMethod=$$$cspDecode(SesKey,ClassMethod)
	       s ClassMethod=$lg(ClassMethod,1)
	       s FromQuery=""
	       if $l(ClassMethod,":")>1{
	         s FromQuery=$p(ClassMethod,":",2)
	         s ClassMethod=$p(ClassMethod,":",1)
	       }
	       s ^%deb($JOB,"ClassMethodEncode")=ClassMethod
	        
	       ; s FromRunClassMethod=$p(ClassMethod,":",2)
	       s ClassMethod=$p(ClassMethod,":",1)
           s %method=$p(ClassMethod,".",$l(ClassMethod,"."))
           s %class=$e(ClassMethod,1,$l(ClassMethod)-$l(%method)-1)
           if %class="."{s %class=ParentClass}
           Set count=%RequestSrv.Count()-2
           set args=count
           s numArg=0
           for j=3:1:%RequestSrv.Count(){
 	          s numArg=numArg+1
              set args(numArg) = %RequestSrv.GetAt(j)
           }
           k j,numArg,%RequestSrv,count,ClassMethod
           if '$d(^oddDEF(%class,"m",%method,70)) {
               if '$d(^oddDEF(%class,"m",%method,42)) {
                  do $classmethod(%class, %method, args...)
               } Else {
                  w $classmethod(%class, %method, args...)
               }
           }else{
              if $d(^oddDEF(%class,"m",%method,30)){
                for ind=1:1:^oddDEF(%class,"m",%method,30){
                  w:ind'=1 $c(13,10)
                  d ..ExecFrag(^oddDEF(%class,"m",%method,30,ind),"/*(",")*/")
                }
              }
           }      
       }
	   q 1	
	}
	
	d ..readJSFunctionFromCacheClass("%ZWeb.RunJob")
   &js<
	  var cspHttpServerMethod=SendServer;
	  var cspCallHttpServerMethod=CallServer;
	>
    
	if ParentClass'="",ParentClass'=##this {
 	   d ..readJSFunctionFromCacheClass(ParentClass)
	}
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="SendServer">
<FormalSpec>MethodName</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var arr=new Array();
    arr.push( "/*(   w $System.Encryption.Base64Encode(%session.Key)  )*/" );
    if ((''+SendServer.arguments[1])=='[object Arguments]'){
       arr.push(SendServer.arguments[0]);     
       for(var ind in SendServer.arguments[1]){if (SendServer.arguments[1][ind]==undefined){continue;} arr.push(SendServer.arguments[1][ind]); }   
    }else{
       for(var ind in SendServer.arguments){if (SendServer.arguments[ind]==undefined){continue;} arr.push(SendServer.arguments[ind]); }   
    }
    var requestSendServer = new XMLHttpRequest();
    requestSendServer.open('POST', '/*(   w $SYSTEM.CSP.GetDefaultApp($ZU(5))_"/"_$zcvt("%ZWeb.RunJob","O","URL")_".cls"  )*/', false);
    requestSendServer.send(JSON.stringify(arr));  
    requestSendServer.ontimeout = function (e) {
          alert('Время ожидания ответа вышло!!!!');
    }
    if (requestSendServer.status !== 200) {
        return {"error":requestSendServer.status}
    }
    return requestSendServer.responseText;
]]></Implementation>
</Method>

<Method name="CallServer">
<FormalSpec>MethodName</FormalSpec>
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var FunCallBack=null;
    var arr=new Array();
    arr.push( "/*(   w $System.Encryption.Base64Encode(%session.Key)  )*/" );
    if ((''+CallServer.arguments[1])=='[object Arguments]'){
       arr.push(CallServer.arguments[0]);     
       for(var ind in CallServer.arguments[1]){
	        if (CallServer.arguments[1][ind]==undefined){continue;} 
	        if (typeof CallServer.arguments[ind] === 'function'){
		       FunCallBack=CallServer.arguments[ind];
	           continue;
	        } 
	        arr.push(CallServer.arguments[1][ind]); 
	   }   
    }else{
       for(var ind in CallServer.arguments){
	     if (CallServer.arguments[ind]==undefined){continue;} 
	     if (typeof CallServer.arguments[ind] === 'function'){
		    FunCallBack=CallServer.arguments[ind];
	        continue;
	     } 
         arr.push(CallServer.arguments[ind]); 
       }   
    }
    
    var requestSendServer = new XMLHttpRequest();
    requestSendServer.ontimeout = function (e) { alert('Время ожидания ответа вышло!!!!'); }
	if (typeof FunCallBack === 'function'){
       //requestSendServer.open('POST', '%25ZWeb.RunJob.cls', true);
       requestSendServer.open('POST', '/*(   w $SYSTEM.CSP.GetDefaultApp($ZU(5))_"/"_$zcvt("%ZWeb.RunJob","O","URL")_".cls"   )*/', true);
  
       requestSendServer.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
              if (typeof FunCallBack === 'function'){
                    FunCallBack(this.responseText);
              }
           };
       };
       requestSendServer.send(JSON.stringify(arr));  
       return requestSendServer
    }else{
      // requestSendServer.open('POST', '%25ZWeb.RunJob.cls', false);
      requestSendServer.open('POST', '/*( w $SYSTEM.CSP.GetDefaultApp($ZU(5))_"/"_$zcvt("%ZWeb.RunJob","O","URL")_".cls")*/', false);
    
       requestSendServer.send(JSON.stringify(arr));  
       if (requestSendServer.status !== 200) {
           return {"error":requestSendServer.status}
       }
       return requestSendServer.responseText;
    }
]]></Implementation>
</Method>

<Method name="readJSFunctionFromCacheClass">
<Description><![CDATA[
<pre>

Варианты параметров классов 
 1) [ Language = cache, WebMethod ]
 2) [ Language = javascript, WebMethod ]

Пример классов , которые будут интерпритированы в JS функции:
    ClassMethod test2()as %String [ Language = cache, WebMethod ]{ zw  q ""}
    ClientMethod test3() [ Language = javascript, WebMethod ]{    alert('test3()');}
    Property cspXMLHttp As %String [ ServerOnly = 1 ];
    Property cspUseGetMethod As %Boolean [ InitialExpression = 0, ServerOnly = 1 ];
    Property cspMozilla As %Boolean [ InitialExpression = "nill", ServerOnly = 1 ];
   
</pre>
 <h2>Переписать  %Library.ClassDefinition на  <h2>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ParentClassName="",MethodName="",DrawDescript=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
     s onEventFun=",onblur,onerror,onfocus,onload,onresize,onscroll,onbeforeunload,onhashchange,onlanguagechange,onmessage,onoffline,ononline,onpagehide,onpageshow,onpopstate,onrejectionhandled,onstorage,onunhandledrejection,onunload,onabort,oncancel,oncanplay,oncanplaythrough,onchange,onclick,onclose,oncontextmenu,oncuechange,ondblclick,ondrag,ondragend,ondragenter,ondragleave,ondragover,ondragstart,ondrop,ondurationchange,onemptied,onended,oninput,oninvalid,onkeydown,onkeypress,onkeyup,onloadeddata,onloadedmetadata,onloadstart,onmousedown,onmouseenter,onmouseleave,onmousemove,onmouseout,onmouseover,onmouseup,onmousewheel,onpause,onplay,onplaying,onprogress,onratechange,onreset,onseeked,onseeking,onselect,onshow,onstalled,onsubmit,onsuspend,ontimeupdate,ontoggle,onvolumechange,onwaiting,onauxclick,ongotpointercapture,onlostpointercapture,onpointercancel,onpointerdown,onpointerenter,onpointerleave,onpointermove,onpointerout,onpointerover,onpointerup,onbeforecopy,onbeforecut,onbeforepaste,oncopy,oncut,onpaste,onsearch,onselectstart,onwheel,onwebkitfullscreenchange,onwebkitfullscreenerror"
     if $d(%NameSpaceDefault){
	     &js</*  %NameSpaceDefault: #(%NameSpaceDefault)#   */>
     }
     if $zObjClassMethod("%CompiledClass","%ExistsId",ParentClassName)'=1 {
	  &js</*
         Класс #(ParentClassName)# не найден  	  
	  */>
     }
     // s ClassOref=##class(%Dictionary.ClassDefinition).%New(ParentClassName)
     
     s ClassOref=##class(%ClassDefinition).%OpenId(ParentClassName)
     if ClassOref {
       s ConstructMethod=$p(ParentClassName,".",$l(ParentClassName,"."))
       s count=ClassOref.Properties.Count() 
       for i=1:1:count {
            s nam=ClassOref.Properties.GetAt(i).Name
            continue:'$d(^oddDEF(ParentClassName,"a",nam,57))
            continue:^oddDEF(ParentClassName,"a",nam,57)'=1
            w "  var "_ClassOref.Properties.GetAt(i).Name_" "
            if $d(^oddDEF(ParentClassName,"a",nam,31)) {
                 s val=^oddDEF(ParentClassName,"a",nam,31)
                 if val="""null""" w "=null;"_$c(13,10)  continue
                 s typ=""
                 if $d(^oddDEF(ParentClassName,"a",nam,5)) {
                    s typ=^oddDEF(ParentClassName,"a",nam,5)
                    if $e(typ,1,1)="%",$l(typ,".")=1 {
                       s typ=$REPLACE(typ,"%","%Library.")
                    }
                 }   
                 if typ="" {
                     if $l(typ ," ")=1 { w "="_$e(val,2,$l(val)-1)_";"_$c(13,10)  continue }
                    try {   x "w "_val   }catch(e){  w "="_$e(val,2,$l(val)-1)_";"_$c(13,10)  continue }
                 }
                 
                 if typ="%Library.Boolean" {
                      if $e(val,1,1)="""" {
                         w "=" 
                         try {   x "w "_val   }catch(e){  if +val=1 { w "=true"  }else     { w "=false" }   }
                      }else {
                        if val=1 { w "=true"  }else     { w "=false" }
                      }
                 }elseif  typ="%Library.Integer" {
                     if $e(val,1,1)="""" {
                         w "=" 
                         try {   x "w "_val   }catch(e){  s val=+val  w val }
                      } else {
                          s val=+val  w val
                      } 
                 }else{
	                 
                     if $e(val,1,1)'="""" {
                           w "=""" 
                           try {   x "w "_val   }catch(e){  w val   }
                           w """"
                      }else {
                         w "="_val
                      } 
                 }
            }
            w ";"_$c(13,10) 
       }
       s ConstructMethodIndex=""
       s count=ClassOref.Methods.Count()
       for i=1:1:count {
            if (MethodName=""){
               continue:$l(ClassOref.Methods.GetAt(i).Name,"OnPage")'=1
               continue:ClassOref.Methods.GetAt(i).Name="OnPreHTTP"
               continue:ClassOref.Methods.GetAt(i).Name="OnPostHTTP"
               continue:ClassOref.Methods.GetAt(i).Name="getLibOne"
               continue:ClassOref.Methods.GetAt(i).Name="GetJSMethodFromClientMethod"
               continue:ClassOref.Methods.GetAt(i).Name="readJSFunctionFromCacheClass"
            }else{
                continue:ClassOref.Methods.GetAt(i).Name'=MethodName   
            }
           /// [ ServerOnly = 1 ]
           // continue:'$d(^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,59))
           // continue:^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,59)'=1
           
           /// [ WebMethod ]
           continue:'$d(^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,51))
           continue:^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,51)'=1
          
          if $ZCVT(ClassOref.Methods.GetAt(i).Name,"L")=$ZCVT(ConstructMethod,"L"){
             s ConstructMethodIndex=i
             continue    
          }
          
          if DrawDescript=1 {
             if $l(ClassOref.Methods.GetAt(i).Description)>0,ParentClassName'=##this{
                w !,"/*",!
                w $replace(ClassOref.Methods.GetAt(i).Description,"*/","-/-")
                w !,"*/"
             }
          }
          // Получаем JS представление Cache клиент метода
           if ClassOref.Methods.GetAt(i).Language="javascript" {
               w !,"var "_ClassOref.Methods.GetAt(i).Name_"=function("
               s param=ClassOref.Methods.GetAt(i).FormalSpec
               for ind=1:1:$l(param,","){
                   s subParam=$p(param,",",ind)
                   s subParam=$p(subParam,":",1)
                   s subParam=$p(subParam,"=",1)
                   w:ind'=1 ","
                   w subParam
               }
               w "){",!
                 d ..ExecFrag(ClassOref.Methods.GetAt(i).Code,"/*(",")*/")
                 // w ClassOref.Methods.GetAt(i).Code
                 w !,"};"
                
            }
           // Получаем JS представление Cache класс метода
           if ClassOref.Methods.GetAt(i).Language="cache" {
                   w !,"var "_ClassOref.Methods.GetAt(i).Name_"=function(){",!
                   ; if $d(^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,42)){ w "return "}
                   s WEVENT=$$$cspEncode(%session.Key,$lb(ParentClassName_"."_ClassOref.Methods.GetAt(i).Name))
                   w "   return cspHttpServerMethod('"_WEVENT_"',arguments);"
                   w !,"};"
           }
                
         }
         // После отрисовки функций, создаем конструктор( если конечно он встретился ранее)
         if ConstructMethodIndex'="" {
           s i=ConstructMethodIndex
           if ClassOref.Methods.GetAt(i).Language="javascript" {
              d ..ExecFrag(ClassOref.Methods.GetAt(i).Code,"/*(",")*/")
           }
           if ClassOref.Methods.GetAt(i).Language="cache" {
              s WEVENT=$$$cspEncode(%session.Key,$lb(ParentClassName_"."_ClassOref.Methods.GetAt(i).Name))
              w " cspHttpServerMethod('"_WEVENT_"',arguments);"
           }
         }
       }
       q ""
]]></Implementation>
</Method>

<Method name="ExecFrag">
<Description>
Метод разбики исходного текста на Cache` код и HTML текст</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End=""</FormalSpec>
<Implementation><![CDATA[
     q:SrcCode=""
     q:Beg=""
     q:End=""
     for ind=1:1:$l(SrcCode,End){
        s tmp=$p(SrcCode,End,ind)
        s Html=$p(tmp,Beg,1)
        s Code=$p(tmp,Beg,2)
        w Html
        TRY {
           x Code
        } CATCH ErrorHandle { 
           zw ErrorHandle 
        }
     }
]]></Implementation>
</Method>

<Method name="readJSObjectFromCacheClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>ParentClassName="",MethodName="",DrawDescript=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
     s onEventFun=",onblur,onerror,onfocus,onload,onresize,onscroll,onbeforeunload,onhashchange,onlanguagechange,onmessage,onoffline,ononline,onpagehide,onpageshow,onpopstate,onrejectionhandled,onstorage,onunhandledrejection,onunload,onabort,oncancel,oncanplay,oncanplaythrough,onchange,onclick,onclose,oncontextmenu,oncuechange,ondblclick,ondrag,ondragend,ondragenter,ondragleave,ondragover,ondragstart,ondrop,ondurationchange,onemptied,onended,oninput,oninvalid,onkeydown,onkeypress,onkeyup,onloadeddata,onloadedmetadata,onloadstart,onmousedown,onmouseenter,onmouseleave,onmousemove,onmouseout,onmouseover,onmouseup,onmousewheel,onpause,onplay,onplaying,onprogress,onratechange,onreset,onseeked,onseeking,onselect,onshow,onstalled,onsubmit,onsuspend,ontimeupdate,ontoggle,onvolumechange,onwaiting,onauxclick,ongotpointercapture,onlostpointercapture,onpointercancel,onpointerdown,onpointerenter,onpointerleave,onpointermove,onpointerout,onpointerover,onpointerup,onbeforecopy,onbeforecut,onbeforepaste,oncopy,oncut,onpaste,onsearch,onselectstart,onwheel,onwebkitfullscreenchange,onwebkitfullscreenerror"
     if $zObjClassMethod("%CompiledClass","%ExistsId",ParentClassName)'=1 {
	  &js</*
         Класс #(ParentClassName)# не найден  	  
	  */>
     }
     // s ClassOref=##class(%Dictionary.ClassDefinition).%New(ParentClassName)
     
     s ClassOref=##class(%ClassDefinition).%OpenId(ParentClassName)
     if ClassOref {
       s ConstructMethod=$p(ParentClassName,".",$l(ParentClassName,"."))
       s tmp=""
       w "var"
       for ind=1:1:$l(ParentClassName,"."){
	      s:tmp'="" tmp=tmp_"."
	      s tmp=tmp_$p(ParentClassName,".",ind)
	      &js< #(tmp)# = {}; >    
       }
       
       s count=ClassOref.Properties.Count() 
       for i=1:1:count {
            s nam=ClassOref.Properties.GetAt(i).Name
            continue:'$d(^oddDEF(ParentClassName,"a",nam,57))
            continue:^oddDEF(ParentClassName,"a",nam,57)'=1
            w ParentClassName_"."_ClassOref.Properties.GetAt(i).Name_" "
            if $d(^oddDEF(ParentClassName,"a",nam,31)) {
                 s val=^oddDEF(ParentClassName,"a",nam,31)
                 if val="""null""" w "=null;"_$c(13,10)  continue
                 s typ=""
                 if $d(^oddDEF(ParentClassName,"a",nam,5)) {
                    s typ=^oddDEF(ParentClassName,"a",nam,5)
                    if $e(typ,1,1)="%",$l(typ,".")=1 {
                       s typ=$REPLACE(typ,"%","%Library.")
                    }
                 }   
                 if typ="" {
                     if $l(typ ," ")=1 { w "="_$e(val,2,$l(val)-1)_";"_$c(13,10)  continue }
                    try {   x "w "_val   }catch(e){  w "="_$e(val,2,$l(val)-1)_";"_$c(13,10)  continue }
                 }
                 
                 if typ="%Library.Boolean" {
                      if $e(val,1,1)="""" {
                         w "=" 
                         try {   x "w "_val   }catch(e){  if +val=1 { w "=true"  }else     { w "=false" }   }
                      }else {
                        if val=1 { w "=true"  }else     { w "=false" }
                      }
                 }elseif  typ="%Library.Integer" {
                     if $e(val,1,1)="""" {
                         w "=" 
                         try {   x "w "_val   }catch(e){  s val=+val  w val }
                      } else {
                          s val=+val  w val
                      } 
                 }else{
	                 
                     if $e(val,1,1)'="""" {
                           w "=""" 
                           try {   x "w "_val   }catch(e){  w val   }
                           w """"
                      }else {
                         w "="_val
                      } 
                 }
            }
            w ";"_$c(13,10) 
       }
       s ConstructMethodIndex=""
       s count=ClassOref.Methods.Count()
       for i=1:1:count {
            if (MethodName=""){
               continue:$l(ClassOref.Methods.GetAt(i).Name,"OnPage")'=1
               continue:ClassOref.Methods.GetAt(i).Name="OnPreHTTP"
               continue:ClassOref.Methods.GetAt(i).Name="OnPostHTTP"
               continue:ClassOref.Methods.GetAt(i).Name="getLibOne"
               continue:ClassOref.Methods.GetAt(i).Name="GetJSMethodFromClientMethod"
               continue:ClassOref.Methods.GetAt(i).Name="readJSFunctionFromCacheClass"
            }else{
                continue:ClassOref.Methods.GetAt(i).Name'=MethodName   
            }
           /// [ ServerOnly = 1 ]
           // continue:'$d(^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,59))
           // continue:^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,59)'=1
           
           /// [ WebMethod ]
           continue:'$d(^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,51))
           continue:^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,51)'=1
          
          if $ZCVT(ClassOref.Methods.GetAt(i).Name,"L")=$ZCVT(ConstructMethod,"L"){
             s ConstructMethodIndex=i
             continue    
          }
          
          if DrawDescript=1 {
             if $l(ClassOref.Methods.GetAt(i).Description)>0,ParentClassName'=##this{
                w !,"/*",!
                w $replace(ClassOref.Methods.GetAt(i).Description,"*/","-/-")
                w !,"*/"
             }
          }
          // Получаем JS представление Cache клиент метода
           if ClassOref.Methods.GetAt(i).Language="javascript" {
               w !,ParentClassName_"."_ClassOref.Methods.GetAt(i).Name_"=function("
               s param=ClassOref.Methods.GetAt(i).FormalSpec
               for ind=1:1:$l(param,","){
                   s subParam=$p(param,",",ind)
                   s subParam=$p(subParam,":",1)
                   s subParam=$p(subParam,"=",1)
                   w:ind'=1 ","
                   w subParam
               }
               w "){",!
                 d ..ExecFrag(ClassOref.Methods.GetAt(i).Code,"/*(",")*/")
                 // w ClassOref.Methods.GetAt(i).Code
                 w !,"};"
                
            }
           // Получаем JS представление Cache класс метода
           if ClassOref.Methods.GetAt(i).Language="cache" {
                   w !,ParentClassName_"."_ClassOref.Methods.GetAt(i).Name_"=function(){",!
                   ; if $d(^oddDEF(ParentClassName,"m",ClassOref.Methods.GetAt(i).Name,42)){ w "return "}
                   s WEVENT=$$$cspEncode(%session.Key,$lb(ParentClassName_"."_ClassOref.Methods.GetAt(i).Name))
                   w "   return cspHttpServerMethod('"_WEVENT_"',arguments);"
                   w !,"};"
           }
                
         }
         // После отрисовки функций, создаем конструктор( если конечно он встретился ранее)
         if ConstructMethodIndex'="" {
           s i=ConstructMethodIndex
           if ClassOref.Methods.GetAt(i).Language="javascript" {
              d ..ExecFrag(ClassOref.Methods.GetAt(i).Code,"/*(",")*/")
           }
           if ClassOref.Methods.GetAt(i).Language="cache" {
              s WEVENT=$$$cspEncode(%session.Key,$lb(ParentClassName_"."_ClassOref.Methods.GetAt(i).Name))
              w " cspHttpServerMethod('"_WEVENT_"',arguments);"
           }
         }
       }
       q ""
]]></Implementation>
</Method>
</Class>


<Class name="%ZWeb.Server">
<Description><![CDATA[
<example>
  d ##class(%ZWeb.Server).Start(80  , "D:\www","csp/user/SMWrap.main.cls" )
  d ##class(%ZWeb.Server).Start(80  , "d:\sirena\env","index.html" )
  d ##class(%ZWeb.Server).Stop(80)
  d ##class(%ZWeb.Server).Start(8228  , "C:\AppServ\www","DUBROVINO","index.htm" )
  d ##class(%ZWeb.Server).Start(6010  , "C:\AppServ\www","index.html" )
  d ##class(%ZWeb.Server).Start(6010  , "C:\AppCacheSrv\www","index.html","user" )
  d ##class(%ZWeb.Server).Start(6010  , "D:\sirena\env","sirena/index.csp","sirena" )
  d ##class(%ZWeb.Server).Start(6010  , "E:\!5autoexport\myasnikovia\www","index.html","sirena" )
  d ##class(%ZWeb.Server).Stop()
</example>]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64943,27625.302244</TimeChanged>
<TimeCreated>64772,22000.244656</TimeCreated>

<Method name="ExportUDL">
<Description>
d ##class(%ZWeb.Server).ExportUDL()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>path=""</FormalSpec>
<Implementation><![CDATA[
   if $l(path)=0  d $system.OBJ.ExportUDL(##this_".CLS", "C:\TMP\"_##this_".CLS","/diffexport")
   e  d $system.OBJ.ExportUDL(##this_".CLS", path,"/diffexport")
]]></Implementation>
</Method>

<Property name="Port">
<Type>%String</Type>
<InitialExpression>6010</InitialExpression>
</Property>

<Property name="Dir">
<Type>%String</Type>
<InitialExpression>"C:\AppServ\www"</InitialExpression>
</Property>

<Property name="Page">
<Type>%String</Type>
<InitialExpression>"index.html"</InitialExpression>
</Property>

<Property name="NameSpace">
<Type>%String</Type>
<InitialExpression>"user"</InitialExpression>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   d ##class(%ZWeb.Server).Start(..Port  , ..Dir,..NameSpace,..Page )    
   quit $$$OK
]]></Implementation>
</Method>

<Method name="Stop">
<Description>
Остановить работу сервера</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port:%Integer=6010</FormalSpec>
<Implementation><![CDATA[
   s port=$g(port)
    if $l(port)>0 d
    . s ^%ZWebServerKill(port)=1
    .  S httprequest=##class(%Net.HttpRequest).%New()
    .  s httprequest.Server="127.0.0.1"
    .  s httprequest.Port=port
    .  s httprequest.Timeout=1
    .  d httprequest.Get("/")
    .  s httprequest=""
    . h 1
    . w !,"Server "_port_" stoped"
    e  d
    . s port=""
    . q:$d(^%ZWebServerCfg)
    . f  s port=$o(^%ZWebServerCfg(port))  q:port=""   d
    . .  s ^%ZWebServerKill(port)=1
    . .   S httprequest=##class(%Net.HttpRequest).%New()
    . .   s httprequest.Server="127.0.0.1"
    . .   s httprequest.Port=port
    . .   s httprequest.Timeout=1
    . .   d httprequest.Get("/")
    . .   s httprequest=""
    . .  h 1
    . .  w !,"Server "_port_" stoped"
    q
]]></Implementation>
</Method>

<Method name="Start">
<Description>
 d ##class(%ZWeb.Server).Start(9229  , "C:\AppServ\www","USER","index.html" , "main")

Запустить работу сервера</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port:%Integer=6010,pathHost:%String="C:\AppServ\www",startPage:%String="index.html",NameSpace=$ZU(5)</FormalSpec>
<Implementation><![CDATA[
     s NameSpaceDefault=NameSpace
     s methodDefault = "OnPage"
     k ^%ZWebServerKill(port)
     ; 63991
     w !,"Автор: Мясников Иван Александрович"
     w !,"Email: Miacom@mail.ru"
     w !
     ; if $p($h,",",1)>(63991+60+60+60) w !,"Льготный период использования закончился. Обратитесь к автору за продлением.",!
     s port = $G(port)  
     s TimeOut=3200
     s pathHost=$g(pathHost)
     s NameSpaceDefault=$g(NameSpaceDefault)
     s startPage=$g(startPage)
     s methodDefault=$g(methodDefault )
          if $d(^%ZWebServerCfg(port)) d
          .    d ..Stop(port)
          .    k ^%ZWebServerCfg(port)
          s ^%ZWebServerCfg(port)=$lb(port,TimeOut,pathHost,NameSpaceDefault, startPage,methodDefault)
     s cmd="cmd /c  start ""explorer.exe""  ""http://127.0.0.1:"_port_"/"_startPage_""""
     ; d $zf(-1,cmd,1)
     job ..startJob(port)
     w !,"Start server:"_port
     q
]]></Implementation>
</Method>

<Method name="startJob">
<Description>
Работа сокет сервера в паралельном потоке.
Ожидание подключения и создание обработчика клиента в паралельном потоке</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port</FormalSpec>
<Implementation><![CDATA[
     s port = $lg(^%ZWebServerCfg(port),1)  
     SET dev="|TCP|1"
     OPEN dev:(:port:"MA"):200
     s inData=""
     s indSrv=0
     s isEnd=0
     k ^%ZWebServerKill(port)
     For  USE dev  READ inData q:isEnd=1  Do:$T
     .  if $d(^%ZWebServerKill(port))   s isEnd=1
     .  USE dev  
     .  Job ..childVar(port):(:17::)  ; Concurrent server bit is on
     .  If $ZCHILD=0 w " Server can't create new JOB!"
     Close dev   
     k ^%ZWebServerKill(port)
     Quit
]]></Implementation>
</Method>

<Method name="TestHacker">
<ClassMethod>1</ClassMethod>
<FormalSpec>zapros=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s zapros=$ZCVT(zapros,"L")
	q:$l(zapros,".php")>1 1
	q:$l(zapros,".cgi")>1 1
	q:$l(zapros,".jsp")>1 1
	q:$l(zapros,".action")>1 1
	q:$l(zapros,"mstshash=Administr")>1 1
	q:$l(zapros,"login.action")>1 1
	q:$l(zapros,"index.action")>1 1
	q:$l(zapros,"index.jsp")>1 1
	; q:$l(zapros,"robots.txt")>1 1
	q:$l(zapros,"cgi/common.cgi")>1 1
	q:$l(zapros,"command.php")>1 1
	q:$l(zapros,"HNAP1/")>1 1
	q:$l(zapros,"script")>1 1
    q:$l(zapros,"sqlite/main.php")>1 1
    q:$l(zapros,"sqlitemanager/main.php")>1 1
    q:$l(zapros,"SQLite/main.php")>1 1
	q:$l(zapros,"main.php")>1 1
	q:$l(zapros,"test/sqlite/SQLiteManager-1.2.0/SQLiteManager-1.2.0/main.php")>1 1
	q:$l(zapros,"SQLiteManager-1.2.4/main.php")>1 1
	q:$l(zapros,"agSearch/SQlite/main.php")>1 1
	q:$l(zapros,"phpMyAdmin/scripts/setup.php")>1 1
	q:$l(zapros,"pma/scripts/setup.php")>1 1
	q:$l(zapros,"myadmin/scripts/setup.php")>1 1
	q:$l(zapros,"GET /sftp-config.json")>1 1
	q:$l(zapros,"Cookie: mstshash=Administr")>1 1
	; q:$l(zapros,"")>1 1
	q 0
]]></Implementation>
</Method>

<Method name="Log">
<ClassMethod>1</ClassMethod>
<FormalSpec>ipOne,val</FormalSpec>
<Implementation><![CDATA[
  if $d(^%debug(ipOne)) k:^%debug(ipOne)>10000 ^%debug(ipOne)
  s:'$d(^%debug(ipOne)) ^%debug(ipOne)=1
  s ^%debug(ipOne)=^%debug(ipOne)+1,^%debug(ipOne,^%debug(ipOne))=val
  q
]]></Implementation>
</Method>

<Method name="childVar">
<Description>

Процедура обработки клиентского запроса
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port</FormalSpec>
<Implementation><![CDATA[

   s TimeOut=$lg(^%ZWebServerCfg(port),2)
   s pathHost=$lg(^%ZWebServerCfg(port),3)
   s %NameSpaceDefault=$lg(^%ZWebServerCfg(port),4)
   s startPage=$lg(^%ZWebServerCfg(port),5)
   s methodDefault=$lg(^%ZWebServerCfg(port),6)
   zn "%SYS" ; переключаем область имен
   s numPac=0
   s isCloseChaild=0 
   s SocketTempIndex=0
   USE $ZUTIL(53):(::"M")
   s I=$ZU(111,0)
   s ipOne=$A(I,1)_"."_$A(I,2)_"."_$A(I,3)_"."_$A(I,4)
   s ip=ipOne_":"_($A(I,5)*256+$A(I,6))
   ; s ip=$ZU(67, 15, $job)
   s countEnter=0
   s numPack=0
   s isEndTitle=0 
   ; Инициализируем переменную для работы в CSP классах
   s %request=##class(%CSP.Request).%New()
   s %response=##class(%CSP.Response).%New()
   Do %response.SetHeader("Content-Type","text/html")   
   d %request.InsertCgiEnv("Cache version",$$GetVersion^%apiOBJ())
   d %request.InsertCgiEnv("Cache port",port)
   d %request.InsertCgiEnv("LOCAL_PATH",pathHost)
   d %request.InsertCgiEnv("QUERY_PAGE",startPage)
   d %request.InsertCgiEnv("CLIENT_IP",ip)
   d %request.InsertCgiEnv("REMOTE_ADDR",$ZU(67, 15, $job))
   d %request.InsertCgiEnv("CONTENT_TYP","html") 
   d %request.InsertCgiEnv( "SERVER_NAME",$zu(110))
   ; s %response.CharSet="UTF8"
   ; s %response.CharSet="CP1251"
   s %SYSLOG=1
   s %CSPsc=1
   ; Set %session.AppTimeout = 3600 
   s isTerminal=0
   s isWebSocket=0
   s isWebSocketKey=""
   s WebSocketVer=-1
   s FallLoad=0
   s %FallLoadRunJob=0
   s DebInf=""
   s RefererUrl=""
   For  Q:((isCloseChaild=1)||($T=1)||(isTerminal=1) )  d
   .  If $T=1 s isCloseChaild=1 
   .   // Если терминальный запрос, тогда уничтожаем этот процесс
   .   // if isTerminal=1 d $zu(4,$job)
   .  if isEndTitle=0 {
   .     S dev=$ZUTIL(53)  
   .     USE dev:(::"M")  
   .     READ inData:1
   .     s DebInf=DebInf_$c(13,10)_inData
   .     ; s ^debug($job,numPack)=inData
   .     s numPack=numPack+1
   .        ; Если в первой строке нет слов GET или POST , тогда запрос произведен из терминала
   .        if numPack=1  if $l(inData,"GET /")=1  ,$l(inData,"POST /")=1    s isTerminal=1 q
   .        ; Меняем кодировку входных данных(разкоментируется при необходимости, в зовисимости от версии cache')
   .        ; s inData= $ZCVT(inData,"I","URL")
   .        ; s inData=$zcvt($zcvt(inData,"I","URL"),"I","UTF8")
   .        ; s inData= $ZCVT(inData,"I","UTF8")
   .
   .      if numPack=1 d ; обработка первой строки HTML запроса
   .      .   if $l(inData,"GET /")=2   d 
   .      .   .  s zapros=$p(inData,"GET /",2)
   .      .   .  d %request.InsertCgiEnv("REQUEST_METHOD","GET")
   .      .   .  s zapros=$p(zapros," HTTP/",1)   , isGet=1 ,TypeZapros="GET"  
   .      .   if $l(inData,"POST /")=2  d 
   .      .   .  s zapros=$p(inData,"POST /",2)   
   .      .   .  d %request.InsertCgiEnv("REQUEST_METHOD","POST")
   .      .   .  s zapros=$p(zapros," HTTP/",1)   , isPost=1 ,TypeZapros="POST" 
   .      .  
   .      .   if $l(zapros)=0 s zapros=startPage
   .      .   if $l($p(zapros,"?",1))=0   s zapros=startPage_"/"_zapros
   .      .    ; если GET запрос и присутствует один символ "?" тогда заменяем его на "/?"
   .      .   if $l(zapros,"/?")=1 , $l(zapros,"?")'=1 , $e(zapros, $l( $p(zapros,"?",1)),$l( $p(zapros,"?",1)))'="/"   s zapros=$e(zapros,1,$l( $p(zapros,"?",1)))_"/?"_$e(zapros,$l( $p(zapros,"?",1))+2,$l(zapros))
   .      .
   .      .       if $l(zapros,"csp/broker/cspxmlhttp.js")=2 {
   .      .   	      s FallLoad=1
   .      .        }
   .      .        if $l(zapros,"csp/broker/cspbroker.js")=2 {
   .      .           s %FallLoadRunJob=1
   .      .           s zapros=$replace(zapros,"cspbroker.js", "%25ZWeb.RunJob.cls")
   .      .        }
   .      .   
   .      .   Do %request.InsertCgiEnv("PATH_TRANSLATED",$tr(pathHost_"/"_zapros,"/","\"))
   .      .   Do %request.InsertCgiEnv("QUERY_STRING",zapros)
   .      .   Do %request.InsertCgiEnv("SERVER_ADDR",$p(ip,":",1))   
   .      .   Do %request.InsertCgiEnv("REMOTE_PORT",$p(ip,":",2))   
   .      .   Do %request.Set("clientip",ip) 
   .      .   Do:$l(zapros)=0 %request.InsertCgiEnv("REQUEST_URI",zapros)   
   .      .   q
   .   
   . 
   .     if $l(inData,":") >1 d
   .     .  s nam=$p(inData,": ",1)
   .     .  s val=$p(inData,": ",2)
   .     .  Do %request.Set(nam,val)    
   .     .  do %request.InsertCgiEnv($ZCVT(nam,"U"),val)
   .     .  if nam="Referer"   s RefererUrl=val ; d %request.InsertCgiEnv("HTTP_REFERER",val)
   .   
   .     ; проверяем наличие трех Enter (это признак окончания заголовка html запроса)
   .       if $l(inData)=0 s countEnter=countEnter+1
   .       if countEnter=2 s isEndTitle=1 
   .       if $l(inData)>0 s countEnter=0
   .       q
   .  }
   .
   .  ; читаем тело POST запроса 
   .  if $l(%request.GetCgiEnv("CONTENT-LENGTH"))'=0 {
   .       s lenPost=%request.GetCgiEnv("CONTENT-LENGTH")
   .       d %request.InsertCgiEnv("CONTENT_LENGTH",lenPost)
   .       ; s BodyPost=##class(%CSP.BinaryStream).%New()
   .       ; s %request.Content=##class(%CSP.BinaryStream).%New()
   .       Set %request.Content=##class(%GlobalCharacterStream).%New()
   .       s indPostTeloZaprosa=0
   .       s isCloseChaildPost=0
   .       ;  while (isCloseChaildPost=0&&lenPost>0) {
   .       while (lenPost>0) {  
   .          If $T=1 s isCloseChaildPost=1
   .          USE $ZUTIL(53):(::"M")  
   .          READ inData:1 ; 0.01  
   .          d ..Log(ipOne,inData)
   .          s lenPost=lenPost-$l(inData)
   .          s indPostTeloZaprosa=indPostTeloZaprosa+1
   .          s ^%WebPost($JOB,indPostTeloZaprosa)=inData
   .          ; s ^debug("POST",indPostTeloZaprosa)=inData
   .          ; s ^debug("POST",indPostTeloZaprosa,0)=$l(inData)
   .          d %request.Content.Write(inData)
   .          ; s inData= $ZCVT(inData,"I","URL")
   .          ; Разбираем параметры из первой строки тела post запроса
   .          if $l(inData,"=")>1 {
   .          for  {
   .               s nam=$e(inData,1,$l($p(inData,"=",1)))
   .               s inData=$e(inData,$l(nam)+1,$l(inData))
   .               s val=$e(inData,2,$l($p(inData,"&",1)))
   .               s inData=$e(inData,$l(val)+3,$l(inData))
   .               if $l(val)>32760 {
   .                  s obj=##class(%CSP.CharacterStream).%New()
   .                  d obj.Write(val)
   .                  Do %request.Set(nam,obj)
   .               } else {
   .                  Do %request.Set(nam,val)
   .               }
   .               q:$l(inData)=0
   .               q:$l(inData,"=")=1
   .            }
   .          }
   .       }
   .       d %request.Content.Rewind()
   .       ;   for  {
   .       ;     q:%request.Content.AtEnd;
   .       ;     s ^deb=%request.Content.Read(32000)
   .       ;   }
   .       s isCloseChaild=1  
   .       q
   .    }
   .    s isCloseChaild=1 
   .    q
   q:ip=""
 
  if RefererUrl'="" {
	    d %request.InsertCgiEnv("HTTP_REFERER",RefererUrl)
  }
  
  ; d ..Log(ipOne,DebInf)
      
      
      
   if FallLoad=1{
	   w "HTTP/1.1 200",$c(13,10)
       w "Content-type: application/x-javascript",$c(13,10)
       w "Connection: close"_$c(13,10,13,10)
	   d ..clsConnect() q   
   }
   
   
   ;  if '$d(^iplist(ipOne)) { s ^iplist(ipOne)=0}
   ;  s ^iplist(ipOne)=^iplist(ipOne)+1
   ;  s ^iplist(ipOne,^iplist(ipOne),$zd(+$h,4),$zt($p($h,",",2)))=DebInf
   /// зашита от злоумышлеников
  // if ..TestHacker(DebInf)=1
  // {
  //     w "HTTP/1.1 200",$c(13,10)
  //     w "Content-type: text/plain",$c(13,10)
  //     w "Connection: close"_$c(13,10,13,10)
  //	   w "Ваш IP адрес "_$p(%request.CgiEnvs("CLIENT_IP"),":",1)
  //	   d ..clsConnect() q   
  // }
   k DebInf
   ;
   ; обрабатываем терминальный Socket запрос 
   if isTerminal=1 {
     ; s ^debug($job,numPack)=inData
     ; For  Q:((isCloseChaild=1)||($T=1)||(isEndTitle=1) )  d
     ; .    If $T=1 s isCloseChaild=1 k ^debug($job) q
     ; .    USE $ZUTIL(53):(::"M")  
     ; .    READ inData
     ; .    if inData="exit" s isCloseChaild=1  k ^debug($job) q
     ; .    s numPack=numPack+1
     ; .    s ^debug($job,numPack)=inData
   }
  ;  если обрабатываем  терминальный запрос , тогда выходим
    q:isTerminal=1
 
 
  ; 
  ; USE $ZUTIL(53):(::"M") w "HTTP/1.1 200",$c(13,10),"Content-type: text/plain","",$c(13,10),"Connection: close"_$c(13,10,13,10)
  ; Разбираем Куки в параметры
   d ..ParseСookie()
  ; Разбираем параметры из URL строки 
   d ..ParseParam(zapros)
  ; Инициируем сесию ---
    d ..InitSession()
   
   if ..GerUrlContent(zapros)=1 q
   
   
   s %LastIO=$IO  u %LastIO::("^"_$zn) d ##class(%Device).ReDirectIO($$$YES)   
     ; 
     ;  Запрашиваемый ресурс не найден
        USE $ZUTIL(53):(::"M") w "HTTP/1.1 400",$c(13,10)
        w "Content-type: text/plain"_"; charset="_%response.CharSet,$c(13,10)
        w "Connection: close"_$c(13,10,13,10)
        w !,"=================================" 
        w !,"=      Ресурс не найден        ="  
        w !,"=================================" 
        w !,!,%request.CgiEnvs("QUERY_PAGE")
       ; w !, PathFileLocal
        /*
        zw %request
        w !,!
        zw %response
        w !,!
        zw %session
        w !,!
        w %request.GetCgiEnv("QUERY_PAGE"),!
        w PathFileLocal,!
        w PathFile,!
        w !,NameLowerCase
        w !,NameSpace
        w !,Path
        w !,NameLowerCase
        w !,DispatchClass 
        w !,"OK"
        */
       d ##class(%Device).ReDirectIO($$$NO)  u %LastIO
       s ind="" 
       for {
	      s ind=$o(^||tmp(ind))   
	      q:ind=""
	      w $zcvt(^||tmp(ind),"o","CP1251")
        }
        k ^||tmp        
        d ..clsConnect()
        q
   
   
   
   q
]]></Implementation>
</Method>

<Method name="GerUrlContent">
<ClassMethod>1</ClassMethod>
<FormalSpec>zapros</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[

  ;
  ; Запоминаем расширение файла как тип содержимого
    s typ=$p(zapros ,".", $l(zapros,"."))
    s typ=$p(typ,"/?",1)
    s typ=$p(typ,"/",1)
    d %request.InsertCgiEnv("CONTENT_TYP",typ)
    ;  Если етсьпараметр "typ" тогда меняем тип содержимого
       if $l(%request.Get("typ",""))>0  d %request.InsertCgiEnv("CONTENT_TYP",%request.Get("typ","")) 
  
     ; Выводим содержимое из каталога
       s PathFileLocal=%request.CgiEnvs("PATH_TRANSLATED")
       if $d(%NameSpaceDefault){ 
         zn %NameSpaceDefault
       }else{
	     zn "%SYS"     
       }
       if ..GetRawHtml(PathFileLocal)=1  d ..clsConnect() q 1
       zn "%SYS"     ; ???
  
       if $l(%request.Get("namespace",""))'=0     d $zu(5,%request.Get("namespace","")) 
       
       ; Переключаем область имен по Вэб приложению
       d $zu(5,"%SYS") 
       ;  if %FallLoadRunJob=1 
       
       s app=$SYSTEM.CSP.GetAppName(%request.CgiEnvs("QUERY_PAGE"))
       s app="/"_$e(app,1,$l(app)-1)
       s SqlStrTmp=" select TOP 1 NameLowerCase,NameSpace,Path,NameLowerCase from Security.Applications where id=?"
       s SQLobj=##class(%SQL.Statement).%New()
       d SQLobj.%Prepare(SqlStrTmp)
       s DataSet=SQLobj.%Execute(app)
       s CountApp=0
       s Path=""
       while DataSet.%Next() { s CountApp=CountApp+1 s Path=DataSet.Path d $zu(5,DataSet.NameSpace) } 
       d %request.InsertCgiEnv("NAMESPACE",$zu(5)) ; Запоминаем имя области имен
       k SQLobj  
       if CountApp=0{
          USE $ZUTIL(53):(::"M") w "HTTP/1.1 400",$c(13,10)
          w "Content-type: text/plain"_"; charset="_%response.CharSet,$c(13,10)
          w "Connection: close"_$c(13,10,13,10)
          d ..clsConnect()
          q 1
       }
       ; -------------------------------------------------------------------
 
   ; Имя класса
   s ClassNameCsp=$SYSTEM.CSP.GetClassName("/"_%request.CgiEnvs("QUERY_PAGE"))
   if ..GetClsHtml(ClassNameCsp,0,0)=1    d ..clsConnect() q 1
  
   s ShortPage=$e(%request.CgiEnvs("QUERY_PAGE"),$l(app),$l(%request.CgiEnvs("QUERY_PAGE")))
   s PathFileLocal=$tr(Path_ShortPage,"/","\")
   if ..GetRawHtml(PathFileLocal)=1  d ..clsConnect() q 1
  
   q 0
]]></Implementation>
</Method>

<Method name="InitSession">
<Description>
инициализации сесии</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   s ip=%request.GetCgiEnv("CLIENT_IP")
   s zapros=%request.GetCgiEnv("QUERY_PAGE")
   s ipKey="%ZWeb.Server@"_$p(ip,":",1)
   ; Шифрование ключа (если конечно есть желание)
   ; s pass=ipKey,HashPwd="" 
   ; F ix489=1:1:7 { S HashPwd=HashPwd_$ZCRC(pass,ix489)}  
   ; s ipKey=HashPwd
   if ##class(%CSP.Session).%ExistsId(ipKey)=1{
       s %session=##class(%CSP.Session).%OpenId(ipKey)
   } else {
       s %session=##class(%CSP.Session).%New(ipKey)
   }
   s %session.ProcessId="|"_$zu(5)_"|"_zapros ;  "%ZWeb.Server: job"_$job_" "
   S %session.AppTimeout = %request.GetCgiEnv("TIME_OUT")
   ; d %session.Login("_SYSTEM")
    
   S %session.BrowserPlatform="Windows" 
   S %session.BrowserName = "Safari" 
   S %session.Namespace=%request.GetCgiEnv("NAMESPACE")
   S %session.UserAgent=%request.GetCgiEnv("HTTP_USER_AGENT","")
   d %session.%Save()
   s $LI(^%cspSession(ipKey),15)="%ZWeb.Server:"_$job ;  Приложение 
   s $LI(^%cspSession(ipKey),18)=$job        ;  ID процесса
   d %session.Unlock()
   d %session.%Save()
   q
]]></Implementation>
</Method>

<Method name="clsConnect">
<Description>
Закрытие соединения , очистка переменных (глобалов)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   ; Close dev  
   ; w *-1,!
   w *-2,$c(13,10)
   s isCloseChaild=0   
   k ^%WebPost($JOB)
   TRY { d %session.%Save()   } CATCH {}
   q
]]></Implementation>
</Method>

<Method name="ParseСookie">
<Description>

 разбираем Сookie</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   q:$l(%request.GetCgiEnv("COOKIE"))=0
   s arg=%request.GetCgiEnv("COOKIE")
   do %request.InsertCookie("COOKIE",arg)
   for ind=1:1:$l(arg,"; ")  d
   .    s tmp= $p(arg,"; ",1)
   .    if $l(tmp,"=")=2  d
   .    .  s ParamName=$p(tmp,"=",1)
   .    .  s zndch=$p(tmp,"=",2)
   .    e  d
   .    .   s ParamName=$p(tmp,"=",1)
   .    .   s zndch=""
   .    do %request.InsertCgiEnv(ParamName,zndch) 
   .    ; do %request.InsertCookie(ParamName,zndch)
   .    ; s ^deb($job,ParamName)=zndch
   s ParamName=""
]]></Implementation>
</Method>

<Method name="ParseParam">
<Description>

разбираем Параметры в строке URL запроса </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>zapros</FormalSpec>
<Implementation><![CDATA[
   ;
   ;  разбираем Параметры в строке запроса
   if $l(zapros)'=0 d
   .     s arg=zapros
   .     d %request.InsertCgiEnv("QUERY_PAGE",$p(arg,"/?",1))
   .     s %request.URL="/"_%request.CgiEnvs("QUERY_PAGE")
   .     d %request.InsertCgiEnv("PATH_TRANSLATED",$tr(%request.GetCgiEnv("LOCAL_PATH")_"/"_$p(arg,"/?",1),"/","\"))
   .     if $l(arg,"?")>1  d
   .     .  if $l($p(arg,"?",1))=0  d
   .     .  .  s arg="/"_arg
   .     s arg=$p(arg,"/?",2) 
   .     if $l(arg)>0  d
   .     .  s indParam=0
   .     .  for   q:arg=""   d
   .     .  .    s tmp= $p(arg,"&",1)
   .     .  .    if $l(tmp,"=")=2  d
   .     .  .    .  s ParamName=$p(tmp,"=",1)
   .     .  .    .  s zndch=$p(tmp,"=",2)
   .     .  .    e  d
   .     .  .    .  ; s indParam=indParam+1
   .     .  .    .  ; s ParamName="param"_indParam
   .     .  .    .  ; s zndch=$p(tmp,"=",1)
   .     .  .    .  s ParamName=$p(tmp,"=",1)
   .     .  .    .  s zndch=""
   .     .  .    s arg=$p(arg ,tmp,2)
   .     .  .    if $l(arg)>1 s arg=$e( arg,2,$l(arg))
   .     .  .    q:ParamName=""
   .     .  .    ; s ParamName = $ZCVT(ParamName,"L")
   .     .  .    ; d %request.Set(ParamName,zndch)
   .     .  .    Do %request.Set(ParamName,zndch) 
   .     .  .    ; d %request.InsertCgiEnv(ParamName,zndch)
   .     .  .    s ParamName=""
   q
]]></Implementation>
</Method>

<Method name="ContentType">
<Description>
Определить MIME тип по имени файла</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
     s rashirenie=$p(FileName ,".", $l(FileName,"."))
     s rashirenie= $ZCVT(rashirenie,"l")
     q:rashirenie="css" "text/css"
     q:rashirenie="js" "application/x-javascript"
     q:rashirenie="xml" "text/xml"
     q:rashirenie="dtd" "text/xml"
   ; -------------------------------------
     q:rashirenie="txt" "text/plain"
     q:rashirenie="inf" "text/plain"
     q:rashirenie="nfo" "text/plain"
     q:rashirenie="php" "text/plain"
   ; -------------------------------------
     q:rashirenie="html" "text/html"
     q:rashirenie="csp" "text/html"
     q:rashirenie="htm" "text/html"
     q:rashirenie="shtml" "text/html"
     q:rashirenie="shtm" "text/html"
     q:rashirenie="stm" "text/html"
     q:rashirenie="sht" "text/html"
     q:rashirenie="sht" "text/html"
     q:rashirenie="csp" "text/html"
     q:rashirenie="mac" "text/html"
     q:rashirenie="cls" "text/html"
     q:rashirenie="jpg" "image/jpeg"

     ; q:rashirenie="cos" "text/html" ; каше обжект скрипт
   ; -------------------------------------
     q:rashirenie="mpeg" "video/mpeg"
     q:rashirenie="mpg" "video/mpeg"
     q:rashirenie="mpe" "video/mpeg"
   ; -------------------------------------
     q:rashirenie="ai" "application/postscript"
     q:rashirenie="zip" "application/zip"
                  q:rashirenie="zsh" "text/x-script.zsh"
                  q:rashirenie="x-png" "image/png"
                  q:rashirenie="xls" "application/x-excel"
                  q:rashirenie="xlm" "application/excel"
                  q:rashirenie="wav" "audio/x-wav"
                  q:rashirenie="txt" "text/plain"
                  q:rashirenie="tiff" "image/tiff"
                  q:rashirenie="tif" "image/x-tiff"
                  q:rashirenie="text" "text/plain"
                  q:rashirenie="swf" "application/x-shockwave-flash"
                  q:rashirenie="sprite" "application/x-sprite"
                  q:rashirenie="smil" "application/smil"
                  q:rashirenie="sh" "text/x-script.sh"
                  q:rashirenie="rtx" "text/richtext"
                  q:rashirenie="rtf" "text/richtext"
                  q:rashirenie="pyc" "application/x-bytecode.python"
                  q:rashirenie="py" "text/x-script.phyton"
                  q:rashirenie="png" "image/png"
                  q:rashirenie="pic" "image/pict"
                  q:rashirenie="mp3" "video/mpeg"
                  q:rashirenie="mp2" "video/mpeg"
                  q:rashirenie="movie" "video/x-sgi-movie"
                  q:rashirenie="mov" "video/quicktime"
                  q:rashirenie="mjpg" "video/x-motion-jpeg"
                  q:rashirenie="mime" "www/mime"
                  q:rashirenie="mif" "application/x-mif"
                  q:rashirenie="midi" "audio/midi"
                  q:rashirenie="js" "application/javascript"
                  q:rashirenie="jpeg" "image/jpeg"
                  q:rashirenie="jps" "image/x-jps"
                  q:rashirenie="jam" "audio/x-jam"
                  q:rashirenie="jav" "text/plain"
                  q:rashirenie="java" "text/x-java-source"
                  q:rashirenie="htm" "text/html"
                  q:rashirenie="html" "text/html"
                  q:rashirenie="gzip" "application/x-gzip"
                  q:rashirenie="gif" "image/gif"
                  q:rashirenie="gl" "video/gl"
                  q:rashirenie="csh" "text/x-script.csh"
                  q:rashirenie="css" "text/css"
                  q:rashirenie="bsh" "application/x-bsh"
                  q:rashirenie="bz" "application/x-bzip"
                  q:rashirenie="bz2" "application/x-bzip2"
                  q:rashirenie="c" "text/plain"
                  q:rashirenie="c++" "text/plain"
                  q:rashirenie="cat" "application/vnd.ms-pki.seccat"
                  q:rashirenie="cc" "text/plain"
                  q:rashirenie="htmls" "text/html"
                  q:rashirenie="bmp" "image/bmp"
                  q:rashirenie="bm" "image/bmp"
                  q:rashirenie="avi" "video/avi"
                  q:rashirenie="avs" "video/avs-video"
                  q:rashirenie="au" "audio/basic"
                  q:rashirenie="arj" "application/arj"
                  q:rashirenie="art" "image/x-jg"
                  q:rashirenie="asf" "video/x-ms-asf"
                  q:rashirenie="asm" "text/x-asm"
                  q:rashirenie="asp" "text/asp"
     q "application/octet-stream"
]]></Implementation>
</Method>

<Method name="IsParentClass">
<Description>
Проверка Является ли класс дочерним от указанного</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",ClassParent=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   q:'$d(^oddDEF(ClassName,60)) 0
   if $l(^oddDEF(ClassName,60),ClassParent)>1  q 1
   s res=0
   for i=1:1:$l(^oddDEF(ClassName,60),",") {
         s SubClass=$p(^oddDEF(ClassName,60),",",i)
         if $d(^oddDEF(SubClass)) {
             if $d(^oddDEF(SubClass,60)) { 
               if $l(^oddDEF(SubClass,60),ClassParent)>1   s res=1  q
             }   
         }
   }
   q res
]]></Implementation>
</Method>

<Method name="CreateMacFromRaw">
<Description>
Создать MAC программу из файла</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rawFileName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  if ##class(%File).Exists(rawFileName)=1 {
      s MacName=$p(rawFileName,"\",$l(rawFileName,"\"))
      s MacNameFull=$p(MacName,".",$l(MacName,"."))
      s MacName=$e(MacName,1,$l(MacName)-1-$l($p(MacName,".",$l(MacName,"."))))
      d %request.InsertCgiEnv("MacName",MacName)
      if ##class(%Routine).Exists(MacName)=1 d ##class(%Routine).Delete(MacName)
      s readRut=##class(%Routine).%New(MacName)
      S stream=##class(%FileBinaryStream).%New()
      S stream.Filename=rawFileName 
      While 'stream.AtEnd  {
        d readRut.Write(stream.Read(32000))
      }
      d stream.%Close()
      s stream=""
      d readRut.Save()
      k ^SPOOL($job) 
      O 2:($job) 
      U 2:($job)
      w $$CompileRoutine^%apiRTN(MacNameFull)
      c 2:($job)  
      k ^SPOOL($job) 
      USE $ZUTIL(53):(::"M")
      q 1
  }
  q 0
]]></Implementation>
</Method>

<Method name="GetRawHtml">
<ClassMethod>1</ClassMethod>
<FormalSpec>rawFileName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
      if ##class(%File).Exists(rawFileName)'=1 q 0
      ; старый вариант получения расширения
      s rashirenie=$ZCVT($p(rawFileName ,".", $l(rawFileName,".")),"L")   
      s typ=..ContentType("."_rashirenie) 
      w "HTTP/1.1 200",$c(13,10)
      w "Content-type: "_typ_"; "_%response.CharSet,$c(13,10)
      w "Connection: close"_$c(13,10,13,10)
      if (typ["html"){ 
         d ..parseHtmlPage(rawFileName,1)
         q 1
      }
      S stream=##class(%FileBinaryStream).%New()
      S stream.Filename=rawFileName 
      While 'stream.AtEnd  {
	      s html=stream.Read(32000)
          w html
      }
      d stream.%Close()
      s stream=""
      s file =""
      q 1
]]></Implementation>
</Method>

<Method name="parseHtmlPage">
<Description>
Парсим HTML текст заменяя системные тэги !!!</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rawFileName,isHtmlFile=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
      if isHtmlFile=1,$zObjClassMethod("%CompiledClass","%ExistsId","%ZWeb.RunJob")=1 {
         &html<<script language="JavaScript" type="text/javascript" src="#($SYSTEM.CSP.GetDefaultApp($ZU(5)))#/#($zcvt("%ZWeb.RunJob","O","URL"))#.cls"></script> >
      }
      S stream=##class(%FileBinaryStream).%New()
      S stream.Filename=rawFileName 
      While 'stream.AtEnd  {
	      s html=stream.Read(32000)
	      s html=..ExecFragVar(html,"<server>","</server>","")
	      s html=..ExecFragVar(html,"#(",")#"," w """",")
	      s html=..ReplaceFragVar(html,"#server(",")#","cspHttpServerMethod")
	      s html=..ReplaceFragVar(html,"#call(",")#","cspCallHttpServerMethod")
	      w html
	  }
      d stream.%Close()
      s stream=""
      q ""
]]></Implementation>
</Method>

<Method name="ParseServerFun">
<Description>
Заменить содержимое #server( )# или #call( )#  на JS  функцию</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>CodeFrag="",JsFunName="cspHttpServerMethod"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S funName=$p(CodeFrag,"(",1)
    s args=$e(CodeFrag,$l(funName)+2,$l(CodeFrag)-1)
    if $d(%session){
      s funName=$$$cspEncode(%session.Key,$lb(funName))
    }             
	w JsFunName_"('"_funName_"',"_args_")"
	q ""
]]></Implementation>
</Method>

<Method name="ExecFrag">
<Description>
Метод разбивки исходного текста на Cache` код и HTML текст
Метод разбивки исходного текста на Cache` код и HTML текст</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End=""</FormalSpec>
<Implementation><![CDATA[
      q:SrcCode=""   q:Beg=""    q:End="" 
      s html=SrcCode
      for {
          s HtmlFrag=$e(SrcCode,1,$l($p(SrcCode,Beg,1)) ) 
          w HtmlFrag
          s SrcCode=$e(SrcCode,$l(HtmlFrag)+1+$l(Beg),$l(SrcCode) ) 
          s CodeFrag=$e(SrcCode,1, $l($p(SrcCode,End,1)) ) 
          s SrcCode=$e(SrcCode,$l(CodeFrag)+1+$l(End),$l(SrcCode) ) 
          if $l(CodeFrag)>0{
             TRY {  x $tr(CodeFrag,$c(13,10),"   ")   } CATCH ErrorHandle {    zw ErrorHandle  }
          }
        q:SrcCode=""
      }
]]></Implementation>
</Method>

<Method name="ExecWriteFrag">
<Description>
Метод разбивки исходного текста на Cache` код и HTML текст
Метод разбивки исходного текста на Cache` код и HTML текст</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End=""</FormalSpec>
<Implementation><![CDATA[
      q:SrcCode=""   q:Beg=""    q:End="" 
      s html=SrcCode
      for {
          s HtmlFrag=$e(SrcCode,1,$l($p(SrcCode,Beg,1)) ) 
          w HtmlFrag
          s SrcCode=$e(SrcCode,$l(HtmlFrag)+1+$l(Beg),$l(SrcCode) ) 
          s CodeFrag=$e(SrcCode,1, $l($p(SrcCode,End,1)) ) 
          s SrcCode=$e(SrcCode,$l(CodeFrag)+1+$l(End),$l(SrcCode) ) 
          if $l(CodeFrag)>0{
             TRY {  x "w """","_$tr(CodeFrag,$c(13,10),"   ")   } CATCH ErrorHandle {    zw ErrorHandle  }
          }
        q:SrcCode=""
      }
]]></Implementation>
</Method>

<Method name="GetClsHtml">
<Description>
Метод запуска класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName,addLib=0,ReadFromBuff=1</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    if $l(ClassName)'=0 {
      ; if $zcvt($e(ClassName,$l(ClassName)-$l("cls"),$l(ClassName)) ,"L")=".cls" {
      ;    s ClassName=$e(ClassName,1,$l(ClassName)-$l(".cls"))          
      ; }
        if $zObjClassMethod("%CompiledClass","%ExistsId",ClassName)=1 {
	   if ReadFromBuff=1{     
         k ^||tmpLocal
         s %LastIO=$IO  u %LastIO::("^"_$zn) d ##class(%Device).ReDirectIO($$$YES) 
	   }      If $System.CLS.IsMthd(ClassName,"OnPreHTTP") {
                ; try{  }CATCH err{  zw err           }
                s %response.Redirect=""
                d $zObjClassMethod(ClassName,"OnPreHTTP")    
                if $l(%response.Redirect)>0{
	                if $e(%response.Redirect,1,1)="/"  s %response.Redirect=$e(%response.Redirect,2,$l(%response.Redirect))
	                d %request.InsertCgiEnv("QUERY_PAGE",$p(%response.Redirect,"/?",1))
                    s %request.URL="/"_%request.CgiEnvs("QUERY_PAGE")
                    d %request.InsertCgiEnv("PATH_TRANSLATED",$tr(%request.GetCgiEnv("LOCAL_PATH")_"/"_$p(%response.Redirect,"/?",1),"/","\"))
	                q ..GerUrlContent(%response.Redirect)   
                }
             }
             w "HTTP/1.1 200",$c(13,10)
             w "Content-type: "_%response.ContentType_"; charset="_%response.CharSet,$c(13,10)
            
            if $d(%response.Headers("CONTENT-DISPOSITION")){
	            w "Content-Disposition: "_%response.Headers("CONTENT-DISPOSITION")_$c(13,10)
            }
            if $d(%response.Headers("PRAGMA")){
	            w "PRAGMA: "_%response.Headers("PRAGMA")_$c(13,10)
            }
            if $l(%response.ContentLength)>0 {
               w "Content-Length: "_%response.ContentLength_$c(13,10)
            }
            ; k ^SPOOL($job)
            ; O 2:($job) 
            ; U 2:($job)
            ; zw %response
            ; c 2:($job)  
            ; USE $ZUTIL(53):(::"M")

             w "Connection: close"_$c(13,10,13,10)
             try{ 
            ; if addLib=1 {
                if %response.ContentType["html" {
                  ;   <script  type='text/javascript' src='/csp/broker/cspxmlhttp.js'></script>
                  ;   <script  type='text/javascript' src='/csp/broker/cspbroker.js'></script>
                 ;  if $zObjClassMethod("%CompiledClass","%ExistsId","%ZWeb.RunJob")=1 {
                 ;    &html<<script language="JavaScript" type="text/javascript" src="#($SYSTEM.CSP.GetDefaultApp($ZU(5)))#/#($zcvt("%ZWeb.RunJob","O","URL"))#.cls"></script> >
                 ;  }
               }
            ; }
             d $zObjClassMethod(ClassName,"OnPage")   
             }CATCH err{ zw err }
      
          if ReadFromBuff=1{     
             d ##class(%Device).ReDirectIO($$$NO)  u %LastIO
             s ind="" for {
	             s ind=$o(^||tmpLocal(ind))   
	             q:ind=""
	             if %response.ContentType["html" {
	                w $zcvt(^||tmpLocal(ind),"o",%response.CharSet)
	                
	             }else{
		            s html=$zcvt(^||tmpLocal(ind),"o",%response.CharSet)
		            w html
	             }
             }
             k ^||tmpLocal
          }
          q 1
         }
      }   
      q 0
]]></Implementation>
</Method>

<Method name="DrawMac">
<ClassMethod>1</ClassMethod>
<FormalSpec>MacName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    q:##class(%Routine).Exists(MacName)=0 
 ;   if ##class(%Routine).Exists(MacName)=0 
 ;   {
 ;     k ^deb
 ;     s isFoundMac=0
 ;     s res=##class(%ResultSet).%New("%Library.Routine:RoutineList")
 ;     d res.Execute("*.MAC,*.INT")
 ;     for  q:'res.Next()   q:isFoundMac=1   d
 ;     .  q:$zcvt(res.Get("Name"),"L")'=$zcvt(MacName,"L")
 ;     .  s isFoundMac=1, MacName=res.Get("Name")
 ;     .  s ^deb(res.Get("Name"))=1
 ;     q:isFoundMac=0 0
 ;   }
    s isMacMethod=0    
    s isMacPreMethod=0 
    s MacMethod="OnPage"       
    s MacPreMethod="OnPreHTTP" 
    s readRut=##class(%Routine).%New(MacName)
    s IndParam=""
    s isFoundLabel=0
    for
    {
        q:readRut.AtEnd
        s str=readRut.ReadLine()
        if $l(str)>0,$e(str,1,1)'=" "
        {
          s namesTRING=$e(str,1,$l($p(str," ",1)))
          s NameMethod=$p(namesTRING,"(",1)
          if $ZCVT(NameMethod,"L")=$ZCVT(MacMethod,"L")
          {   s MacMethod=NameMethod
              s isMacMethod=1
          }
          if $ZCVT(NameMethod,"L")=$ZCVT(MacPreMethod,"L")
          {   s MacPreMethod=NameMethod
              s isMacPreMethod=1
          }
        }
        if isMacMethod=1,isMacPreMethod=1 q
     }
     Do readRut.%Close()
     if isMacMethod=1 {
        s cmd=" d "_MacMethod_"^"_MacName_"()" 
     }else{
        s cmd=" d ^"_MacName 
     }
     s $ztrap="ErrPre2"
     if isMacPreMethod=1 {
        x " d "_MacPreMethod_"^"_MacName_"()"  
     }
     s $ZTRAP="ErrOnPage2"
    
     USE $ZUTIL(53):(::"M")
     w "HTTP/1.1 200",$c(13,10)
     w "Content-type: "_%response.ContentType_"; charset="_%response.CharSet,$c(13,10)
     w "Connection: close"_$c(13,10,13,10)
     ; При необходимости можно добавляеть сторонние библиотеки
     if %response.ContentType["html" {
      ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
      ;    w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>",!
      ; }
       if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
          w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>",!
       }
     }
     x cmd 
     w *-1,!
     q 1
ErrPre2     
   w "Error: d "_MacPreMethod_"^"_MacName_""
   w !,$ze,!
   w *-1,!
   q 1  
ErrOnPage2
   w cmd
   w !,$ze,!
   w *-1,!
   q 1
]]></Implementation>
</Method>

<Method name="GetMacHtml">
<Description>
Метод запуска MAC программы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>zapros</FormalSpec>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
   q:%request.Get("typ")'="mac" 0
   s ClassNameOne=$E(zapros,1,$l(zapros)-4)
   s ClassNameOne=$replace(ClassNameOne,"/",".")
   s MacName=ClassNameOne
   ;   Если мак программа ненайдена, тогда ищим чтото похожее среди других классов 
   s MacName=$REPLACE(MacName,"/",".")
   if ##class(%Routine).Exists(MacName)=0 
   {
      s isFoundMac=0
      s res=##class(%ResultSet).%New("%Library.Routine:RoutineList")
      d res.Execute("*.MAC,*.INT")
      for  q:'res.Next()   q:isFoundMac=1   d
      .  q:$zcvt(res.Get("Name"),"L")'=$zcvt(MacName,"L")
      .  s isFoundMac=1, MacName=res.Get("Name")
      q:isFoundMac=0 0
    }
  ;
  ; ищим метку для запуска ,если метка ненайдена, тогда запускаем рутину без метки
    s isMacMethod=0    
    s isMacPreMethod=0 
    s MacMethod="OnPage"       
    s MacPreMethod="OnPreHTTP" 
    s readRut=##class(%Routine).%New(MacName)
    s IndParam=""
    s isFoundLabel=0
    for
    {
        q:readRut.AtEnd
        s str=readRut.ReadLine()
        if $l(str)>0,$e(str,1,1)'=" "
        {
          s namesTRING=$e(str,1,$l($p(str," ",1)))
          s NameMethod=$p(namesTRING,"(",1)
          if $ZCVT(NameMethod,"L")=$ZCVT(MacMethod,"L")
          {   s MacMethod=NameMethod
              s isMacMethod=1
          }
          if $ZCVT(NameMethod,"L")=$ZCVT(MacPreMethod,"L")
          {   s MacPreMethod=NameMethod
              s isMacPreMethod=1
          }
        }
        if isMacMethod=1,isMacPreMethod=1 q
     }
     Do readRut.%Close()
     if isMacMethod=1 {
        s cmd=" d "_MacMethod_"^"_MacName_"()" 
     }else{
        s cmd=" d ^"_MacName 
     }
     s $ztrap="ErrPre"
     if isMacPreMethod=1 {
        x " d "_MacPreMethod_"^"_MacName_"()"  
     }
     s $ZTRAP="ErrOnPage"
     USE $ZUTIL(53):(::"M")
     w "HTTP/1.1 200",$c(13,10)
     w "Content-type: "_%response.ContentType_"; charset="_%response.CharSet,$c(13,10)
     w "Connection: close"_$c(13,10,13,10)
     ; При необходимости можно добавляеть сторонние библиотеки
     if %response.ContentType["html" {
       ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
       ;   w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>"
       ; }
       if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
          w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>"
       }
     }
     x cmd 
     w *-1,!
     q 1
ErrPre     
   w "Error: d "_MacPreMethod_"^"_MacName_""
   w !,$ze,!
   w *-1,!
   q 1  
ErrOnPage
   w cmd
   w !,$ze,!
   w *-1,!
   q 1
]]></Implementation>
</Method>

<Method name="ExecFragVar">
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End="",AddCode=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
      q:SrcCode="" ""   q:Beg="" SrcCode     q:End="" SrcCode
      if $l(SrcCode,Beg)=1   q SrcCode
      s ResultText=""
      k ^||tmpLocal
      s %LastIO=$IO  u %LastIO::("^"_$zn) d ##class(%Device).ReDirectIO($$$YES)   
      s ResultText=""
      s html=SrcCode
      for {
          s HtmlFrag=$e(SrcCode,1,$l($p(SrcCode,Beg,1)) ) 
          w HtmlFrag
          s SrcCode=$e(SrcCode,$l(HtmlFrag)+1+$l(Beg),$l(SrcCode) ) 
          s CodeFrag=$e(SrcCode,1, $l($p(SrcCode,End,1)) ) 
          s SrcCode=$e(SrcCode,$l(CodeFrag)+1+$l(End),$l(SrcCode) ) 
          if $l(CodeFrag)>0{
             TRY {  x AddCode_"  "_$tr(CodeFrag,$c(13,10),"   ")   } CATCH ErrorHandle {  w !,"SRC:"_CodeFrag,!  zw ErrorHandle  }
          }
        q:SrcCode=""
      }
      d ##class(%Device).ReDirectIO($$$NO)  u %LastIO
      s ind="" , count=0
      for {
	     s ind=$o(^||tmpLocal(ind))   
	     q:ind=""
	     ; s count=count+1
	     ; s:count'=1 ResultText=ResultText_$c(13,10)
	     s ResultText=ResultText_^||tmpLocal(ind)
	  } 
      k ^||tmpLocal
      q ResultText
]]></Implementation>
</Method>

<Method name="ReplaceFragVar">
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End="",AddCode=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
      q:SrcCode="" ""   q:Beg="" SrcCode     q:End="" SrcCode
      if $l(SrcCode,Beg)=1   q SrcCode
      s ResultText=""
      k ^||tmpLocal
      s %LastIO=$IO  u %LastIO::("^"_$zn) d ##class(%Device).ReDirectIO($$$YES)   
      s ResultText=""
      s html=SrcCode
      for {
          s HtmlFrag=$e(SrcCode,1,$l($p(SrcCode,Beg,1)) ) 
          w HtmlFrag
          s SrcCode=$e(SrcCode,$l(HtmlFrag)+1+$l(Beg),$l(SrcCode) ) 
          s CodeFrag=$e(SrcCode,1, $l($p(SrcCode,End,1)) ) 
          s SrcCode=$e(SrcCode,$l(CodeFrag)+1+$l(End),$l(SrcCode) ) 
          if $l(CodeFrag)>0{
	         w ..ParseServerFun(CodeFrag,AddCode) 
          }
        q:SrcCode=""
      }
      d ##class(%Device).ReDirectIO($$$NO)  u %LastIO
      s ind="" , count=0
      for {
	     s ind=$o(^||tmpLocal(ind))   
	     q:ind=""
	     ; s count=count+1
	     ; s:count'=1 ResultText=ResultText_$c(13,10)
	     s ResultText=ResultText_^||tmpLocal(ind)
	  } 
      k ^||tmpLocal
      q ResultText
]]></Implementation>
</Method>

<Method name="redirects">
<Description>
Публичные точки входа, использующиеся при перенаправлении ввода/вывода</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
wstr(s) s ^||tmpLocal($i(^||tmpLocal))=s        q
wchr(c) s ^||tmpLocal($i(^||tmpLocal))=$c(c)    q
wnl s ^||tmpLocal($i(^||tmpLocal))=$$$NL        q
wff s ^||tmpLocal($i(^||tmpLocal))=$c(12)       q
wtab(s) s ^||tmpLocal($i(^||tmpLocal))=s        q
]]></Implementation>
</Method>
</Class>
</Export>
