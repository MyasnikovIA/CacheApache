<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="%ZWeb.RunJob">
<Super>%CSP.Page</Super>
<TimeCreated>64771,69710.733673</TimeCreated>

<Parameter name="CodePage">
<Description><![CDATA[
<br>   s %response.CharSet="CP1251" 
<br>   "CP1251" или "UTF-8"]]></Description>
<Default>CP1251</Default>
</Parameter>

<Parameter name="GlobalMessage">
<Description>
Parameter CodePage = "UTF-8";</Description>
<Default>^mtempHTML.js</Default>
</Parameter>

<Method name="ExecFrag">
<Description>
Метод разбики исходного текста на Cache` код и HTML текст</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End=""</FormalSpec>
<Implementation><![CDATA[    q:SrcCode=""   q:Beg=""    q:End=""    for ExecFragInd=1:1:$l(SrcCode,End){  s tmp=$p(SrcCode,End,ExecFragInd)   s Html=$p(tmp,Beg,1)     s Code=$p(tmp,Beg,2)   w Html   TRY {     x Code    } CATCH ErrorHandle {    zw ErrorHandle  }    }
]]></Implementation>
</Method>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
    ; s %response.CharSet="CP1251" 
    ; s %response.CharSet="UTF-8" 
     s:$l(..#CodePage)>0 %response.CharSet=..#CodePage  ; для ПК Сироена
     if %request.Get("cspIntRunMethod",0)=1 {
          if %response.ContentType="text/html" {
            Do %response.SetHeader("Content-Type","text/plain")   
          }
         q 1   
     }
     if $d(%request.Data("cspIntRunJob")){             Do %response.SetHeader("Content-Type","application/javascript")  q 1  }
     if $d(%request.Data("cspRunJobStatus")){  Do %response.SetHeader("Content-Type","application/javascript")  q 1  } 
     if $d(%request.Data("cspKillRunJob")){       Do %response.SetHeader("Content-Type","application/javascript")  q 1  }
     Do %response.SetHeader("Content-Type","application/javascript")   
     q 1
]]></Implementation>
</Method>

<Method name="loop">
<ClassMethod>1</ClassMethod>
<FormalSpec>ip="",ParentClass=""</FormalSpec>
<Implementation><![CDATA[
	s %ClientIP=ip
	s %ParentClass=ParentClass
   open 2:($job)
   for {
      use 2:($job)
	  s CmdParentJob=$list($system.Event.WaitMsg(), 2)
	  s msg=""
	  if $d(@..#GlobalMessage@(%ClientIP,%ParentClass,"Message")){
	    s msg=@..#GlobalMessage@(%ClientIP,%ParentClass,"Message")
	    k @..#GlobalMessage@(%ClientIP,%ParentClass,"Message")
	  }
	  s ParentJob=""
	  if $d(@..#GlobalMessage@(%ClientIP,%ParentClass,"ParentJob")){
	    s ParentJob=@..#GlobalMessage@(%ClientIP,%ParentClass,"ParentJob")
	  }
      if msg="exit" {
         if ParentJob'="" {
	        do $system.Event.Signal(ParentJob,"OK")   
         }
	     q
      }
      try {
	     #dim %override as %ZEN.proxyObject
         do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(msg,,.%override,1)
         if %override="" {
             x msg
         }else{
	      s %class=%override.Class
	      s %method=%override.Method
	      s count=0
	      set args=count        
          For numArg=1:1:count {
              set args(numArg)=%override.Args.Get(numArg)
          }   
	      if '$d(^oddDEF(%class,"m",%method,70)) {
            if '$d(^oddDEF(%class,"m",%method,42)) {
                do $classmethod(%class, %method, args...)
            } Else {
                w $classmethod(%class, %method, args...)
            }
          }else{
            if $d(^oddDEF(%class,"m",%method,30)){
               for ind=1:1:^oddDEF(%class,"m",%method,30){
                 w:ind'=1 $c(13,10)
                 d ..ExecFrag(^oddDEF(%class,"m",%method,30,ind),"/*(",")*/")
               }
            }
         }
	      ;  zw %override    
	      ;  w !,"OBJECT $job="_$job,!
         }
      } CATCH { 
         &js<
	         alert('$ZERROR:#($zcvt($ZERROR,"O","JS"))#');
	     >
      }
      w !
      if ParentJob'="" {
	     d $system.Event.Signal(ParentJob,"OK")   
      }
   }
   k @..#GlobalMessage@(%ClientIP,%ParentClass)
   close 2:($job)
]]></Implementation>
</Method>

<Method name="ConvertJson">
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",MethodName=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  
	  s res="{"
	  s res=res_"""Class"":"""_$zcvt(ClassName,"O","JS")_""""
	  s res=res_",""Method"":"""_$zcvt(MethodName,"O","JS")_""""
	  s args=""
	  Set count=$Get(%request.Data("WARGC",1),0)
      if count>0 {
        For i=1:1:count {
          Set arg="WARG_"_i
          If $Data(%request.Data(arg,1)) {
                if '$isObject(%request.Data(arg,1)) {
	              s:$l(args)>0 args=args_","
	              s args=args_""""_$zcvt(%request.Data(arg,1) ,"O","JS")_""""
                }else{
	              ; do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(%request.Data(arg,1),.jsonEl,,"aceloqtw")
	              ; d obj.args.Insert(jsonEl)   
                }
          } ElseIf $Data(%request.Data("WLIST"_i,1)) {
               Set var="W"_i
               For j=1:1:%request.Data("WLIST"_i,1) {
                    If $Data(%request.Data(var,j)) {
                      if $isObject(%request.Data(var,j)) {
	                     ; try {
	                     ;    do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(%request.Data(var,j),.jsonEl,,"aceloqtw")
	                     ;    d obj.args.Insert(jsonEl)   
	                     ; } CATCH exp{
                         ;    d obj.args.Insert(exp)   
                         ; }
                       }else{
	                      s:$l(args)>0 args=args_","
	                      s args=args_""""_$zcvt(%request.Data(var,j) ,"O","JS")_""""
                       }
                    }
               }
            }
          }
        }
    s res=res_",""Args"":["_args_"]"
    s res=res_"}"
	q res
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    s ParentClass=%request.Get("ParentClass","")
	if ParentClass="",$d(%request.CgiEnvs("HTTP_REFERER")){
        s ref=%request.CgiEnvs("HTTP_REFERER")
        s ref=$e( ref  , $l(  $p(ref,"/",1))+2,$l(ref)) 
        s ref=$e( ref  , $l(  $p(ref,"/",1))+2,$l(ref)) 
        s ref=$e( ref  , $l(  $p(ref,"/",1))+2,$l(ref)) 
        s ref=$p(ref,"?",1)
        if $e(ref,$l(ref),$l(ref))="\"{
          s ref=$e(ref,1,$l(ref)-1)
        }
        s ParentClass=ref
    }
    s:ParentClass="" ParentClass=##this
    s %ClientIP=..GetIP()
    
    if '$d(@..#GlobalMessage@(%ClientIP,ParentClass)){
	   job ..loop(%ClientIP,ParentClass) 
       s @..#GlobalMessage@(%ClientIP,ParentClass)=$zchild  
       s LastJobId=$zchild  	
	}else{
	   s LastJobId=@..#GlobalMessage@(%ClientIP,ParentClass)
	}
	s @..#GlobalMessage@(%ClientIP,ParentClass,"ParentJob")=$job

    
    
    #define cspEncode(%k,%d)      $translate($System.Encryption.AESBase64Encode(%d,%k),"+=/"_$char(32,13,10),"_-$") 
    #define cspDecode(%k,%d)      $System.Encryption.AESBase64Decode($translate(%d,"_-$","+=/"),%k) 

    if $d(%request.Data("cspIntRunMethod")){       
        s WEVENT=%request.Get("WEVENT","")
        if $l(WEVENT,".")'=1 w "Ошибка в формате запроса" q
        s WEVENT=$lg($$$cspDecode(%session.Key,WEVENT),1) 
        s WEVENT=$p(WEVENT,":",1) ; ????
        s method=$p(WEVENT,".",$l(WEVENT,"."))
        s class=$e(WEVENT,1,$l(WEVENT)-$l(method)-1)
        if class="."{
           s class= $SYSTEM.CSP.GetClassName("/"_ParentClass)
        } 
        s ObjJson=..ConvertJson(class,method)
        s @..#GlobalMessage@(%ClientIP,ParentClass,"Message")=ObjJson 
        ; s @..#GlobalMessage@(%ClientIP,ParentClass,"Message")=" w $h "
        
        do $system.Event.Signal(LastJobId,"Sync")	
        s msg=$list($system.Event.WaitMsg(), 2)
        if $d(%request.CgiEnvs("Cache version")) {
           USE $ZUTIL(53):(::"M")
        }else{
	       u 0
	    }
        /// отправляем ответ
         s ind=""
         for {
           s ind=$o(^SPOOL(LastJobId,ind))         
           q:ind=""
           continue:ind=2147483647
           w ^SPOOL(LastJobId,ind)
           k ^SPOOL(LastJobId,ind)
         }
         
        /*
       s WEVENT=%request.Get("WEVENT","")
       if $l(WEVENT,".")'=1 w "Ошибка в формате запроса" q
       s WEVENT=$lg($$$cspDecode(%session.Key,WEVENT),1) 
       s WEVENT=$p(WEVENT,":",1) ; ????
        s %method=$p(WEVENT,".",$l(WEVENT,"."))
        s %class=$e(WEVENT,1,$l(WEVENT)-$l(%method)-1)
        if %class="."{
            s:$d(%request.CgiEnvs("HTTP_REFERER")) %class= $SYSTEM.CSP.GetClassName(%request.CgiEnvs("HTTP_REFERER"))
        }
        s WEVENT=$c(1)_WEVENT
        s WEVENT= $$$cspEncode(%session.Key,"1"_WEVENT)
        d %request.Set("WEVENT",WEVENT)
        s %sc=""
        s %isNewMethod=1
        d ..ExecRunMethod()
        */
        Quit $$$OK
     }    
    
    
    if $d(%request.Data("cspgetAllJobList")){  
        s gl="^mtempRunJob"
       Quit $$$OK
    }
 
    if $d(%request.Data("cspgetJobList")){  
        s gl="^mtempRunJob("""_%ClientIP_""")"
        w "["
         s RunJobId="",countJob=0
         for {
             s RunJobId=$o(@gl@(RunJobId))  
             q:RunJobId=""
             s countJob=countJob+1
             w:countJob'=1 ","
              w "{""RunJobId"":"""_$ZCVT(RunJobId,"o","JS")_""""
              s ind=""
              for {
                s ind=$o(@gl@(RunJobId,ind))  
                q:ind=""
                w ","
                w """"_$ZCVT(ind,"o","JS")_""":"""_$ZCVT(@gl@(RunJobId,ind),"o","JS")_""""
              }
              w "}" 
         }
        w "]"
        Quit $$$OK
    }
    
    if $d(%request.Data("cspRunJobTest")){       
        s %RunJobId =%request.Get("cspRunJobTest","")
        if %RunJobId="" { w "OK" q $$$OK }
        s gl="^mtempRunJob("""_%ClientIP_""","""_%RunJobId_""")"
        if $d(@gl@("OK")),@gl@("OK")=0 {  
            w "NO OK" q $$$OK 
        }
        if $d(@gl@("JOB")),@gl@("JOB")=0 {  
          if $DATA(^$JOB(@gl@("JOB"))) {
            w "NO OK" q $$$OK 
          }
        }
        k @gl
        w "OK"
        q $$$OK 
    }
    
    if $d(%request.Data("cspIntRunJob")){       
         s WEVENT=%request.Get("WEVENT","")
        if $l(WEVENT,".")=1 w "Ошибка в формате запроса" q
       
         s WEVENT=$lg($$$cspDecode(%session.Key,WEVENT),1) 
         s WEVENT=$p(WEVENT,":",1) ; ????
         s %method=$p(WEVENT,".",$l(WEVENT,"."))
        s %class=$e(WEVENT,1,$l(WEVENT)-$l(%method)-1)
        if %class="."{
            s:$d(%request.CgiEnvs("HTTP_REFERER")) %class= $SYSTEM.CSP.GetClassName(%request.CgiEnvs("HTTP_REFERER"))
        }
        s WEVENT=$c(1)_WEVENT
        s WEVENT= $$$cspEncode(%session.Key,"1"_WEVENT)
        d %request.Set("WEVENT",WEVENT)
        s %RunJobId=%request.Get("cspIntRunJob","")
        s %sc=""
        s %isNewMethod=1
        if %RunJobId="" {
           s %RunJobId=$JOB_$tr($h,",")
        }
        d ..KillLOldGlobal(%RunJobId)
        
        s gl="^mtempRunJob("""_%ClientIP_""","""_%RunJobId_""")"
        ; Запрещаем повторный запуск классметода в паралельном процессе
         if $d(@gl@("GBL")),@gl@("OK")=0 {
           w %RunJobId    
           Quit $$$OK
         }else{
           ; k @gl
         }
        d ..ExecRunJobMethod(gl)
        s %runjob="^mtempRunJob("""_%ClientIP_""","""_%RunJobId_""")"
        w %RunJobId
        Quit $$$OK
     }
     
     
     /// Проверка состояния процесса runJob
     if $d(%request.Data("cspRunJobStatus")){
        if %request.Get("cspRunJobStatus","")=""{
           w "{""error"":""Не указан идентификатор процесса"",""OK""=-1}"
           Quit $$$OK
        } 
        s %RunJobId=%request.Get("cspRunJobStatus","")
        s gl="^mtempRunJob("""_%ClientIP_""","""_%RunJobId_""")"
        if '$d(@gl){ w "{""error"":""Глобал с параметрами не найден"",""OK""=-1}"  Quit $$$OK  }
        if '$d(@gl@("JOB")){ w "{""error"":""В глобале не указан идентификатор процесса"",""OK""=-1}"  Quit $$$OK  }
        if $l(@gl@("JOB"))=0{ w "{""error"":""Идентификатор процесса пуст"",""OK""=-1}"  Quit $$$OK  }
        if '$D(^$JOB(@gl@("JOB"))){  
              s ind="",count=0
              w "{"
              for {
                s ind=$o(@gl@(ind))  
                q:ind=""
                s count=count+1
                w:count'=1 ","
                w """"_$ZCVT(ind,"o","JS")_""":"""_$ZCVT(@gl@(ind),"o","JS")_""""
              }
              w "}"
              k @gl
              Quit $$$OK 
        }
        s @gl@("DatTim")=$ZDT($h)
        s @gl@("Dat")=$p($h,",",1)
        s @gl@("Tim")=$p($h,",",2)
        s ind="",count=0
        w "{"
        for {
          s ind=$o(@gl@(ind))  
          q:ind=""
          s count=count+1
          w """"_$ZCVT(ind,"o","JS")_""":"""_$ZCVT(@gl@(ind),"o","JS")_""""
          if ind="message" s @gl@(ind)=""
        }
        w "}"
        Quit $$$OK
     }  
      /// Уничтожение процесса runJob
     if $d(%request.Data("cspKillRunJob")){
        if %request.Get("cspKillRunJob","")=""{
           w "{""error"":""Не указан идентификатор процесса"",""OK""=-1}"
           Quit $$$OK
        } 
        s %RunJobId=%request.Get("cspKillRunJob","")
        s gl="^mtempRunJob("""_%ClientIP_""","""_%RunJobId_""")"
        if '$d(@gl){ w "{""error"":""Глобал с параметрами не найден"",""OK""=-1}"  Quit $$$OK  }
        if '$d(@gl@("JOB")){ w "{""error"":""В глобале не указан идентификатор процесса"",""OK""=-1}"  Quit $$$OK  }
        if $l(@gl@("JOB"))=0{ w "{""error"":""Идентификатор процесса пуст"",""OK""=-1}"  Quit $$$OK  }
        if '$D(^$JOB(@gl@("JOB"))){   w "{""error"":""Процесс с номером "_@gl@("JOB")_" в системе не найден. "",""OK""=-1}" Quit $$$OK  }
        d $zu(4,@gl@("JOB"))
        s @gl@("OK")=-2
        s ind="",count=0
        w "{"
        for {
          s ind=$o(@gl@(ind))  
          q:ind=""
          s count=count+1
          w:count'=1 ","
          w """"_$ZCVT(ind,"o","JS")_""":"""_$ZCVT(@gl@(ind),"o","JS")_""""
           ; "GBL","CLS","MET","IP","JobID","JOB","DatTimStart","DatTim","Dat","Tim","OK","DatTimStop","OK","error"
        }
        w "}"
        
        Quit $$$OK
     }  
   
     ; Выводим JS функции библиотеки
     s ParentClassName1="%ZWeb.RunJob"
     s MethodName="InitPreRunJob"
     for ind=1:1:^oddDEF(ParentClassName1,"m",MethodName,30) {
        d ..ExecFrag(^oddDEF(ParentClassName1,"m",MethodName,30,ind),"/*(",")*/") 
        w $c(13,10)
        ; w ^oddDEF(ParentClassName1,"m",MethodName,30,ind)_$c(13,10)
     }
     Quit $$$OK
]]></Implementation>
</Method>

<Method name="ExecRunMethod">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
     Set count=$Get(%request.Data("WARGC",1),0)
     set args=count
     s numArg=0
     For i=1:1:count {
          Set arg="WARG_"_i
          If $Data(%request.Data(arg,1)) {
               s numArg=numArg+1
               ; set args(numArg) = %request.Data(arg,1)
               if $isObject(%request.Data(arg,1)) {
                  set args(numArg) = %request.Data(arg,1)
               }else{
                 set args(numArg) = $zcvt(%request.Data(arg,1),"I",$tr(..#CodePage,"-",""))
               }
          } ElseIf $Data(%request.Data("WLIST"_i,1)) {
               Set var="W"_i
               For j=1:1:%request.Data("WLIST"_i,1) {
                    If $Data(%request.Data(var,j)) {
                        s numArg=numArg+1
                        ; set args(numArg) = %request.Data(var,j)
                        if $isObject(%request.Data(var,j)) {
                          set args(numArg) = %request.Data(var,j)
                        }else{
                          set args(numArg) = $zcvt(%request.Data(var,j),"I",$tr(..#CodePage,"-",""))
                        }
                    }
               }
          }
     }
     
     if '$d(^oddDEF(%class,"m",%method,70)) {
        if '$d(^oddDEF(%class,"m",%method,42)) {
           do $classmethod(%class, %method, args...)
        } Else {
            w $classmethod(%class, %method, args...)
        }
     }else{
        if $d(^oddDEF(%class,"m",%method,30)){
          for ind=1:1:^oddDEF(%class,"m",%method,30){
             w:ind'=1 $c(13,10)
              d ..ExecFrag(^oddDEF(%class,"m",%method,30,ind),"/*(",")*/")
          }
        }
     }
     q
]]></Implementation>
</Method>

<Method name="ExecRunJobMethod">
<Description>
запуск класс метода в паралельном потоке</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gl</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
     Set count=$Get(%request.Data("WARGC",1),0)
     set @gl@("args")=count
     s numArg=0
     For i=1:1:count {
        Set arg="WARG_"_i
        If $Data(%request.Data(arg,1)) {
           s numArg=numArg+1
           set @gl@("args",numArg) = $zcvt(%request.Data(arg,1),"I",$tr(..#CodePage,"-",""))
        } ElseIf $Data(%request.Data("WLIST"_i,1)) {
           Set var="W"_i
           For j=1:1:%request.Data("WLIST"_i,1) {
              If $Data(%request.Data(var,j)) {
                 s numArg=numArg+1
                 set @gl@("args",numArg) =$zcvt(%request.Data(var,j),"I",$tr(..#CodePage,"-","")) 
              }
           }
        }
     }    
     s @gl@("GBL")=gl
     s @gl@("CLS")=""
     s @gl@("MET")=%method
     s @gl@("IP")=%ClientIP
     s @gl@("JobID")=%RunJobId
     s @gl@("message")=""
     job ..runJobController(gl,%class, %method)
     s @gl@("JOB")=$zchild ; Получаем ID дочернего процесса
     q gl
]]></Implementation>
</Method>

<Method name="runJobController">
<Description>
Метод работает в паралельном потоке runJob</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>gl,class,method</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   ; q:$d(@gl)  ; Если процесс уже работает, тогда выходим из процесса
   s @gl@("JOB")=$job
   s @gl@("DatTimStart")=$ZDT($h)
   s @gl@("DatTim")=$ZDT($h)
   s @gl@("Dat")=$p($h,",",1)
   s @gl@("Tim")=$p($h,",",2)
   s @gl@("OK")=0
   s %runjob=gl
   s ^deb($job)=gl
 s $ZTRAP="errRunJob"
   set args=@gl@("args")
   for numArg=1:1:@gl@("args") {
      s val=@gl@("args",numArg)
      set args(numArg) = val
   }
   if args>0 {
     do $classmethod(class, method, args...)
   }else{
     do $classmethod(class, method)
   }
   s @gl@("DatTimStop")=$ZDT($h)
   s @gl@("OK")=1
   q
errRunJob
   s @gl@("OK")=1   
   s @gl@("error")=""""_$ZCVT($ZE,"O","JS")_""""   
   q
]]></Implementation>
</Method>

<Method name="KillLOldGlobal">
<Description>
Удаление старых глобалов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>RunJobId</FormalSpec>
<Implementation><![CDATA[
       s gl="^mtempRunJob("""_%ClientIP_""","""_RunJobId_""")"
       s ind=""
       for  {
          s ind=$o(@gl@(ind))
         q:ind=""
         if '$d(@gl@(ind,"GBL"))   { k @gl@(ind)  continue } 
         if '$d(@gl@(ind,"JOB"))   { k @gl@(ind)  continue } 
         if '$d(@gl@(ind,"OK"))    { k @gl@(ind)  continue } 
          if '$d(@gl@(ind,"DatTim")){ k @gl@(ind)  continue } 
          if '$d(@gl@(ind,"Tim"))   { k @gl@(ind)  continue } 
          if '$d(@gl@(ind,"Dat"))   { k @gl@(ind)  continue } 
         s PidJob=@gl@(ind,"JOB")
          if '$DATA(^$JOB(PidJob))  { k @gl@(ind)  continue }
       }
]]></Implementation>
</Method>

<Method name="GetIP">
<Description>
Получить IP клиента</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    s ip=$ZU(67, 15, $job)
    if ip="::1" s ip=""
    if ip="" {
       s I=$ZU(111,0)   
       s ip=$A(I,1)_"."_$A(I,2)_"."_$A(I,3)_"."_$A(I,4)
       k I
    }
   q ip
]]></Implementation>
</Method>

<Method name="InitPreRunJob">
<Language>javascript</Language>
<WebMethod>1</WebMethod>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   /// Открытие модальных окон в центре экрана
   /// popupwindow("SMS.SendOneSMS.cls",'Отправка SMS',500,360);
   function popupwindow(url, title, w, h,FunPreClose) {
        var y = window.outerHeight / 2 + window.screenY - ( h / 2)
        var x = window.outerWidth / 2 + window.screenX - ( w / 2)
        var win=window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + y + ', left=' + x);
        //  win.onload = function() {};
        if ( FunPreClose!=undefined){
             win.addEventListener('DOMContentLoaded', function() { 
                
             }); 
        }
        return win;
    }

    /// Отслеживаем событие закрытия окна
    function popupCls(win, callback) { 
          !function  popupClsСheck () { 
            if(win.closed){ 
              callback.call(); 
              return; 
           } 
           setTimeout(popupClsСheck, 1000); 
        }(); 
     }; 
     // записать значение     
     setCookie=function (cname, cvalue, exdays) { var d = new Date(); d.setTime(d.getTime() + (exdays)); var expires = 'expires='+d.toUTCString(); document.cookie = cname + '=' + cvalue + "; " + expires;} 
     // Удалить значение
     delCookie=function (name) { setCookie(name, '', { expires: -1  }) }
     // Получить значение
     getCookie=function (cname) { var name = cname + '='; var ca = document.cookie.split(';'); for(var i=0; i<ca.length; i++) { var c = ca[i]; while (c.charAt(0)==' ') c = c.substring(1); if (c.indexOf(name) == 0) return c.substring(name.length,c.length); } return '';}
    
     
   
    //ddd var ClientIP="/*( s I=$ZU(111,0)  w $A(I,1)_"."_$A(I,2)_"."_$A(I,3)_"."_$A(I,4) k I )*/";
     var IntervalRunJobMilSec=2000;
     callJob=function(MethodName){
       var GlobalIDString="";
       var FunBegin=null;
       var FunCallBack=null;
       var FunProgress=null;
       var async=false;
       var arr=new Array();
       if ((''+callJob.arguments[1])=='[object Arguments]'){
          arr.push(callJob.arguments[0]);     
          for(var ind in callJob.arguments[1]){if (callJob.arguments[1][ind]==undefined){continue;} arr.push(callJob.arguments[1][ind]); }   
       }else{
          for(var ind in callJob.arguments){if (callJob.arguments[ind]==undefined){continue;} arr.push(callJob.arguments[ind]); }   
       }
       var isCallQuery=false;
       if (arr.length>1){
          // if ((typeof arr[1] === 'object')||(Array.isArray(arr[1]))) {
          if ((typeof arr[1] === 'object')) {             
            isCallQuery=true;
            obj=arr[1];
            arr.splice(1, 1);
            var count=0;
            for (ind in obj){
               count++;
               if ((count==1)&&(typeof obj[ind] === 'function')){
                  FunBegin=obj[ind];
               } 
               if ((count==2)&&(typeof obj[ind] === 'function')){
                   FunProgress=obj[ind];
               } 
               if ((count==3)&&(typeof obj[ind] === 'function')){
                  FunCallBack=obj[ind];
               } 
               if (typeof obj[ind]  === 'string'){
                  GlobalIDString=obj[ind];
               } 
               if (typeof obj[ind]  === 'number'){
                   IntervalRunJobMilSec=obj[ind];
               }
            }
            if (GlobalIDString==''){
               async=true ;
            }
         }
       }
       var data = "WARGC=" + (arr.length - 1) + "&WEVENT=" + MethodName.replace(/&amp;/,'&');
       for (i = 1; i < arr.length; i++) {
          arg = arr[i];
          if (typeof arg != "object") {
               // Convert boolean to Cache value before sending
               if (typeof arg == "boolean") arg = (arg ? 1 : 0);
               data = data + "&WARG_" + i + "=" + encodeURIComponent(arg);
          } else if (arg != null) {
               n = 0;
               for (var el in arg) {
                    if (typeof arg[el] != "function") {
                         data = data + "&W" + i + "=" + encodeURIComponent(arg[el]);
                         n = n + 1;
                    }
               }
               data = data + "&WLIST" + i + "=" + n;
          }
       }
       if (isCallQuery==true){
           var requestRunJob = new XMLHttpRequest();
           requestRunJob.open('GET', '/*( w $SYSTEM.CSP.GetDefaultApp($ZU(5)))*//%25ZWeb.RunJob.cls/?cspRunJobTest='+encodeURIComponent(GlobalIDString), false);
           requestRunJob.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
           requestRunJob.send(''); 
           if (requestRunJob.responseText=="OK") {
                requestRunJob.open('POST', '/*( w $SYSTEM.CSP.GetDefaultApp($ZU(5)))*//%25ZWeb.RunJob.cls/?cspIntRunJob='+GlobalIDString, false);
                requestRunJob.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                requestRunJob.send(data); 
                requestRunJob.ontimeout = function (e) {
                alert('Время ожидания ответа вышло!!!!');
                return {"error":"Время ожидания ответа вышло"};
             }
             if (requestRunJob.status !== 200) {
               return {"error":requestRunJob.status}
             }
             var idNewJob=requestRunJob.responseText;
             LoopProgress(FunCallBack,FunProgress,GlobalIDString,IntervalRunJobMilSec,FunBegin);
           }
       }else{
        if (async==false) {
           var requestRunJob = new XMLHttpRequest();
           requestRunJob.open('POST', '/*( w $SYSTEM.CSP.GetDefaultApp($ZU(5)))*//%25ZWeb.RunJob.cls/?cspIntRunMethod=1', false);
           requestRunJob.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
           requestRunJob.send(data); 
           requestRunJob.ontimeout = function (e) {
             alert('Время ожидания ответа вышло!!!!');
           }
           if (requestRunJob.status !== 200) {
             return {"error":requestRunJob.status}
           }
          idNewJob=requestRunJob.responseText;
        }else{
          /// интервал опроса состояния запроса (локально JS)
          var cspIntRunMethodRequest = new XMLHttpRequest();
          var myVarsetInterval=null;
            var myStopFunctionsetInterval=function () { if (myVarsetInterval!=null){ clearTimeout(myVarsetInterval); }  }
            if (FunProgress!=null){
                  myVarsetInterval= setTimeout(function run() {
                    FunProgress(cspIntRunMethodRequest);
                    // if (cspIntRunMethodRequest.js!=undefined){ try {eval(cspIntRunMethodRequest.js); } catch (err) { }  /*delete cspIntRunMethodRequest.js; */   }
                    myVarsetInterval=setTimeout(run, IntervalRunJobMilSec);
                  }, IntervalRunJobMilSec);
            }
            // Асинхронный запрос класс метода 
            cspIntRunMethodRequest.open("POST", '/*( w $SYSTEM.CSP.GetDefaultApp($ZU(5)))*//%25ZWeb.RunJob.cls/?cspIntRunMethod=1', true);
            cspIntRunMethodRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            cspIntRunMethodRequest.onreadystatechange = function() {
              if (this.readyState == 4 && this.status == 200) {
                 if (typeof FunCallBack === 'function'){
                     FunCallBack(this.responseText);
                 }
                 if (myVarsetInterval!=null){
                     myStopFunctionsetInterval();
                 }
              };
            };
            cspIntRunMethodRequest.send(data);
            if (FunBegin!=null){ FunBegin();}
            idNewJob=cspIntRunMethodRequest; 
        }
          
       }
       
       return idNewJob;
     }
     
     refJob=function(arr){
       var GlobalIDString="";
       var FunBegin=null;
       var FunCallBack=null;
       var FunProgress=null;
       //if ((typeof arr === 'object')||(Array.isArray(arr))) {
      if ((typeof arr === 'object')) {
         var count=0;
          for (ind in arr){
               count++;
               if ((count==1)&&(typeof arr[ind] === 'function')){
                  FunBegin=arr[ind];
               } 
               if ((count==2)&&(typeof arr[ind] === 'function')){
                   FunProgress=arr[ind];
               } 
               if ((count==3)&&(typeof arr[ind] === 'function')){
                  FunCallBack=arr[ind];
               } 
               if (typeof arr[ind]  === 'string'){
                  GlobalIDString=arr[ind];
               } 
               if (typeof arr[ind]  === 'number'){
                   IntervalRunJobMilSec=arr[ind];
               }
          }
          LoopProgress(FunCallBack,FunProgress,GlobalIDString,IntervalRunJobMilSec,FunBegin);
       }
     }
     
     
     
     LoopProgress=function(FunCallBack,FunProgress,GlobalIDString,IntervalRunJobMilSec,FunBegin){
       var requestLoop = new XMLHttpRequest();
       var CountLoopRunJob=0
       var myVarsetInterval;
       myVarsetInterval= setTimeout(
          function runJobLocalLoop() {
          CountLoopRunJob++;
          if (CountLoopRunJob==1){
             if (FunBegin!=null){ FunBegin();  }
          }
           var ProgressObject={};
           ProgressObject['OK']=0;
           requestLoop.open('GET', '#/*( w $SYSTEM.CSP.GetDefaultApp($ZU(5)))*//%25ZWeb.RunJob.cls/?cspRunJobStatus='+encodeURIComponent(GlobalIDString), false);
           requestLoop.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
           requestLoop.onreadystatechange = function() { // (3)
                if (requestLoop.readyState != 4)  clearTimeout(myVarsetInterval);  return;
                if (requestLoop.status != 200) {
                   alert(requestLoop.status + ': ' + requestLoop.statusText);
                   clearTimeout(myVarsetInterval);  return;  
                } 
               
                if (requestLoop.responseText.length==0){   FunCallBack({"error":"Работа процесса прервана"});    clearTimeout(myVarsetInterval);  return;  }
                   try{ ProgressObject=JSON.parse(requestLoop.responseText) }catch (e) { 
                   FunCallBack(e);
                   clearTimeout(myVarsetInterval);  return;  
                }
                
                if ( JSON.stringify(ProgressObject)==="{}"){
                    FunCallBack({"error":"Работа процесса прервана"});
                    clearTimeout(myVarsetInterval);  return;  
                }
                
               
                
                if (ProgressObject['OK']==1){
                    if (ProgressObject['message']!=''){
	                    if (FunCallBack!=null){ 
                            FunCallBack(ProgressObject['message']); 
	                    }else{   
                          if (ProgressObject['message']!=undefined){ try {eval(ProgressObject['message']); } catch (err) { }   delete ProgressObject['message'];    }
                        }
                    }else{
                        if (FunCallBack!=null){ 
                           FunCallBack(ProgressObject); 
                        }
                    }
                    clearTimeout(myVarsetInterval); 
                    return; 
                }
                
                
                
                if (ProgressObject['message']!=''){
	               if (FunProgress!=null){ 
                      FunProgress(ProgressObject['message']); 
	               }else{   
                      if (ProgressObject['message']!=undefined){ try {eval(ProgressObject['message']); } catch (err) { }   delete ProgressObject['message'];    }
                   }
                }else{
                   if (FunProgress!=null){ 
                       FunProgress(ProgressObject); 
                   }
                }
                myVarsetInterval=setTimeout(runJobLocalLoop, IntervalRunJobMilSec);
          }
          requestLoop.send(''); 
       }, IntervalRunJobMilSec);
     }


     killJob=function(GlobalIDString){
        var ProgressObject={};
        var requestRunJob = new XMLHttpRequest();
        requestRunJob.open('GET', '/*( w $SYSTEM.CSP.GetDefaultApp($ZU(5)))*//%25ZWeb.RunJob.cls/?cspKillRunJob='+GlobalIDString, false);
        requestRunJob.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        requestRunJob.send(''); 
        if (requestRunJob.responseText.length==0){  return {};  }
        try{
          ProgressObject=JSON.parse(requestRunJob.responseText);
        }catch (e) { 
           return {} ;  
        }
        return ProgressObject;
     }
     
     
     /// Получить список запущеных процессов
     getJobList=function(){
        var ProgressObject={};
        var requestRunJob = new XMLHttpRequest();
        requestRunJob.open('GET', '/*( w $SYSTEM.CSP.GetDefaultApp($ZU(5)))*//%25ZWeb.RunJob.cls/?cspgetJobList=1', false);
        requestRunJob.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        requestRunJob.send(''); 
        if (requestRunJob.responseText.length==0){  return {};  }
        try{
          ProgressObject=JSON.parse(requestRunJob.responseText);
        }catch (e) { 
           return {} ;  
        }
        return ProgressObject;
     }
     
     /// Получить полный список 
     getAllJobList=function(){
       var ProgressObject={};
        var requestRunJob = new XMLHttpRequest();
        requestRunJob.open('GET', '/*( w $SYSTEM.CSP.GetDefaultApp($ZU(5)))*//%25ZWeb.RunJob.cls/?cspgetAllJobList=1', false);
        requestRunJob.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        requestRunJob.send(''); 
        if (requestRunJob.responseText.length==0){  return {};  }
        try{
          ProgressObject=JSON.parse(requestRunJob.responseText);
        }catch (e) { 
           return {} ;  
        }
        return ProgressObject;
     }
     
    
     /// var res=#server(..Test())#;
     cspHttpServerMethod=callJob;
]]></Implementation>
</Method>
</Class>


<Class name="%ZWeb.Server">
<Description><![CDATA[
<example>
  d ##class(%ZWeb.Server).Start(80  , "D:\www","csp/user/SMWrap.main.cls" )
  d ##class(%ZWeb.Server).Start(80  , "C:\sirena\env","index.html" )
  d ##class(%ZWeb.Server).Stop(80)
  d ##class(%ZWeb.Server).Start(8228  , "C:\AppServ\www","DUBROVINO","index.htm" )
  d ##class(%ZWeb.Server).Start(6010  , "C:\AppServ\www","index.html" )
  d ##class(%ZWeb.Server).Start(6010  , "C:\AppCacheSrv\www","user","index.html" )
  d ##class(%ZWeb.Server).Start(6010  , "D:\sirena\env","sirena","sirena/index.csp" )
  d ##class(%ZWeb.Server).Start(6010  , "E:\!5autoexport\myasnikovia\www","sirena","index.html" )
  d ##class(%ZWeb.Server).Stop()
</example>]]></Description>
<Super>%RegisteredObject</Super>
<TimeCreated>64772,22000.244656</TimeCreated>

<Method name="ExportUDL">
<Description>
d ##class(%ZWeb.Server).ExportUDL()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>path=""</FormalSpec>
<Implementation><![CDATA[
   if $l(path)=0  d $system.OBJ.ExportUDL(##this_".CLS", "C:\TMP\"_##this_".CLS","/diffexport")
   e  d $system.OBJ.ExportUDL(##this_".CLS", path,"/diffexport")
]]></Implementation>
</Method>

<Property name="Port">
<Type>%String</Type>
<InitialExpression>6010</InitialExpression>
</Property>

<Property name="Dir">
<Type>%String</Type>
<InitialExpression>"C:\AppServ\www"</InitialExpression>
</Property>

<Property name="Page">
<Type>%String</Type>
<InitialExpression>"index.html"</InitialExpression>
</Property>

<Property name="NameSpace">
<Type>%String</Type>
<InitialExpression>"user"</InitialExpression>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   d ##class(%ZWeb.Server).Start(..Port  , ..Dir,..NameSpace,..Page )    
   quit $$$OK
]]></Implementation>
</Method>

<Method name="Stop">
<Description>
Остановить работу сервера</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port:%Integer=6010</FormalSpec>
<Implementation><![CDATA[
   s port=$g(port)
    if $l(port)>0 d
    . s ^%ZWebServerKill(port)=1
    .  S httprequest=##class(%Net.HttpRequest).%New()
    .  s httprequest.Server="127.0.0.1"
    .  s httprequest.Port=port
    .  s httprequest.Timeout=1
    .  d httprequest.Get("/")
    .  s httprequest=""
    . h 1
    . w !,"Server "_port_" stoped"
    e  d
    . s port=""
    . q:$d(^%ZWebServerCfg)
    . f  s port=$o(^%ZWebServerCfg(port))  q:port=""   d
    . .  s ^%ZWebServerKill(port)=1
    . .   S httprequest=##class(%Net.HttpRequest).%New()
    . .   s httprequest.Server="127.0.0.1"
    . .   s httprequest.Port=port
    . .   s httprequest.Timeout=1
    . .   d httprequest.Get("/")
    . .   s httprequest=""
    . .  h 1
    . .  w !,"Server "_port_" stoped"
    q
]]></Implementation>
</Method>

<Method name="Start">
<Description>
 d ##class(%ZWeb.Server).Start(9229  , "C:\AppServ\www","USER","index.html" , "main")

Запустить работу сервера</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port:%Integer=6010,pathHost:%String="C:\AppServ\www",startPage:%String="index.html"</FormalSpec>
<Implementation><![CDATA[
     s NameSpaceDefault="%SYS"
     s methodDefault = "OnPage"
     k ^%ZWebServerKill(port)
     ; 63991
     w !,"Автор: Мясников Иван Александрович"
     w !,"Email: Miacom@mail.ru"
     w !
     ; if $p($h,",",1)>(63991+60+60+60) w !,"Льготный период использования закончился. Обратитесь к автору за продлением.",!
     s port = $G(port)  
     s TimeOut=3200
     s pathHost=$g(pathHost)
     s NameSpaceDefault=$g(NameSpaceDefault)
     s startPage=$g(startPage)
     s methodDefault=$g(methodDefault )
          if $d(^%ZWebServerCfg(port)) d
          .    d ..Stop(port)
          .    k ^%ZWebServerCfg(port)
          s ^%ZWebServerCfg(port)=$lb(port,TimeOut,pathHost,NameSpaceDefault, startPage,methodDefault)
     s cmd="cmd /c  start ""explorer.exe""  ""http://127.0.0.1:"_port_"/"_startPage_""""
     ; d $zf(-1,cmd,1)
     job ..startJob(port)
     w !,"Start server:"_port
     q
]]></Implementation>
</Method>

<Method name="startJob">
<Description>
Работа сокет сервера в паралельном потоке.
Ожидание подключения и создание обработчика клиента в паралельном потоке</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port</FormalSpec>
<Implementation><![CDATA[
     s port = $lg(^%ZWebServerCfg(port),1)  
     SET dev="|TCP|1"
     OPEN dev:(:port:"MA"):200
     s inData=""
     s indSrv=0
     s isEnd=0
     k ^%ZWebServerKill(port)
     For  USE dev  READ inData q:isEnd=1  Do:$T
     .  if $d(^%ZWebServerKill(port))   s isEnd=1
     .  USE dev  
     .  Job ..childVar(port):(:17::)  ; Concurrent server bit is on
     .  If $ZCHILD=0 w " Server can't create new JOB!"
     Close dev   
     k ^%ZWebServerKill(port)
     Quit
]]></Implementation>
</Method>

<Method name="TestHacker">
<ClassMethod>1</ClassMethod>
<FormalSpec>zapros=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	s zapros=$ZCVT(zapros,"L")
	q:$l(zapros,".php")>1 1
	q:$l(zapros,".cgi")>1 1
	q:$l(zapros,".jsp")>1 1
	q:$l(zapros,".action")>1 1
	q:$l(zapros,"mstshash=Administr")>1 1
	q:$l(zapros,"login.action")>1 1
	q:$l(zapros,"index.action")>1 1
	q:$l(zapros,"index.jsp")>1 1
	; q:$l(zapros,"robots.txt")>1 1
	q:$l(zapros,"cgi/common.cgi")>1 1
	q:$l(zapros,"command.php")>1 1
	q:$l(zapros,"HNAP1/")>1 1
	q:$l(zapros,"script")>1 1
    q:$l(zapros,"sqlite/main.php")>1 1
    q:$l(zapros,"sqlitemanager/main.php")>1 1
    q:$l(zapros,"SQLite/main.php")>1 1
	q:$l(zapros,"main.php")>1 1
	q:$l(zapros,"test/sqlite/SQLiteManager-1.2.0/SQLiteManager-1.2.0/main.php")>1 1
	q:$l(zapros,"SQLiteManager-1.2.4/main.php")>1 1
	q:$l(zapros,"agSearch/SQlite/main.php")>1 1
	q:$l(zapros,"phpMyAdmin/scripts/setup.php")>1 1
	q:$l(zapros,"pma/scripts/setup.php")>1 1
	q:$l(zapros,"myadmin/scripts/setup.php")>1 1
	q:$l(zapros,"GET /sftp-config.json")>1 1
	q:$l(zapros,"Cookie: mstshash=Administr")>1 1
	; q:$l(zapros,"")>1 1
	q 0
]]></Implementation>
</Method>

<Method name="Log">
<ClassMethod>1</ClassMethod>
<FormalSpec>ipOne,val</FormalSpec>
<Implementation><![CDATA[
  if $d(^%debug(ipOne)) k:^%debug(ipOne)>10000 ^%debug(ipOne)
  s:'$d(^%debug(ipOne)) ^%debug(ipOne)=1
  s ^%debug(ipOne)=^%debug(ipOne)+1,^%debug(ipOne,^%debug(ipOne))=val
  q
]]></Implementation>
</Method>

<Method name="childVar">
<Description>

Процедура обработки клиентского запроса
</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>port</FormalSpec>
<Implementation><![CDATA[

   s TimeOut=$lg(^%ZWebServerCfg(port),2)
   s pathHost=$lg(^%ZWebServerCfg(port),3)
   s NameSpaceDefault=$lg(^%ZWebServerCfg(port),4)
   s startPage=$lg(^%ZWebServerCfg(port),5)
   s methodDefault=$lg(^%ZWebServerCfg(port),6)
   zn NameSpaceDefault ; переключаем область имен
   s numPac=0
   s isCloseChaild=0 
   s SocketTempIndex=0
   USE $ZUTIL(53):(::"M")
   s I=$ZU(111,0)
   s ipOne=$A(I,1)_"."_$A(I,2)_"."_$A(I,3)_"."_$A(I,4)
   s ip=ipOne_":"_($A(I,5)*256+$A(I,6))
   ; s ip=$ZU(67, 15, $job)
   s countEnter=0
   s numPack=0
   s isEndTitle=0 
   ; Инициализируем переменную для работы в CSP классах
   s %request=##class(%CSP.Request).%New()
   s %response=##class(%CSP.Response).%New()
   Do %response.SetHeader("Content-Type","text/html")   
   d %request.InsertCgiEnv("Cache version",$$GetVersion^%apiOBJ())
   d %request.InsertCgiEnv("Cache port",port)
   d %request.InsertCgiEnv("LOCAL_PATH",pathHost)
   d %request.InsertCgiEnv("QUERY_PAGE",startPage)
   d %request.InsertCgiEnv("CLIENT_IP",ip)
   d %request.InsertCgiEnv("REMOTE_ADDR",$ZU(67, 15, $job))
   d %request.InsertCgiEnv("CONTENT_TYP","html") 
   d %request.InsertCgiEnv( "SERVER_NAME",$zu(110))
   
   ; C:\Cache2017.1\CSP\broker
   
   // s %response.CharSet="UTF8"
   s %response.CharSet="CP1251"
   s %SYSLOG=1
   s %CSPsc=1
   ; Set %session.AppTimeout = 3600 
   s isTerminal=0
   s isWebSocket=0
   s isWebSocketKey=""
   s WebSocketVer=-1
   s FallLoad=0
   s FallLoadRunJob=0
   s DebInf=""
   s RefererUrl=""
   For  Q:((isCloseChaild=1)||($T=1)||(isTerminal=1) )  d
   .  If $T=1 s isCloseChaild=1 
   .   // Если терминальный запрос, тогда уничтожаем этот процесс
   .   // if isTerminal=1 d $zu(4,$job)
   . if isEndTitle=0 {
   .     S dev=$ZUTIL(53)  
   .     USE dev:(::"M")  
   .     READ inData:1
   .     s DebInf=DebInf_$c(13,10)_inData
   .     ; s ^debug($job,numPack)=inData
   .     s numPack=numPack+1
   .        ; Если в первой строке нет слов GET или POST , тогда запрос произведен из терминала
   .        if numPack=1  if $l(inData,"GET /")=1  ,$l(inData,"POST /")=1    s isTerminal=1 q
   .        ; Меняем кодировку входных данных(разкоментируется при необходимости, в зовисимости от версии cache')
   .        ; s inData= $ZCVT(inData,"I","URL")
   .        ; s inData=$zcvt($zcvt(inData,"I","URL"),"I","UTF8")
   .        ; s inData= $ZCVT(inData,"I","UTF8")
   .
   .      if numPack=1 d ; обработка первой строки HTML запроса
   .      .   if $l(inData,"GET /")=2   d 
   .      .   .  s zapros=$p(inData,"GET /",2)
   .      .   .  d %request.InsertCgiEnv("REQUEST_METHOD","GET")
   .      .   .  s zapros=$p(zapros," HTTP/",1)   , isGet=1 ,TypeZapros="GET"  
   .      .   if $l(inData,"POST /")=2  d 
   .      .   .  s zapros=$p(inData,"POST /",2)   
   .      .   .  d %request.InsertCgiEnv("REQUEST_METHOD","POST")
   .      .   .  s zapros=$p(zapros," HTTP/",1)   , isPost=1 ,TypeZapros="POST" 
   .      .  
   .      .   if $l(zapros)=0 s zapros=startPage
   .      .   if $l($p(zapros,"?",1))=0   s zapros=startPage_"/"_zapros
   .      .    ; если GET запрос и присутствует один символ "?" тогда заменяем его на "/?"
   .      .   if $l(zapros,"/?")=1 , $l(zapros,"?")'=1 , $e(zapros, $l( $p(zapros,"?",1)),$l( $p(zapros,"?",1)))'="/"   s zapros=$e(zapros,1,$l( $p(zapros,"?",1)))_"/?"_$e(zapros,$l( $p(zapros,"?",1))+2,$l(zapros))
   .      .
   .      .       if $l(zapros,"csp/broker/cspxmlhttp.js")=2 {
   .      .   	      s FallLoad=1
   .      .        }
   .      .        if $l(zapros,"csp/broker/cspbroker.js")=2 {
   .      .   	      s FallLoadRunJob=1  
   .      .        }
   .      .   
   .      .   Do %request.InsertCgiEnv("PATH_TRANSLATED",$tr(pathHost_"/"_zapros,"/","\"))
   .      .   Do %request.InsertCgiEnv("QUERY_STRING",zapros)
   .      .   Do %request.InsertCgiEnv("SERVER_ADDR",$p(ip,":",1))   
   .      .   Do %request.InsertCgiEnv("REMOTE_PORT",$p(ip,":",2))   
   .      .   Do %request.Set("clientip",ip) 
   .      .   Do:$l(zapros)=0 %request.InsertCgiEnv("REQUEST_URI",zapros)   
   .      .   q
   .   
   . 
   .     if $l(inData,":") >1 d
   .     .  s nam=$p(inData,": ",1)
   .     .  s val=$p(inData,": ",2)
   .     .  Do %request.Set(nam,val)    
   .     .  do %request.InsertCgiEnv($ZCVT(nam,"U"),val)
   .     .  if nam="Referer"   s RefererUrl=val ; d %request.InsertCgiEnv("HTTP_REFERER",val)
   .   
   .     ; проверяем наличие трех Enter (это признак окончания заголовка html запроса)
   .       if $l(inData)=0 s countEnter=countEnter+1
   .       if countEnter=2 s isEndTitle=1 
   .       if $l(inData)>0 s countEnter=0
   .       q
   .  }
   .
   .  ; читаем тело POST запроса 
   .  if $l(%request.GetCgiEnv("CONTENT-LENGTH"))'=0 {
   .       s lenPost=%request.GetCgiEnv("CONTENT-LENGTH")
   .       d %request.InsertCgiEnv("CONTENT_LENGTH",lenPost)
   .       ; s BodyPost=##class(%CSP.BinaryStream).%New()
   .       ; s %request.Content=##class(%CSP.BinaryStream).%New()
   .       Set %request.Content=##class(%GlobalCharacterStream).%New()
   .       s indPostTeloZaprosa=0
   .       s isCloseChaildPost=0
   .       ;  while (isCloseChaildPost=0&&lenPost>0) {
   .       while (lenPost>0) {  
   .          If $T=1 s isCloseChaildPost=1
   .          USE $ZUTIL(53):(::"M")  
   .          READ inData:1 ; 0.01  
   .          d ..Log(ipOne,inData)
   .          s lenPost=lenPost-$l(inData)
   .          s indPostTeloZaprosa=indPostTeloZaprosa+1
   .          s ^%WebPost($JOB,indPostTeloZaprosa)=inData
   .          ; s ^debug("POST",indPostTeloZaprosa)=inData
   .          ; s ^debug("POST",indPostTeloZaprosa,0)=$l(inData)
   .          d %request.Content.Write(inData)
   .          ; s inData= $ZCVT(inData,"I","URL")
   .          ; Разбираем параметры из первой строки тела post запроса
   .          if $l(inData,"=")>1 {
   .          for  {
   .               s nam=$e(inData,1,$l($p(inData,"=",1)))
   .               s inData=$e(inData,$l(nam)+1,$l(inData))
   .               s val=$e(inData,2,$l($p(inData,"&",1)))
   .               s inData=$e(inData,$l(val)+3,$l(inData))
   .               if $l(val)>32760 {
   .                  s obj=##class(%CSP.CharacterStream).%New()
   .                  d obj.Write(val)
   .                  Do %request.Set(nam,obj)
   .               } else {
   .                  Do %request.Set(nam,val)
   .               }
   .               q:$l(inData)=0
   .               q:$l(inData,"=")=1
   .            }
   .          }
   .       }
   .       d %request.Content.Rewind()
   .       ;   for  {
   .       ;     q:%request.Content.AtEnd;
   .       ;     s ^deb=%request.Content.Read(32000)
   .       ;   }
   .       s isCloseChaild=1  
   .       q
   .    }
   .    s isCloseChaild=1 
   .    q
   q:ip=""
 
  if RefererUrl'="" {
	    d %request.InsertCgiEnv("HTTP_REFERER",RefererUrl)
  }
  
  ; d ..Log(ipOne,DebInf)
      
      
   if FallLoad=1{
	   w "HTTP/1.1 200",$c(13,10)
       w "Content-type: application/x-javascript",$c(13,10)
       w "Connection: close"_$c(13,10,13,10)
	   d ..clsConnect() q   
   }

   if FallLoadRunJob=1 {
        USE $ZUTIL(53):(::"M") 
        w "HTTP/1.1 200",$c(13,10)
        w "Content-type: application/x-javascript"_$c(13,10)
        w "Connection: close"_$c(13,10,13,10)
        d ##class(%ZWeb.RunJob).OnPage()
        d ..clsConnect() q 
    }
   
   ;  if '$d(^iplist(ipOne)) { s ^iplist(ipOne)=0}
   ;  s ^iplist(ipOne)=^iplist(ipOne)+1
   ;  s ^iplist(ipOne,^iplist(ipOne),$zd(+$h,4),$zt($p($h,",",2)))=DebInf
   /// зашита от злоумышлеников
  // if ..TestHacker(DebInf)=1
  // {
  //     w "HTTP/1.1 200",$c(13,10)
  //     w "Content-type: text/plain",$c(13,10)
  //     w "Connection: close"_$c(13,10,13,10)
  //	   w "Ваш IP адрес "_$p(%request.CgiEnvs("CLIENT_IP"),":",1)
  //	   d ..clsConnect() q   
  // }
   k DebInf
   ;
   ; обрабатываем терминальный Socket запрос 
   if isTerminal=1 {
     ; s ^debug($job,numPack)=inData
     ; For  Q:((isCloseChaild=1)||($T=1)||(isEndTitle=1) )  d
     ; .    If $T=1 s isCloseChaild=1 k ^debug($job) q
     ; .    USE $ZUTIL(53):(::"M")  
     ; .    READ inData
     ; .    if inData="exit" s isCloseChaild=1  k ^debug($job) q
     ; .    s numPack=numPack+1
     ; .    s ^debug($job,numPack)=inData
   }
  ;  если обрабатываем  терминальный запрос , тогда выходим
    q:isTerminal=1
  ;
  ; Запоминаем расширение файла как тип содержимого
    s typ=$p(zapros ,".", $l(zapros,"."))
    s typ=$p(typ,"/?",1)
    s typ=$p(typ,"/",1)
    d %request.InsertCgiEnv("CONTENT_TYP",typ)
  ; 
  ; USE $ZUTIL(53):(::"M") w "HTTP/1.1 200",$c(13,10),"Content-type: text/plain","",$c(13,10),"Connection: close"_$c(13,10,13,10)
  ; Разбираем Куки в параметры
   d ..ParseСookie()
  ; Разбираем параметры из URL строки 
   d ..ParseParam()
   s %request.URL="/"_%request.CgiEnvs("QUERY_PAGE")
  ;  Если етсьпараметр "typ" тогда меняем тип содержимого
   if $l(%request.Get("typ",""))>0  d %request.InsertCgiEnv("CONTENT_TYP",%request.Get("typ","")) 

  ; Инициируем сесию ---
    d ..InitSession()
  
  ; Выводим содержимое из каталога
    s PathFileLocal=%request.CgiEnvs("PATH_TRANSLATED")
    if ..GetRawHtml(PathFileLocal)=1  d ..clsConnect() q
 
   ; Переключаем область имен, если указан параметре "namespace"
     if $l(%request.Get("namespace",""))'=0{  d $zu(5,%request.Get("namespace","")) }
     d %request.InsertCgiEnv("NAMESPACE",$zu(5)) ; Запоминаем имя области имен
   ; -------------------------------------------------------------------
   s app=$SYSTEM.CSP.GetAppName(%request.CgiEnvs("QUERY_PAGE"))
   s app="/"_$e(app,1,$l(app)-1)
   &sql(
      select TOP 1 NameLowerCase,NameSpace,Path,NameLowerCase
      INTO  :NameLowerCase,:NameSpace,:Path,:NameLowerCase
      from Security.Applications
      where id=:app
   )
   if SQLCODE'=0{
        USE $ZUTIL(53):(::"M") w "HTTP/1.1 400",$c(13,10)
        w "Content-type: text/plain"_"; charset="_%response.CharSet,$c(13,10)
        w "Connection: close"_$c(13,10,13,10)
        d ..clsConnect()
        q 
   }
   d $zu(5,NameSpace)
 
 
  
   ; Имя класса
   s ClassNameCsp=$SYSTEM.CSP.GetClassName("/"_%request.CgiEnvs("QUERY_PAGE"))
   if ..GetClsHtml(ClassNameCsp,0)=1    d ..clsConnect() q 
  
   s ShortPage=$e(%request.CgiEnvs("QUERY_PAGE"),$l(app),$l(%request.CgiEnvs("QUERY_PAGE")))
   s PathFileLocal=$tr(Path_ShortPage,"/","\")
   if ..GetRawHtml(PathFileLocal)=1  d ..clsConnect() q
    
     ; 
     ;  Запрашиваемый ресурс не найден
        USE $ZUTIL(53):(::"M") w "HTTP/1.1 400",$c(13,10)
        w "Content-type: text/plain"_"; charset="_%response.CharSet,$c(13,10)
        w "Connection: close"_$c(13,10,13,10)
       ; w !,ShortPage
       ; w !,Path
        w !,"=================================" 
        w !,"=      Ресурс не найден        ="  
        w !,"=================================" 
        w !,!,%request.CgiEnvs("QUERY_PAGE")
       ; w !, PathFileLocal
        /*
        zw %request
        w !,!
        zw %response
        w !,!
        zw %session
        w !,!
        w %request.GetCgiEnv("QUERY_PAGE"),!
        w PathFileLocal,!
        w PathFile,!
        w !,NameLowerCase
        w !,NameSpace
        w !,Path
        w !,NameLowerCase
        w !,DispatchClass 
        w !,"OK"
        */
        d ..clsConnect()
        q
]]></Implementation>
</Method>

<Method name="InitSession">
<Description>
инициализации сесии</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   s ip=%request.GetCgiEnv("CLIENT_IP")
   s zapros=%request.GetCgiEnv("QUERY_PAGE")
   s ipKey="%ZWeb.Server@"_$p(ip,":",1)
   ; Шифрование ключа (если конечно есть желание)
   ; s pass=ipKey,HashPwd="" 
   ; F ix489=1:1:7 { S HashPwd=HashPwd_$ZCRC(pass,ix489)}  
   ; s ipKey=HashPwd
   if ##class(%CSP.Session).%ExistsId(ipKey)=1{
       s %session=##class(%CSP.Session).%OpenId(ipKey)
   } else {
       s %session=##class(%CSP.Session).%New(ipKey)
   }
   s %session.ProcessId="|"_$zu(5)_"|"_zapros ;  "%ZWeb.Server: job"_$job_" "
   S %session.AppTimeout = %request.GetCgiEnv("TIME_OUT")
   ; d %session.Login("_SYSTEM")
    
   S %session.BrowserPlatform="Windows" 
   S %session.BrowserName = "Safari" 
   S %session.Namespace=%request.GetCgiEnv("NAMESPACE")
   S %session.UserAgent=%request.GetCgiEnv("HTTP_USER_AGENT","")
   d %session.%Save()
   s $LI(^%cspSession(ipKey),15)="%ZWeb.Server:"_$job ;  Приложение 
   s $LI(^%cspSession(ipKey),18)=$job        ;  ID процесса
   d %session.%Save()
   q
]]></Implementation>
</Method>

<Method name="clsConnect">
<Description>
Закрытие соединения , очистка переменных (глобалов)</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   ; Close dev  
   ; w *-1,!
   w *-2,$c(13,10)
   s isCloseChaild=0   
   k ^%WebPost($JOB)
   q
]]></Implementation>
</Method>

<Method name="ParseСookie">
<Description>

 разбираем Сookie</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   q:$l(%request.GetCgiEnv("COOKIE"))=0
   s arg=%request.GetCgiEnv("COOKIE")
   do %request.InsertCookie("COOKIE",arg)
   for ind=1:1:$l(arg,"; ")  d
   .    s tmp= $p(arg,"; ",1)
   .    if $l(tmp,"=")=2  d
   .    .  s ParamName=$p(tmp,"=",1)
   .    .  s zndch=$p(tmp,"=",2)
   .    e  d
   .    .   s ParamName=$p(tmp,"=",1)
   .    .   s zndch=""
   .    do %request.InsertCgiEnv(ParamName,zndch) 
   .    ; do %request.InsertCookie(ParamName,zndch)
   .    ; s ^deb($job,ParamName)=zndch
   s ParamName=""
]]></Implementation>
</Method>

<Method name="ParseParam">
<Description>

разбираем Параметры в строке URL запроса </Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   ;
   ;  разбираем Параметры в строке запроса
   if $l(%request.GetCgiEnv("QUERY_STRING"))'=0 d
   .     s arg=%request.GetCgiEnv("QUERY_STRING")
   .     d %request.InsertCgiEnv("QUERY_PAGE",$p(arg,"/?",1))
   .     d %request.InsertCgiEnv("PATH_TRANSLATED",$tr(%request.GetCgiEnv("LOCAL_PATH")_"/"_$p(arg,"/?",1),"/","\"))
   .     
   .     if $l(arg,"?")>1  d
   .     .  if $l($p(arg,"?",1))=0  d
   .     .  .  s arg="/"_arg
   .     s arg=$p(arg,"/?",2) 
   .     if $l(arg)>0  d
   .     .  s indParam=0
   .     .  for   q:arg=""   d
   .     .  .    s tmp= $p(arg,"&",1)
   .     .  .    if $l(tmp,"=")=2  d
   .     .  .    .  s ParamName=$p(tmp,"=",1)
   .     .  .    .  s zndch=$p(tmp,"=",2)
   .     .  .    e  d
   .     .  .    .  ; s indParam=indParam+1
   .     .  .    .  ; s ParamName="param"_indParam
   .     .  .    .  ; s zndch=$p(tmp,"=",1)
   .     .  .    .  s ParamName=$p(tmp,"=",1)
   .     .  .    .  s zndch=""
   .     .  .    s arg=$p(arg ,tmp,2)
   .     .  .    if $l(arg)>1 s arg=$e( arg,2,$l(arg))
   .     .  .    q:ParamName=""
   .     .  .    ; s ParamName = $ZCVT(ParamName,"L")
   .     .  .    ; d %request.Set(ParamName,zndch)
   .     .  .    Do %request.Set(ParamName,zndch) 
   .     .  .    ; d %request.InsertCgiEnv(ParamName,zndch)
   .     .  .    s ParamName=""
   q
]]></Implementation>
</Method>

<Method name="ContentType">
<Description>
Определить MIME тип по имени файла</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
     s rashirenie=$p(FileName ,".", $l(FileName,"."))
     s rashirenie= $ZCVT(rashirenie,"l")
     q:rashirenie="css" "text/css"
     q:rashirenie="js" "application/x-javascript"
     q:rashirenie="xml" "text/xml"
     q:rashirenie="dtd" "text/xml"
   ; -------------------------------------
     q:rashirenie="txt" "text/plain"
     q:rashirenie="inf" "text/plain"
     q:rashirenie="nfo" "text/plain"
     q:rashirenie="php" "text/plain"
   ; -------------------------------------
     q:rashirenie="html" "text/html"
     q:rashirenie="csp" "text/html"
     q:rashirenie="htm" "text/html"
     q:rashirenie="shtml" "text/html"
     q:rashirenie="shtm" "text/html"
     q:rashirenie="stm" "text/html"
     q:rashirenie="sht" "text/html"
     q:rashirenie="sht" "text/html"
     q:rashirenie="csp" "text/html"
     q:rashirenie="mac" "text/html"
     q:rashirenie="cls" "text/html"
     q:rashirenie="jpg" "image/jpeg"

     ; q:rashirenie="cos" "text/html" ; каше обжект скрипт
   ; -------------------------------------
     q:rashirenie="mpeg" "video/mpeg"
     q:rashirenie="mpg" "video/mpeg"
     q:rashirenie="mpe" "video/mpeg"
   ; -------------------------------------
     q:rashirenie="ai" "application/postscript"
     q:rashirenie="zip" "application/zip"
                  q:rashirenie="zsh" "text/x-script.zsh"
                  q:rashirenie="x-png" "image/png"
                  q:rashirenie="xls" "application/x-excel"
                  q:rashirenie="xlm" "application/excel"
                  q:rashirenie="wav" "audio/x-wav"
                  q:rashirenie="txt" "text/plain"
                  q:rashirenie="tiff" "image/tiff"
                  q:rashirenie="tif" "image/x-tiff"
                  q:rashirenie="text" "text/plain"
                  q:rashirenie="swf" "application/x-shockwave-flash"
                  q:rashirenie="sprite" "application/x-sprite"
                  q:rashirenie="smil" "application/smil"
                  q:rashirenie="sh" "text/x-script.sh"
                  q:rashirenie="rtx" "text/richtext"
                  q:rashirenie="rtf" "text/richtext"
                  q:rashirenie="pyc" "application/x-bytecode.python"
                  q:rashirenie="py" "text/x-script.phyton"
                  q:rashirenie="png" "image/png"
                  q:rashirenie="pic" "image/pict"
                  q:rashirenie="mp3" "video/mpeg"
                  q:rashirenie="mp2" "video/mpeg"
                  q:rashirenie="movie" "video/x-sgi-movie"
                  q:rashirenie="mov" "video/quicktime"
                  q:rashirenie="mjpg" "video/x-motion-jpeg"
                  q:rashirenie="mime" "www/mime"
                  q:rashirenie="mif" "application/x-mif"
                  q:rashirenie="midi" "audio/midi"
                  q:rashirenie="js" "application/javascript"
                  q:rashirenie="jpeg" "image/jpeg"
                  q:rashirenie="jps" "image/x-jps"
                  q:rashirenie="jam" "audio/x-jam"
                  q:rashirenie="jav" "text/plain"
                  q:rashirenie="java" "text/x-java-source"
                  q:rashirenie="htm" "text/html"
                  q:rashirenie="html" "text/html"
                  q:rashirenie="gzip" "application/x-gzip"
                  q:rashirenie="gif" "image/gif"
                  q:rashirenie="gl" "video/gl"
                  q:rashirenie="csh" "text/x-script.csh"
                  q:rashirenie="css" "text/css"
                  q:rashirenie="bsh" "application/x-bsh"
                  q:rashirenie="bz" "application/x-bzip"
                  q:rashirenie="bz2" "application/x-bzip2"
                  q:rashirenie="c" "text/plain"
                  q:rashirenie="c++" "text/plain"
                  q:rashirenie="cat" "application/vnd.ms-pki.seccat"
                  q:rashirenie="cc" "text/plain"
                  q:rashirenie="htmls" "text/html"
                  q:rashirenie="bmp" "image/bmp"
                  q:rashirenie="bm" "image/bmp"
                  q:rashirenie="avi" "video/avi"
                  q:rashirenie="avs" "video/avs-video"
                  q:rashirenie="au" "audio/basic"
                  q:rashirenie="arj" "application/arj"
                  q:rashirenie="art" "image/x-jg"
                  q:rashirenie="asf" "video/x-ms-asf"
                  q:rashirenie="asm" "text/x-asm"
                  q:rashirenie="asp" "text/asp"
     q "application/octet-stream"
]]></Implementation>
</Method>

<Method name="IsParentClass">
<Description>
Проверка Является ли класс дочерним от указанного</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName="",ClassParent=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
   q:'$d(^oddDEF(ClassName,60)) 0
   if $l(^oddDEF(ClassName,60),ClassParent)>1  q 1
   s res=0
   for i=1:1:$l(^oddDEF(ClassName,60),",") {
         s SubClass=$p(^oddDEF(ClassName,60),",",i)
         if $d(^oddDEF(SubClass)) {
             if $d(^oddDEF(SubClass,60)) { 
               if $l(^oddDEF(SubClass,60),ClassParent)>1   s res=1  q
             }   
         }
   }
   q res
]]></Implementation>
</Method>

<Method name="CreateMacFromRaw">
<Description>
Создать MAC программу из файла</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rawFileName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  if ##class(%File).Exists(rawFileName)=1 {
      s MacName=$p(rawFileName,"\",$l(rawFileName,"\"))
      s MacNameFull=$p(MacName,".",$l(MacName,"."))
      s MacName=$e(MacName,1,$l(MacName)-1-$l($p(MacName,".",$l(MacName,"."))))
      d %request.InsertCgiEnv("MacName",MacName)
      if ##class(%Routine).Exists(MacName)=1 d ##class(%Routine).Delete(MacName)
      s readRut=##class(%Routine).%New(MacName)
      S stream=##class(%FileBinaryStream).%New()
      S stream.Filename=rawFileName 
      While 'stream.AtEnd  {
        d readRut.Write(stream.Read(32000))
      }
      d stream.%Close()
      s stream=""
      d readRut.Save()
      k ^SPOOL($job) 
      O 2:($job) 
      U 2:($job)
      w $$CompileRoutine^%apiRTN(MacNameFull)
      c 2:($job)  
      k ^SPOOL($job) 
      USE $ZUTIL(53):(::"M")
      q 1
  }
  q 0
]]></Implementation>
</Method>

<Method name="GetRawHtml">
<ClassMethod>1</ClassMethod>
<FormalSpec>rawFileName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 
  ; if $l($zcvt(rawFileName,"L"),"csp\broker")=2{
  ;   s LocalPath=%request.GetCgiEnv("LOCAL_PATH") 
  ;   s rawFileName=$Replace(rawFileName,LocalPath,"") 
  ;   s rawFileName= $replace($p($zu(12),"\mgr\",1)_"/"_$zcvt(rawFileName,"L"),"/","\")
  ;   d %request.InsertCgiEnv("PATH_TRANSLATED",rawFileName) 
  ;   ;  <script type="text/javascript"  src='%ZWeb.Lib.js.cspbroker.cls'></script>
  ;   ;  <script type="text/javascript"  src='%ZWeb.Lib.js.cspxmlhttp.cls'></script> 
  ; }
      if ##class(%File).Exists(rawFileName)'=1 q 0
      s ^%deb($job)=rawFileName
      ; старый вариант получения расширения
      s rashirenie=$ZCVT($p(rawFileName ,".", $l(rawFileName,".")),"L")   
      s typ=..ContentType("."_rashirenie) 
      w "HTTP/1.1 200",$c(13,10)
      w "Content-type: "_typ_"; "_%response.CharSet,$c(13,10)
      w "Connection: close"_$c(13,10,13,10)
      S stream=##class(%FileBinaryStream).%New()
      S stream.Filename=rawFileName 
      While 'stream.AtEnd  {
	      s html=stream.Read(32000)
          w html
      }
      d stream.%Close()
      s stream=""
      s file =""
      q 1
]]></Implementation>
</Method>

<Method name="GetRawHtmlOld">
<Description>
Отправить клиенту файл с жесткого диска</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rawFileName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  // Замена пути к Cache библиотекам JS    
  //     <script  type="text/javascript" src="/csp/broker/cspxmlhttp.js"></script>
  //     <script  type="text/javascript" src="/csp/broker/cspbroker.js"></script>
  if $l($zcvt(rawFileName,"L"),"csp\broker")=2{
     s LocalPath=%request.GetCgiEnv("LOCAL_PATH") 
     s rawFileName=$Replace(rawFileName,LocalPath,"") 
     s rawFileName= $replace($p($zu(12),"\mgr\",1)_"/"_$zcvt(rawFileName,"L"),"/","\")
     d %request.InsertCgiEnv("PATH_TRANSLATED",rawFileName) 
     ;  <script type="text/javascript"  src='%ZWeb.Lib.js.cspbroker.cls'></script>
     ;  <script type="text/javascript"  src='%ZWeb.Lib.js.cspxmlhttp.cls'></script> 
  }
  ; s ^deb($job)=rawFileName
  s glHtml="^mtempRawHtmlFile"
  s list="js,html,htm,csp,css"
  s rashirenie=%request.GetCgiEnv("CONTENT_TYP") 
  s typ=..ContentType("."_rashirenie) 
  s file = ##class(%File).%New(rawFileName)
  s ReadFileGlobal=1
  // Если клобала с ресурсом нет, тогда создаем его
  if '$d(@glHtml@(rawFileName)) {
	  s ReadFileGlobal=0
  }else{ 
      ; если дата создания не соответствует дате в глобале, тогда перезагружаем глобал
      if $lg(@glHtml@(rawFileName),2)'=file.DateCreated  s ReadFileGlobal=0 k @glHtml@(rawFileName)
      ; если дата модификации не соответствует дате в глобале, тогда перезагружаем глобал
      if $lg(@glHtml@(rawFileName),3)'=file.DateModified s ReadFileGlobal=0 k @glHtml@(rawFileName)
      ; Если размер файла не соответствует файлу в глобеле
      if $lg(@glHtml@(rawFileName),4)'=file.Size s ReadFileGlobal=0 k @glHtml@(rawFileName)
  }
  //s ReadFileGlobal=0 
  if ReadFileGlobal=0 {
    ///  Передаем RAW файл из каталога директории 
    if ##class(%File).Exists(rawFileName)=1 {
      ; старый вариант получения расширения
      ; s rashirenie=$ZCVT($p(rawFileName ,".", $l(rawFileName,".")),"L")   
      ; Новый вариант в строке запроса можно указать тип ответа Пример: http://localhost:6010/csp/user/User.CacheLibTest.cls/?typ=jpg
      w "HTTP/1.1 200",$c(13,10)
      w "Content-type: "_typ_"; "_%response.CharSet,$c(13,10)
      w "Connection: close"_$c(13,10,13,10)
      S stream=##class(%FileBinaryStream).%New()
      S stream.Filename=rawFileName 
      s numLine=0
      s @glHtml@(rawFileName)=$lb(numLine,file.DateCreated,file.DateModified , file.Size,0)
      if $l(list,rashirenie)=1 {
         While 'stream.AtEnd  {
	       s numLine=numLine+1
	       s html=stream.Read(32000)
           s @glHtml@(rawFileName,numLine)=html
           s $LI(@glHtml@(rawFileName),1)=numLine
           s $LI(@glHtml@(rawFileName),5)=$Lg(@glHtml@(rawFileName),5)+$l(html)
           w html
         }
      }else{
        if typ["html" {
          ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
          ;    w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>",!
          ; }
          if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
             w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>",!
          }
        } 
        While 'stream.AtEnd  {
          s numLine=numLine+1
          s html=stream.Read(32000)
          s @glHtml@(rawFileName,numLine)=html
          s $LI(@glHtml@(rawFileName),1)=numLine
          s $LI(@glHtml@(rawFileName),5)=$Lg(@glHtml@(rawFileName),5)+$l(html)
          d ..ExecFrag(html,"/*(",")*/") 
        }
      }
      d stream.%Close()
      s stream=""
      s file =""
      q 1
    }
    q 0
  }else{
      w "HTTP/1.1 200",$c(13,10)
      w "Content-type: "_typ_"; "_%response.CharSet,$c(13,10)
      w "Connection: close"_$c(13,10,13,10)
	  if $l(list,rashirenie)=1 {  
          s numLine=""
         for {
	       s numLine=$o(@glHtml@(rawFileName,numLine))
	       q:numLine=""  
           s html=@glHtml@(rawFileName,numLine)
           w html
         }
      }else{
        if typ["html" {
          ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
          ;    w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>",!
          ; }
          if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
             w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>",!
          }
        } 
          s numLine="" 
         for {
	       s numLine=$o(@glHtml@(rawFileName,numLine))
	       q:numLine=""  
           s html=@glHtml@(rawFileName,numLine)
           d ..ExecFrag(html,"/*(",")*/") 
         }
      }
      s file =""  k file
      q 1
  }
  s file =""  k file
  q 0
]]></Implementation>
</Method>

<Method name="ExecFrag">
<Description>
Метод разбивки исходного текста на Cache` код и HTML текст</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SrcCode="",Beg="",End=""</FormalSpec>
<Implementation><![CDATA[     q:SrcCode=""   q:Beg=""    q:End=""    for ExecFragInd=1:1:$l(SrcCode,End){  s tmp=$p(SrcCode,End,ExecFragInd)   s Html=$p(tmp,Beg,1)     s Code=$p(tmp,Beg,2)   w Html   TRY {     x Code    } CATCH ErrorHandle {    zw ErrorHandle  }    }
]]></Implementation>
</Method>

<Method name="GetClsHtml">
<Description>
Метод запуска класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName,addLib=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    if $l(ClassName)'=0 {
      ; if $zcvt($e(ClassName,$l(ClassName)-$l("cls"),$l(ClassName)) ,"L")=".cls" {
      ;    s ClassName=$e(ClassName,1,$l(ClassName)-$l(".cls"))          
      ; }
        if $zObjClassMethod("%CompiledClass","%ExistsId",ClassName)=1 {
             If $System.CLS.IsMthd(ClassName,"OnPreHTTP") {
                ; try{  }CATCH err{  zw err           }
                d $zObjClassMethod(ClassName,"OnPreHTTP")    
             }
             w "HTTP/1.1 200",$c(13,10)
             w "Content-type: "_%response.ContentType_"; charset="_%response.CharSet,$c(13,10)
            
            if $d(%response.Headers("CONTENT-DISPOSITION")){
	            w "Content-Disposition: "_%response.Headers("CONTENT-DISPOSITION")_$c(13,10)
            }
            if $d(%response.Headers("PRAGMA")){
	            w "PRAGMA: "_%response.Headers("PRAGMA")_$c(13,10)
            }
            if $l(%response.ContentLength)>0 {
               w "Content-Length: "_%response.ContentLength_$c(13,10)
            }
            ; k ^SPOOL($job)
            ; O 2:($job) 
            ; U 2:($job)
            ; zw %response
            ; c 2:($job)  
            ; USE $ZUTIL(53):(::"M")
            
            
             w "Connection: close"_$c(13,10,13,10)
             try{ 
             if addLib=1 {
                if %response.ContentType["html" {
                  ;   <script  type='text/javascript' src='/csp/broker/cspxmlhttp.js'></script>
                  ;   <script  type='text/javascript' src='/csp/broker/cspbroker.js'></script>
                ;  if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
                ;    w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>"
                ;  }
               }
             }
             d $zObjClassMethod(ClassName,"OnPage")   
             }CATCH err{ zw err }
             d ..clsConnect()
             q 1
         }
      }   
      q 0
]]></Implementation>
</Method>

<Method name="DrawMac">
<ClassMethod>1</ClassMethod>
<FormalSpec>MacName</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    q:##class(%Routine).Exists(MacName)=0 
 ;   if ##class(%Routine).Exists(MacName)=0 
 ;   {
 ;     k ^deb
 ;     s isFoundMac=0
 ;     s res=##class(%ResultSet).%New("%Library.Routine:RoutineList")
 ;     d res.Execute("*.MAC,*.INT")
 ;     for  q:'res.Next()   q:isFoundMac=1   d
 ;     .  q:$zcvt(res.Get("Name"),"L")'=$zcvt(MacName,"L")
 ;     .  s isFoundMac=1, MacName=res.Get("Name")
 ;     .  s ^deb(res.Get("Name"))=1
 ;     q:isFoundMac=0 0
 ;   }
    s isMacMethod=0    
    s isMacPreMethod=0 
    s MacMethod="OnPage"       
    s MacPreMethod="OnPreHTTP" 
    s readRut=##class(%Routine).%New(MacName)
    s IndParam=""
    s isFoundLabel=0
    for
    {
        q:readRut.AtEnd
        s str=readRut.ReadLine()
        if $l(str)>0,$e(str,1,1)'=" "
        {
          s namesTRING=$e(str,1,$l($p(str," ",1)))
          s NameMethod=$p(namesTRING,"(",1)
          if $ZCVT(NameMethod,"L")=$ZCVT(MacMethod,"L")
          {   s MacMethod=NameMethod
              s isMacMethod=1
          }
          if $ZCVT(NameMethod,"L")=$ZCVT(MacPreMethod,"L")
          {   s MacPreMethod=NameMethod
              s isMacPreMethod=1
          }
        }
        if isMacMethod=1,isMacPreMethod=1 q
     }
     Do readRut.%Close()
     if isMacMethod=1 {
        s cmd=" d "_MacMethod_"^"_MacName_"()" 
     }else{
        s cmd=" d ^"_MacName 
     }
     s $ztrap="ErrPre2"
     if isMacPreMethod=1 {
        x " d "_MacPreMethod_"^"_MacName_"()"  
     }
     s $ZTRAP="ErrOnPage2"
    
     USE $ZUTIL(53):(::"M")
     w "HTTP/1.1 200",$c(13,10)
     w "Content-type: "_%response.ContentType_"; charset="_%response.CharSet,$c(13,10)
     w "Connection: close"_$c(13,10,13,10)
     ; При необходимости можно добавляеть сторонние библиотеки
     if %response.ContentType["html" {
      ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
      ;    w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>",!
      ; }
       if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
          w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>",!
       }
     }
     x cmd 
     w *-1,!
     q 1
ErrPre2     
   w "Error: d "_MacPreMethod_"^"_MacName_""
   w !,$ze,!
   w *-1,!
   q 1  
ErrOnPage2
   w cmd
   w !,$ze,!
   w *-1,!
   q 1
]]></Implementation>
</Method>

<Method name="GetMacHtml">
<Description>
Метод запуска MAC программы</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>zapros</FormalSpec>
<ReturnType>%Library.Boolean</ReturnType>
<Implementation><![CDATA[
   q:%request.Get("typ")'="mac" 0
   s ClassNameOne=$E(zapros,1,$l(zapros)-4)
   s ClassNameOne=$replace(ClassNameOne,"/",".")
   s MacName=ClassNameOne
   ;   Если мак программа ненайдена, тогда ищим чтото похожее среди других классов 
   s MacName=$REPLACE(MacName,"/",".")
   if ##class(%Routine).Exists(MacName)=0 
   {
      s isFoundMac=0
      s res=##class(%ResultSet).%New("%Library.Routine:RoutineList")
      d res.Execute("*.MAC,*.INT")
      for  q:'res.Next()   q:isFoundMac=1   d
      .  q:$zcvt(res.Get("Name"),"L")'=$zcvt(MacName,"L")
      .  s isFoundMac=1, MacName=res.Get("Name")
      q:isFoundMac=0 0
    }
  ;
  ; ищим метку для запуска ,если метка ненайдена, тогда запускаем рутину без метки
    s isMacMethod=0    
    s isMacPreMethod=0 
    s MacMethod="OnPage"       
    s MacPreMethod="OnPreHTTP" 
    s readRut=##class(%Routine).%New(MacName)
    s IndParam=""
    s isFoundLabel=0
    for
    {
        q:readRut.AtEnd
        s str=readRut.ReadLine()
        if $l(str)>0,$e(str,1,1)'=" "
        {
          s namesTRING=$e(str,1,$l($p(str," ",1)))
          s NameMethod=$p(namesTRING,"(",1)
          if $ZCVT(NameMethod,"L")=$ZCVT(MacMethod,"L")
          {   s MacMethod=NameMethod
              s isMacMethod=1
          }
          if $ZCVT(NameMethod,"L")=$ZCVT(MacPreMethod,"L")
          {   s MacPreMethod=NameMethod
              s isMacPreMethod=1
          }
        }
        if isMacMethod=1,isMacPreMethod=1 q
     }
     Do readRut.%Close()
     if isMacMethod=1 {
        s cmd=" d "_MacMethod_"^"_MacName_"()" 
     }else{
        s cmd=" d ^"_MacName 
     }
     s $ztrap="ErrPre"
     if isMacPreMethod=1 {
        x " d "_MacPreMethod_"^"_MacName_"()"  
     }
     s $ZTRAP="ErrOnPage"
     USE $ZUTIL(53):(::"M")
     w "HTTP/1.1 200",$c(13,10)
     w "Content-type: "_%response.ContentType_"; charset="_%response.CharSet,$c(13,10)
     w "Connection: close"_$c(13,10,13,10)
     ; При необходимости можно добавляеть сторонние библиотеки
     if %response.ContentType["html" {
       ; if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.CacheLib")=1 {
       ;   w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.CacheLib.cls'></script>"
       ; }
       if $zObjClassMethod("%CompiledClass","%ExistsId","%ZHTML.RunJob")=1 {
          w "<script language='JavaScript' type='text/javascript' src='%25ZHTML.RunJob.cls'></script>"
       }
     }
     x cmd 
     w *-1,!
     q 1
ErrPre     
   w "Error: d "_MacPreMethod_"^"_MacName_""
   w !,$ze,!
   w *-1,!
   q 1  
ErrOnPage
   w cmd
   w !,$ze,!
   w *-1,!
   q 1
]]></Implementation>
</Method>
</Class>
</Export>
